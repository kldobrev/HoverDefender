                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _init_scorpboss_gun
                                     13 	.globl b_demo_end_screen
                                     14 	.globl _demo_end_screen
                                     15 	.globl b_game_over_menu
                                     16 	.globl _game_over_menu
                                     17 	.globl b_stage_intro_screen
                                     18 	.globl _stage_intro_screen
                                     19 	.globl b_main_menu
                                     20 	.globl _main_menu
                                     21 	.globl b_init_stage_road
                                     22 	.globl _init_stage_road
                                     23 	.globl _hUGE_mute_channel
                                     24 	.globl _hUGE_dosound
                                     25 	.globl _hUGE_init
                                     26 	.globl _fill_bkg_rect
                                     27 	.globl _set_sprite_data
                                     28 	.globl _set_win_tile_xy
                                     29 	.globl _set_win_tiles
                                     30 	.globl _set_win_data
                                     31 	.globl _set_bkg_tiles
                                     32 	.globl _set_bkg_data
                                     33 	.globl _wait_vbl_done
                                     34 	.globl _set_interrupts
                                     35 	.globl _disable_interrupts
                                     36 	.globl _enable_interrupts
                                     37 	.globl _waitpad
                                     38 	.globl _joypad
                                     39 	.globl _add_LCD
                                     40 	.globl _add_VBL
                                     41 	.globl _remove_LCD
                                     42 	.globl _remove_VBL
                                     43 	.globl _menuidx
                                     44 	.globl _explcord
                                     45 	.globl _numkills
                                     46 	.globl _plgun
                                     47 	.globl _gradient
                                     48 	.globl _slope
                                     49 	.globl _precfctr
                                     50 	.globl _chmutedcyccnt
                                     51 	.globl _isapressed
                                     52 	.globl _holeendx
                                     53 	.globl _holestartx
                                     54 	.globl _jumpstarty
                                     55 	.globl _ascendflg
                                     56 	.globl _fallinholeflg
                                     57 	.globl _iframeflg
                                     58 	.globl _iframecnt
                                     59 	.globl _lockmvmnt
                                     60 	.globl _pllives
                                     61 	.globl _machptr
                                     62 	.globl _crntenemy
                                     63 	.globl _pl
                                     64 	.globl _machines
                                     65 	.globl _abtncnt
                                     66 	.globl _prjcnt
                                     67 	.globl _pjctptr
                                     68 	.globl _crntpjct
                                     69 	.globl _projectiles
                                     70 	.globl _checktile
                                     71 	.globl _oamidx
                                     72 	.globl _plspeed
                                     73 	.globl _cloudposx
                                     74 	.globl _sceneryposx
                                     75 	.globl _roadposx
                                     76 	.globl _sitr
                                     77 	.globl _citr
                                     78 	.globl _i
                                     79 	.globl _nextcamtileidx
                                     80 	.globl _camtileidx
                                     81 	.globl _roadbuildidx
                                     82 	.globl _stagenum
                                     83 	.globl _crntstage
                                     84 	.globl _lvlplacptr
                                     85 	.globl _lvlobjscnt
                                     86 	.globl _bossclearflg
                                     87 	.globl _stageclearflg
                                     88 	.globl _holeflg
                                     89 	.globl _stageidx
                                     90 	.globl _enprops
                                     91 	.globl _stingprops
                                     92 	.globl _scorpgunprops
                                     93 	.globl _plprops
                                     94 	.globl _genexplcord
                                     95 	.globl _mutecycnum
                                     96 	.globl _jumphalflimy
                                     97 	.globl _jumplimity
                                     98 	.globl _expldur
                                     99 	.globl _pliframeprd
                                    100 	.globl _enlimit
                                    101 	.globl _abtncooldown
                                    102 	.globl _screenmaxy
                                    103 	.globl _screenmaxx
                                    104 	.globl _screenminy
                                    105 	.globl _screenminx
                                    106 	.globl _pjctllimit
                                    107 	.globl _machinedimswh
                                    108 	.globl _blanktile
                                    109 	.globl _lockedoamtiles
                                    110 	.globl _roadboundy
                                    111 	.globl _plgroundspeed
                                    112 	.globl _jumpspeed
                                    113 	.globl _roadscrspeed
                                    114 	.globl _stnamelengths
                                    115 	.globl _stagenames
                                    116 	.globl _stages
                                    117 	.globl _stage1objs
                                    118 	.globl _stage1road
                                    119 	.globl _roadlanesy
                                    120 	.globl _get_OAM_free_tile_idx
                                    121 	.globl _custom_delay
                                    122 	.globl _incr_oam_sprite_tile_idx
                                    123 	.globl _itr_enemies_ptr
                                    124 	.globl _incr_projectile_counter
                                    125 	.globl _itr_projectile_ptr
                                    126 	.globl _found_free_projectile_space
                                    127 	.globl _get_tile_idx
                                    128 	.globl _clear_all_sprites
                                    129 	.globl _init_stage_bgk
                                    130 	.globl _set_machine_tile
                                    131 	.globl _set_machine_sprite_tiles
                                    132 	.globl _place_machine
                                    133 	.globl _init_player
                                    134 	.globl _respawn_player
                                    135 	.globl _init_machine_props
                                    136 	.globl _init_scorpboss
                                    137 	.globl _collides_with_sidewalk
                                    138 	.globl _is_inside_x_bounds
                                    139 	.globl _move_machine
                                    140 	.globl _move_player
                                    141 	.globl _move_enemy
                                    142 	.globl _incr_bkg_x_coords
                                    143 	.globl _scroll_stage_bkg
                                    144 	.globl _place_stage_obj
                                    145 	.globl _build_stage
                                    146 	.globl _build_road
                                    147 	.globl _build_hole
                                    148 	.globl _manage_hole_props
                                    149 	.globl _manage_projectiles
                                    150 	.globl _manage_machines
                                    151 	.globl _manage_sound_chnls
                                    152 	.globl _manage_player
                                    153 	.globl _get_horiz_dist
                                    154 	.globl _set_projctl_comm_prop
                                    155 	.globl _fire_bullet
                                    156 	.globl _fire_bigbullet
                                    157 	.globl _fire_laser
                                    158 	.globl _drop_bomb
                                    159 	.globl _get_prjctl_x_aimed
                                    160 	.globl _get_prjctl_y_aimed
                                    161 	.globl _is_obj_inside_screen
                                    162 	.globl _is_alive
                                    163 	.globl _destroy_projectile
                                    164 	.globl _init_explosion
                                    165 	.globl _move_projectile
                                    166 	.globl _explode_machine
                                    167 	.globl _anim_explode_boss
                                    168 	.globl _destroy_machine
                                    169 	.globl _take_damage
                                    170 	.globl _add_to_player_shield
                                    171 	.globl _check_iframes
                                    172 	.globl _check_projectile_collsn
                                    173 	.globl _check_player_machine_collsn
                                    174 	.globl _anim_jump
                                    175 	.globl _exec_enemy_pattern
                                    176 	.globl _exec_rider_pattern
                                    177 	.globl _exec_drone_pattern
                                    178 	.globl _exec_missile_pattern
                                    179 	.globl _exec_turret_pattern
                                    180 	.globl _exec_bomber_pattern
                                    181 	.globl _exec_mine_pattern
                                    182 	.globl _cooldown_enemy
                                    183 	.globl _hud_init
                                    184 	.globl _hud_upd_shield
                                    185 	.globl _hud_upd_lives
                                    186 	.globl _hud_draw_pause
                                    187 	.globl _hud_clear_pause
                                    188 	.globl _hud_draw_gun
                                    189 	.globl _init_game
                                    190 	.globl _init_stage
                                    191 	.globl _stage_loop
                                    192 	.globl _scorpboss_loop
                                    193 	.globl _pause_game
                                    194 	.globl _clear_all_projectiles
                                    195 	.globl _anim_stage_start
                                    196 	.globl _anim_stage_end
                                    197 	.globl _anim_blackout_loop
                                    198 	.globl _anim_reverse_blackout_loop
                                    199 	.globl _anim_blackout
                                    200 	.globl _anim_reverse_blackout
                                    201 	.globl _mute_music_pl_chnl
                                    202 	.globl _upd_mute_chnl_cycles
                                    203 	.globl _se_fall_in_hole
                                    204 	.globl _se_fire_bullet
                                    205 	.globl _se_fire_laser
                                    206 	.globl _se_drop_bomb
                                    207 	.globl _se_explode
                                    208 	.globl _se_get_hit
                                    209 	.globl _se_jump
                                    210 	.globl _se_pause
                                    211 	.globl _se_wpn_upgrd
                                    212 	.globl _play_stage
                                    213 	.globl _play_boss
                                    214 	.globl _mute_song
                                    215 	.globl _unmute_song
                                    216 	.globl _play_song
                                    217 	.globl _stop_song
                                    218 ;--------------------------------------------------------
                                    219 ; special function registers
                                    220 ;--------------------------------------------------------
                                    221 ;--------------------------------------------------------
                                    222 ; ram data
                                    223 ;--------------------------------------------------------
                                    224 	.area _DATA
      000000                        225 _stageidx::
      000000                        226 	.ds 1
      000001                        227 _holeflg::
      000001                        228 	.ds 1
      000002                        229 _stageclearflg::
      000002                        230 	.ds 1
      000003                        231 _bossclearflg::
      000003                        232 	.ds 1
      000004                        233 _lvlobjscnt::
      000004                        234 	.ds 1
      000005                        235 _lvlplacptr::
      000005                        236 	.ds 2
      000007                        237 _crntstage::
      000007                        238 	.ds 2
      000009                        239 _stagenum::
      000009                        240 	.ds 1
      00000A                        241 _roadbuildidx::
      00000A                        242 	.ds 1
      00000B                        243 _camtileidx::
      00000B                        244 	.ds 1
      00000C                        245 _nextcamtileidx::
      00000C                        246 	.ds 1
      00000D                        247 _i::
      00000D                        248 	.ds 1
      00000E                        249 _citr::
      00000E                        250 	.ds 1
      00000F                        251 _sitr::
      00000F                        252 	.ds 1
      000010                        253 _roadposx::
      000010                        254 	.ds 1
      000011                        255 _sceneryposx::
      000011                        256 	.ds 1
      000012                        257 _cloudposx::
      000012                        258 	.ds 1
      000013                        259 _plspeed::
      000013                        260 	.ds 1
      000014                        261 _oamidx::
      000014                        262 	.ds 1
      000015                        263 _checktile::
      000015                        264 	.ds 1
      000016                        265 _projectiles::
      000016                        266 	.ds 64
      000056                        267 _crntpjct::
      000056                        268 	.ds 2
      000058                        269 _pjctptr::
      000058                        270 	.ds 2
      00005A                        271 _prjcnt::
      00005A                        272 	.ds 1
      00005B                        273 _abtncnt::
      00005B                        274 	.ds 1
      00005C                        275 _machines::
      00005C                        276 	.ds 102
      0000C2                        277 _pl::
      0000C2                        278 	.ds 2
      0000C4                        279 _crntenemy::
      0000C4                        280 	.ds 2
      0000C6                        281 _machptr::
      0000C6                        282 	.ds 2
      0000C8                        283 _pllives::
      0000C8                        284 	.ds 1
      0000C9                        285 _lockmvmnt::
      0000C9                        286 	.ds 1
      0000CA                        287 _iframecnt::
      0000CA                        288 	.ds 1
      0000CB                        289 _iframeflg::
      0000CB                        290 	.ds 1
      0000CC                        291 _fallinholeflg::
      0000CC                        292 	.ds 1
      0000CD                        293 _ascendflg::
      0000CD                        294 	.ds 1
      0000CE                        295 _jumpstarty::
      0000CE                        296 	.ds 1
      0000CF                        297 _holestartx::
      0000CF                        298 	.ds 1
      0000D0                        299 _holeendx::
      0000D0                        300 	.ds 1
      0000D1                        301 _isapressed::
      0000D1                        302 	.ds 1
      0000D2                        303 _chmutedcyccnt::
      0000D2                        304 	.ds 4
      0000D6                        305 _precfctr::
      0000D6                        306 	.ds 1
      0000D7                        307 _slope::
      0000D7                        308 	.ds 2
      0000D9                        309 _gradient::
      0000D9                        310 	.ds 2
      0000DB                        311 _plgun::
      0000DB                        312 	.ds 1
      0000DC                        313 _numkills::
      0000DC                        314 	.ds 1
      0000DD                        315 _explcord::
      0000DD                        316 	.ds 10
      0000E7                        317 _menuidx::
      0000E7                        318 	.ds 1
                                    319 ;--------------------------------------------------------
                                    320 ; absolute external ram data
                                    321 ;--------------------------------------------------------
                                    322 	.area _DABS (ABS)
                                    323 ;--------------------------------------------------------
                                    324 ; global & static initialisations
                                    325 ;--------------------------------------------------------
                                    326 	.area _HOME
                                    327 	.area _GSINIT
                                    328 	.area _GSFINAL
                                    329 	.area _GSINIT
                                    330 ;main.c:76: const Stage * crntstage = stages;    // Current stage pointer
      000000 21r07r00               331 	ld	hl, #_crntstage
      000003 36r8C                  332 	ld	(hl), #<(_stages)
      000005 23                     333 	inc	hl
      000006 36s00                  334 	ld	(hl), #>(_stages)
                                    335 ;main.c:123: UINT8 chmutedcyccnt[] = {255, 255, 255, 255}; // Used to mute a sound channel for a number of cycles
      000008 21rD2r00               336 	ld	hl, #_chmutedcyccnt
      00000B 36 FF                  337 	ld	(hl), #0xff
      00000D 21rD3r00               338 	ld	hl, #(_chmutedcyccnt + 0x0001)
      000010 36 FF                  339 	ld	(hl), #0xff
      000012 21rD4r00               340 	ld	hl, #(_chmutedcyccnt + 0x0002)
      000015 36 FF                  341 	ld	(hl), #0xff
      000017 21rD5r00               342 	ld	hl, #(_chmutedcyccnt + 0x0003)
      00001A 36 FF                  343 	ld	(hl), #0xff
                                    344 ;--------------------------------------------------------
                                    345 ; Home
                                    346 ;--------------------------------------------------------
                                    347 	.area _HOME
                                    348 ;main.c:266: void custom_delay(UINT8 cycles) NONBANKED {
                                    349 ;	---------------------------------
                                    350 ; Function custom_delay
                                    351 ; ---------------------------------
      000000                        352 _custom_delay::
                                    353 ;main.c:267: for(citr = 0; citr < cycles; citr++) {
      000000 21r0Er00               354 	ld	hl, #_citr
      000003 36 00                  355 	ld	(hl), #0x00
      000005                        356 00103$:
      000005 FAr0Er00               357 	ld	a, (#_citr)
      000008 F8 02                  358 	ldhl	sp,	#2
      00000A 96                     359 	sub	a, (hl)
      00000B D0                     360 	ret	NC
                                    361 ;main.c:268: wait_vbl_done();
      00000C CDr00r00               362 	call	_wait_vbl_done
                                    363 ;main.c:267: for(citr = 0; citr < cycles; citr++) {
      00000F 21r0Er00               364 	ld	hl, #_citr
      000012 34                     365 	inc	(hl)
                                    366 ;main.c:270: }
      000013 18 F0                  367 	jr	00103$
                                    368 ;main.c:307: void clear_all_sprites() NONBANKED {
                                    369 ;	---------------------------------
                                    370 ; Function clear_all_sprites
                                    371 ; ---------------------------------
      000015                        372 _clear_all_sprites::
                                    373 ;main.c:308: for(i = 0; i != 40; i++) {
      000015 21r0Dr00               374 	ld	hl, #_i
      000018 36 00                  375 	ld	(hl), #0x00
      00001A                        376 00104$:
                                    377 ;main.c:309: set_sprite_tile(i, 0);
      00001A 21r0Dr00               378 	ld	hl, #_i
      00001D 4E                     379 	ld	c, (hl)
                                    380 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      00001E 26 00                  381 	ld	h, #0x00
      000020 69                     382 	ld	l, c
      000021 29                     383 	add	hl, hl
      000022 29                     384 	add	hl, hl
      000023 11r00r00               385 	ld	de, #_shadow_OAM
      000026 19                     386 	add	hl, de
      000027 23                     387 	inc	hl
      000028 23                     388 	inc	hl
      000029 36 00                  389 	ld	(hl), #0x00
                                    390 ;main.c:310: move_sprite(i, 0, 0);
      00002B 21r0Dr00               391 	ld	hl, #_i
      00002E 4E                     392 	ld	c, (hl)
                                    393 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      00002F 26 00                  394 	ld	h, #0x00
      000031 69                     395 	ld	l, c
      000032 29                     396 	add	hl, hl
      000033 29                     397 	add	hl, hl
      000034 11r00r00               398 	ld	de, #_shadow_OAM
      000037 19                     399 	add	hl, de
                                    400 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      000038 3E 00                  401 	ld	a, #0x00
      00003A 22                     402 	ld	(hl+), a
      00003B 36 00                  403 	ld	(hl), #0x00
                                    404 ;main.c:308: for(i = 0; i != 40; i++) {
      00003D 21r0Dr00               405 	ld	hl, #_i
      000040 34                     406 	inc	(hl)
      000041 7E                     407 	ld	a, (hl)
      000042 D6 28                  408 	sub	a, #0x28
      000044 20 D4                  409 	jr	NZ, 00104$
                                    410 ;main.c:312: wait_vbl_done();
                                    411 ;main.c:313: }
      000046 C3r00r00               412 	jp  _wait_vbl_done
                                    413 ;main.c:316: void init_stage_bgk() NONBANKED {
                                    414 ;	---------------------------------
                                    415 ; Function init_stage_bgk
                                    416 ; ---------------------------------
      000049                        417 _init_stage_bgk::
                                    418 ;main.c:317: if(crntstage->hasclouds) {
      000049 21r08r00               419 	ld	hl, #_crntstage + 1
      00004C 2B                     420 	dec	hl
      00004D 2A                     421 	ld	a, (hl+)
      00004E 5F                     422 	ld	e, a
      00004F 56                     423 	ld	d, (hl)
      000050 21 0B 00               424 	ld	hl, #0x000b
      000053 19                     425 	add	hl, de
      000054 7E                     426 	ld	a, (hl)
      000055 B7                     427 	or	a, a
      000056 CArD6r00               428 	jp	Z, 00102$
                                    429 ;main.c:318: SWITCH_ROM_MBC1(2);
      000059 3E 02                  430 	ld	a, #0x02
      00005B E0r00                  431 	ldh	(__current_bank+0),a
      00005D 21 00 20               432 	ld	hl, #0x2000
      000060 36 02                  433 	ld	(hl), #0x02
                                    434 ;main.c:319: set_bkg_data(20, 13, cloudtiles);
      000062 21r00r00               435 	ld	hl, #_cloudtiles
      000065 E5                     436 	push	hl
      000066 11 14 0D               437 	ld	de, #0x0d14
      000069 D5                     438 	push	de
      00006A CDr00r00               439 	call	_set_bkg_data
      00006D E8 04                  440 	add	sp, #4
                                    441 ;main.c:320: set_bkg_tiles(0, 0, 32, 1, cloudmap);
      00006F 21r00r00               442 	ld	hl, #_cloudmap
      000072 E5                     443 	push	hl
      000073 11 20 01               444 	ld	de, #0x0120
      000076 D5                     445 	push	de
      000077 AF                     446 	xor	a, a
      000078 F5                     447 	push	af
      000079 33                     448 	inc	sp
      00007A AF                     449 	xor	a, a
      00007B F5                     450 	push	af
      00007C 33                     451 	inc	sp
      00007D CDr00r00               452 	call	_set_bkg_tiles
      000080 E8 06                  453 	add	sp, #6
                                    454 ;main.c:317: if(crntstage->hasclouds) {
      000082 21r07r00               455 	ld	hl, #_crntstage
      000085 2A                     456 	ld	a, (hl+)
      000086 4F                     457 	ld	c, a
      000087 56                     458 	ld	d, (hl)
                                    459 ;main.c:321: SWITCH_ROM_MBC1(crntstage->stagebank);
      000088 79                     460 	ld	a, c
      000089 C6 0C                  461 	add	a, #0x0c
      00008B 5F                     462 	ld	e, a
      00008C 30 01                  463 	jr	NC, 00111$
      00008E 14                     464 	inc	d
      00008F                        465 00111$:
      00008F 1A                     466 	ld	a, (de)
      000090 E0r00                  467 	ldh	(__current_bank+0),a
      000092 1A                     468 	ld	a, (de)
      000093 EA 00 20               469 	ld	(#0x2000),a
                                    470 ;main.c:317: if(crntstage->hasclouds) {
      000096 21r08r00               471 	ld	hl, #_crntstage + 1
      000099 2B                     472 	dec	hl
      00009A 2A                     473 	ld	a, (hl+)
      00009B 4F                     474 	ld	c, a
      00009C 46                     475 	ld	b, (hl)
                                    476 ;main.c:322: set_bkg_data(61, crntstage->bkgtilesnum, crntstage->bkgtiles);
      00009D 21 06 00               477 	ld	hl, #0x0006
      0000A0 09                     478 	add	hl, bc
      0000A1 2A                     479 	ld	a, (hl+)
      0000A2 66                     480 	ld	h, (hl)
      0000A3 6F                     481 	ld	l, a
      0000A4 79                     482 	ld	a, c
      0000A5 C6 08                  483 	add	a, #0x08
      0000A7 4F                     484 	ld	c, a
      0000A8 30 01                  485 	jr	NC, 00112$
      0000AA 04                     486 	inc	b
      0000AB                        487 00112$:
      0000AB 0A                     488 	ld	a, (bc)
      0000AC E5                     489 	push	hl
      0000AD 57                     490 	ld	d,a
      0000AE 1E 3D                  491 	ld	e,#0x3d
      0000B0 D5                     492 	push	de
      0000B1 CDr00r00               493 	call	_set_bkg_data
      0000B4 E8 04                  494 	add	sp, #4
                                    495 ;main.c:323: set_bkg_tiles(0, 1, 32, 9, crntstage->bkgmap);
      0000B6 21r08r00               496 	ld	hl, #_crntstage + 1
      0000B9 2B                     497 	dec	hl
      0000BA 2A                     498 	ld	a, (hl+)
      0000BB 4F                     499 	ld	c, a
      0000BC 46                     500 	ld	b, (hl)
      0000BD 21 09 00               501 	ld	hl, #0x0009
      0000C0 09                     502 	add	hl, bc
      0000C1 2A                     503 	ld	a, (hl+)
      0000C2 4F                     504 	ld	c, a
      0000C3 46                     505 	ld	b, (hl)
      0000C4 C5                     506 	push	bc
      0000C5 11 20 09               507 	ld	de, #0x0920
      0000C8 D5                     508 	push	de
      0000C9 3E 01                  509 	ld	a, #0x01
      0000CB F5                     510 	push	af
      0000CC 33                     511 	inc	sp
      0000CD AF                     512 	xor	a, a
      0000CE F5                     513 	push	af
      0000CF 33                     514 	inc	sp
      0000D0 CDr00r00               515 	call	_set_bkg_tiles
      0000D3 E8 06                  516 	add	sp, #6
      0000D5 C9                     517 	ret
      0000D6                        518 00102$:
                                    519 ;main.c:321: SWITCH_ROM_MBC1(crntstage->stagebank);
      0000D6 21 0C 00               520 	ld	hl, #0x000c
      0000D9 19                     521 	add	hl, de
      0000DA 4D                     522 	ld	c, l
      0000DB 44                     523 	ld	b, h
                                    524 ;main.c:325: SWITCH_ROM_MBC1(crntstage->stagebank);
      0000DC 0A                     525 	ld	a, (bc)
      0000DD E0r00                  526 	ldh	(__current_bank+0),a
      0000DF 0A                     527 	ld	a, (bc)
      0000E0 EA 00 20               528 	ld	(#0x2000),a
                                    529 ;main.c:317: if(crntstage->hasclouds) {
      0000E3 21r08r00               530 	ld	hl, #_crntstage + 1
      0000E6 2B                     531 	dec	hl
      0000E7 2A                     532 	ld	a, (hl+)
      0000E8 4F                     533 	ld	c, a
      0000E9 46                     534 	ld	b, (hl)
                                    535 ;main.c:326: set_bkg_data(20, crntstage->bkgtilesnum, crntstage->bkgtiles);
      0000EA 21 06 00               536 	ld	hl, #0x0006
      0000ED 09                     537 	add	hl, bc
      0000EE 2A                     538 	ld	a, (hl+)
      0000EF 66                     539 	ld	h, (hl)
      0000F0 6F                     540 	ld	l, a
      0000F1 79                     541 	ld	a, c
      0000F2 C6 08                  542 	add	a, #0x08
      0000F4 4F                     543 	ld	c, a
      0000F5 30 01                  544 	jr	NC, 00113$
      0000F7 04                     545 	inc	b
      0000F8                        546 00113$:
      0000F8 0A                     547 	ld	a, (bc)
      0000F9 E5                     548 	push	hl
      0000FA 57                     549 	ld	d,a
      0000FB 1E 14                  550 	ld	e,#0x14
      0000FD D5                     551 	push	de
      0000FE CDr00r00               552 	call	_set_bkg_data
      000101 E8 04                  553 	add	sp, #4
                                    554 ;main.c:327: set_bkg_tiles(0, 0, 32, 10, crntstage->bkgmap);
      000103 21r08r00               555 	ld	hl, #_crntstage + 1
      000106 2B                     556 	dec	hl
      000107 2A                     557 	ld	a, (hl+)
      000108 4F                     558 	ld	c, a
      000109 46                     559 	ld	b, (hl)
      00010A 21 09 00               560 	ld	hl, #0x0009
      00010D 09                     561 	add	hl, bc
      00010E 2A                     562 	ld	a, (hl+)
      00010F 4F                     563 	ld	c, a
      000110 46                     564 	ld	b, (hl)
      000111 C5                     565 	push	bc
      000112 11 20 0A               566 	ld	de, #0x0a20
      000115 D5                     567 	push	de
      000116 AF                     568 	xor	a, a
      000117 F5                     569 	push	af
      000118 33                     570 	inc	sp
      000119 AF                     571 	xor	a, a
      00011A F5                     572 	push	af
      00011B 33                     573 	inc	sp
      00011C CDr00r00               574 	call	_set_bkg_tiles
      00011F E8 06                  575 	add	sp, #6
                                    576 ;main.c:329: }
      000121 C9                     577 	ret
                                    578 ;main.c:528: void scroll_stage_bkg() NONBANKED {
                                    579 ;	---------------------------------
                                    580 ; Function scroll_stage_bkg
                                    581 ; ---------------------------------
      000122                        582 _scroll_stage_bkg::
                                    583 ;main.c:529: switch(LYC_REG) {
      000122 F0r00                  584 	ldh	a, (_LYC_REG+0)
      000124 B7                     585 	or	a, a
      000125 28 09                  586 	jr	Z, 00101$
      000127 FE 08                  587 	cp	a, #0x08
      000129 28 13                  588 	jr	Z, 00102$
      00012B D6 50                  589 	sub	a, #0x50
      00012D 28 1D                  590 	jr	Z, 00103$
      00012F C9                     591 	ret
                                    592 ;main.c:530: case 0x00:
      000130                        593 00101$:
                                    594 ;main.c:531: move_bkg(cloudposx, 0);
      000130 FAr12r00               595 	ld	a, (#_cloudposx)
      000133 E0r00                  596 	ldh	(_SCX_REG+0),a
                                    597 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:826: SCX_REG=x, SCY_REG=y;
      000135 3E 00                  598 	ld	a, #0x00
      000137 E0r00                  599 	ldh	(_SCY_REG+0),a
                                    600 ;main.c:532: LYC_REG = 0x08;
      000139 3E 08                  601 	ld	a, #0x08
      00013B E0r00                  602 	ldh	(_LYC_REG+0),a
                                    603 ;main.c:533: break;
      00013D C9                     604 	ret
                                    605 ;main.c:534: case 0x08:
      00013E                        606 00102$:
                                    607 ;main.c:535: move_bkg(sceneryposx, 0);
      00013E FAr11r00               608 	ld	a, (#_sceneryposx)
      000141 E0r00                  609 	ldh	(_SCX_REG+0),a
                                    610 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:826: SCX_REG=x, SCY_REG=y;
      000143 3E 00                  611 	ld	a, #0x00
      000145 E0r00                  612 	ldh	(_SCY_REG+0),a
                                    613 ;main.c:536: LYC_REG = 0x50;
      000147 3E 50                  614 	ld	a, #0x50
      000149 E0r00                  615 	ldh	(_LYC_REG+0),a
                                    616 ;main.c:537: break;
      00014B C9                     617 	ret
                                    618 ;main.c:538: case 0x50:
      00014C                        619 00103$:
                                    620 ;main.c:539: move_bkg(roadposx, 0);
      00014C FAr10r00               621 	ld	a, (#_roadposx)
      00014F E0r00                  622 	ldh	(_SCX_REG+0),a
                                    623 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:826: SCX_REG=x, SCY_REG=y;
      000151 3E 00                  624 	ld	a, #0x00
      000153 E0r00                  625 	ldh	(_SCY_REG+0),a
                                    626 ;main.c:540: LYC_REG = 0x00;
      000155 3E 00                  627 	ld	a, #0x00
      000157 E0r00                  628 	ldh	(_LYC_REG+0),a
                                    629 ;main.c:542: }
                                    630 ;main.c:543: }
      000159 C9                     631 	ret
                                    632 ;main.c:1176: void init_game() NONBANKED {
                                    633 ;	---------------------------------
                                    634 ; Function init_game
                                    635 ; ---------------------------------
      00015A                        636 _init_game::
                                    637 ;main.c:1177: plspeed = plgroundspeed;
      00015A FArB5r00               638 	ld	a, (#_plgroundspeed)
      00015D EAr13r00               639 	ld	(#_plspeed),a
                                    640 ;main.c:1178: pllives = 3;
      000160 21rC8r00               641 	ld	hl, #_pllives
      000163 36 03                  642 	ld	(hl), #0x03
                                    643 ;main.c:1179: plgun = 0;
      000165 21rDBr00               644 	ld	hl, #_plgun
      000168 36 00                  645 	ld	(hl), #0x00
                                    646 ;main.c:1180: iframecnt = 0;
      00016A 21rCAr00               647 	ld	hl, #_iframecnt
      00016D 36 00                  648 	ld	(hl), #0x00
                                    649 ;main.c:1181: }
      00016F C9                     650 	ret
                                    651 ;main.c:1184: void init_stage(UBYTE hasscenery, UBYTE hasscroll) NONBANKED {
                                    652 ;	---------------------------------
                                    653 ; Function init_stage
                                    654 ; ---------------------------------
      000170                        655 _init_stage::
      000170 E8 FC                  656 	add	sp, #-4
                                    657 ;main.c:1185: roadposx = sceneryposx = cloudposx = iframeflg = 0;
      000172 21rCBr00               658 	ld	hl, #_iframeflg
      000175 36 00                  659 	ld	(hl), #0x00
      000177 21r12r00               660 	ld	hl, #_cloudposx
      00017A 36 00                  661 	ld	(hl), #0x00
      00017C 21r11r00               662 	ld	hl, #_sceneryposx
      00017F 36 00                  663 	ld	(hl), #0x00
      000181 21r10r00               664 	ld	hl, #_roadposx
      000184 36 00                  665 	ld	(hl), #0x00
                                    666 ;main.c:1186: oamidx = 0;
      000186 21r14r00               667 	ld	hl, #_oamidx
      000189 36 00                  668 	ld	(hl), #0x00
                                    669 ;main.c:1187: prjcnt = abtncnt = 0;
      00018B 21r5Br00               670 	ld	hl, #_abtncnt
      00018E 36 00                  671 	ld	(hl), #0x00
      000190 21r5Ar00               672 	ld	hl, #_prjcnt
      000193 36 00                  673 	ld	(hl), #0x00
                                    674 ;main.c:1188: crntpjct = projectiles;
      000195 21r56r00               675 	ld	hl, #_crntpjct
      000198 36r16                  676 	ld	(hl), #<(_projectiles)
      00019A 23                     677 	inc	hl
      00019B 36s00                  678 	ld	(hl), #>(_projectiles)
                                    679 ;main.c:1189: crntenemy = machines + 1;
      00019D 21rC4r00               680 	ld	hl, #_crntenemy
      0001A0 36r6D                  681 	ld	(hl), #<((_machines + 0x0011))
      0001A2 23                     682 	inc	hl
      0001A3 36s00                  683 	ld	(hl), #>((_machines + 0x0011))
                                    684 ;main.c:1190: ascendflg = 1;
      0001A5 21rCDr00               685 	ld	hl, #_ascendflg
      0001A8 36 01                  686 	ld	(hl), #0x01
                                    687 ;main.c:1191: lockmvmnt = 0; // Allowing free movement
      0001AA 21rC9r00               688 	ld	hl, #_lockmvmnt
      0001AD 36 00                  689 	ld	(hl), #0x00
                                    690 ;main.c:1192: holestartx = 255;
      0001AF 21rCFr00               691 	ld	hl, #_holestartx
      0001B2 36 FF                  692 	ld	(hl), #0xff
                                    693 ;main.c:1193: holeendx = 0;
      0001B4 21rD0r00               694 	ld	hl, #_holeendx
      0001B7 36 00                  695 	ld	(hl), #0x00
                                    696 ;main.c:1194: isapressed = 0;
      0001B9 21rD1r00               697 	ld	hl, #_isapressed
      0001BC 36 00                  698 	ld	(hl), #0x00
                                    699 ;main.c:1195: numkills = 0;
      0001BE 21rDCr00               700 	ld	hl, #_numkills
      0001C1 36 00                  701 	ld	(hl), #0x00
                                    702 ;main.c:1197: stageidx = holeflg = fallinholeflg = 0;
      0001C3 21rCCr00               703 	ld	hl, #_fallinholeflg
      0001C6 36 00                  704 	ld	(hl), #0x00
      0001C8 21r01r00               705 	ld	hl, #_holeflg
      0001CB 36 00                  706 	ld	(hl), #0x00
      0001CD 21r00r00               707 	ld	hl, #_stageidx
      0001D0 36 00                  708 	ld	(hl), #0x00
                                    709 ;main.c:1198: lvlplacptr = crntstage->enlayout;
      0001D2 21r08r00               710 	ld	hl, #_crntstage + 1
      0001D5 2B                     711 	dec	hl
      0001D6 2A                     712 	ld	a, (hl+)
      0001D7 4F                     713 	ld	c, a
      0001D8 46                     714 	ld	b, (hl)
      0001D9 03                     715 	inc	bc
      0001DA 03                     716 	inc	bc
      0001DB 03                     717 	inc	bc
      0001DC 68                     718 	ld	l, b
      0001DD 59                     719 	ld	e, c
      0001DE 55                     720 	ld	d, l
      0001DF 1A                     721 	ld	a, (de)
      0001E0 21r05r00               722 	ld	hl, #_lvlplacptr
      0001E3 22                     723 	ld	(hl+), a
      0001E4 13                     724 	inc	de
      0001E5 1A                     725 	ld	a, (de)
      0001E6 77                     726 	ld	(hl), a
                                    727 ;main.c:1200: roadbuildidx = 0; // Resetting the road index
      0001E7 21r0Ar00               728 	ld	hl, #_roadbuildidx
      0001EA 36 00                  729 	ld	(hl), #0x00
                                    730 ;main.c:1201: if(hasscenery) {
      0001EC F8 06                  731 	ldhl	sp,	#6
      0001EE 7E                     732 	ld	a, (hl)
      0001EF B7                     733 	or	a, a
      0001F0 28 05                  734 	jr	Z, 00102$
                                    735 ;main.c:1202: init_stage_bgk();
      0001F2 CDr49r00               736 	call	_init_stage_bgk
      0001F5 18 14                  737 	jr	00103$
      0001F7                        738 00102$:
                                    739 ;main.c:1204: fill_bkg_rect(0, 0, 32, 10, 0x00);
      0001F7 AF                     740 	xor	a, a
      0001F8 57                     741 	ld	d,a
      0001F9 1E 0A                  742 	ld	e,#0x0a
      0001FB D5                     743 	push	de
      0001FC 3E 20                  744 	ld	a, #0x20
      0001FE F5                     745 	push	af
      0001FF 33                     746 	inc	sp
      000200 AF                     747 	xor	a, a
      000201 F5                     748 	push	af
      000202 33                     749 	inc	sp
      000203 AF                     750 	xor	a, a
      000204 F5                     751 	push	af
      000205 33                     752 	inc	sp
      000206 CDr00r00               753 	call	_fill_bkg_rect
      000209 E8 05                  754 	add	sp, #5
      00020B                        755 00103$:
                                    756 ;main.c:1206: init_stage_road();
      00020B 1Er00                  757 	ld	e, #b_init_stage_road
      00020D 21r00r00               758 	ld	hl, #_init_stage_road
      000210 CDr00r00               759 	call	___sdcc_bcall_ehl
                                    760 ;main.c:1208: if(hasscroll) {
      000213 F8 07                  761 	ldhl	sp,	#7
      000215 7E                     762 	ld	a, (hl)
      000216 B7                     763 	or	a, a
      000217 28 28                  764 	jr	Z, 00105$
                                    765 ;main.c:1209: STAT_REG = 0x45;
      000219 3E 45                  766 	ld	a, #0x45
      00021B E0r00                  767 	ldh	(_STAT_REG+0),a
                                    768 ;main.c:1210: LYC_REG = 0x00;
      00021D 3E 00                  769 	ld	a, #0x00
      00021F E0r00                  770 	ldh	(_LYC_REG+0),a
                                    771 ;main.c:1211: remove_LCD(scroll_stage_bkg);
      000221 21r22r01               772 	ld	hl, #_scroll_stage_bkg
      000224 E5                     773 	push	hl
      000225 CDr00r00               774 	call	_remove_LCD
      000228 E8 02                  775 	add	sp, #2
                                    776 ;main.c:1212: disable_interrupts();
      00022A CDr00r00               777 	call	_disable_interrupts
                                    778 ;main.c:1213: add_LCD(scroll_stage_bkg);
      00022D 21r22r01               779 	ld	hl, #_scroll_stage_bkg
      000230 E5                     780 	push	hl
      000231 CDr00r00               781 	call	_add_LCD
      000234 E8 02                  782 	add	sp, #2
                                    783 ;main.c:1214: enable_interrupts();
      000236 CDr00r00               784 	call	_enable_interrupts
                                    785 ;main.c:1215: set_interrupts(VBL_IFLAG | LCD_IFLAG);
      000239 3E 03                  786 	ld	a, #0x03
      00023B F5                     787 	push	af
      00023C 33                     788 	inc	sp
      00023D CDr00r00               789 	call	_set_interrupts
      000240 33                     790 	inc	sp
      000241                        791 00105$:
                                    792 ;main.c:1218: SWITCH_ROM_MBC1(2);
      000241 3E 02                  793 	ld	a, #0x02
      000243 E0r00                  794 	ldh	(__current_bank+0),a
      000245 21 00 20               795 	ld	hl, #0x2000
      000248 36 02                  796 	ld	(hl), #0x02
                                    797 ;main.c:1219: set_sprite_data(0, 1, blanktile);
      00024A 21rB8r00               798 	ld	hl, #_blanktile
      00024D E5                     799 	push	hl
      00024E 3E 01                  800 	ld	a, #0x01
      000250 F5                     801 	push	af
      000251 33                     802 	inc	sp
      000252 AF                     803 	xor	a, a
      000253 F5                     804 	push	af
      000254 33                     805 	inc	sp
      000255 CDr00r00               806 	call	_set_sprite_data
      000258 E8 04                  807 	add	sp, #4
                                    808 ;main.c:1220: set_sprite_data(1, 16, playerspritetiles);
      00025A 21r00r00               809 	ld	hl, #_playerspritetiles
      00025D E5                     810 	push	hl
      00025E 11 01 10               811 	ld	de, #0x1001
      000261 D5                     812 	push	de
      000262 CDr00r00               813 	call	_set_sprite_data
      000265 E8 04                  814 	add	sp, #4
                                    815 ;main.c:1221: set_sprite_data(17, 4, projectiletiles);
      000267 21r00r00               816 	ld	hl, #_projectiletiles
      00026A E5                     817 	push	hl
      00026B 11 11 04               818 	ld	de, #0x0411
      00026E D5                     819 	push	de
      00026F CDr00r00               820 	call	_set_sprite_data
      000272 E8 04                  821 	add	sp, #4
                                    822 ;main.c:1222: set_sprite_data(21, 24, enemyspritetiles);
      000274 21r00r00               823 	ld	hl, #_enemyspritetiles
      000277 E5                     824 	push	hl
      000278 11 15 18               825 	ld	de, #0x1815
      00027B D5                     826 	push	de
      00027C CDr00r00               827 	call	_set_sprite_data
      00027F E8 04                  828 	add	sp, #4
                                    829 ;main.c:1223: set_sprite_data(45, 1, misctiles);
      000281 21r00r00               830 	ld	hl, #_misctiles
      000284 E5                     831 	push	hl
      000285 11 2D 01               832 	ld	de, #0x012d
      000288 D5                     833 	push	de
      000289 CDr00r00               834 	call	_set_sprite_data
      00028C E8 04                  835 	add	sp, #4
                                    836 ;main.c:1224: SWITCH_ROM_MBC1(1);
      00028E 3E 01                  837 	ld	a, #0x01
      000290 E0r00                  838 	ldh	(__current_bank+0),a
      000292 21 00 20               839 	ld	hl, #0x2000
      000295 36 01                  840 	ld	(hl), #0x01
                                    841 ;main.c:1225: init_player();
      000297 CDr6Br03               842 	call	_init_player
                                    843 ;main.c:1227: for(pjctptr = projectiles; pjctptr <= projectiles + pjctllimit; pjctptr++) { // Initialization of projectiles
      00029A 21r58r00               844 	ld	hl, #_pjctptr
      00029D 3Er16                  845 	ld	a, #<(_projectiles)
      00029F 22                     846 	ld	(hl+), a
      0002A0 36s00                  847 	ld	(hl), #>(_projectiles)
      0002A2                        848 00111$:
      0002A2 21rC9r00               849 	ld	hl, #_pjctllimit
      0002A5 6E                     850 	ld	l, (hl)
      0002A6 26 00                  851 	ld	h, #0x00
      0002A8 29                     852 	add	hl, hl
      0002A9 29                     853 	add	hl, hl
      0002AA 29                     854 	add	hl, hl
      0002AB 11r16r00               855 	ld	de, #_projectiles
      0002AE 19                     856 	add	hl, de
      0002AF 4D                     857 	ld	c, l
      0002B0 44                     858 	ld	b, h
      0002B1 21r58r00               859 	ld	hl, #_pjctptr
      0002B4 79                     860 	ld	a, c
      0002B5 96                     861 	sub	a, (hl)
      0002B6 23                     862 	inc	hl
      0002B7 78                     863 	ld	a, b
      0002B8 9E                     864 	sbc	a, (hl)
      0002B9 38 1B                  865 	jr	C, 00106$
                                    866 ;main.c:1228: pjctptr->oam = NULL;
      0002BB 21r59r00               867 	ld	hl, #_pjctptr + 1
      0002BE 2B                     868 	dec	hl
      0002BF 2A                     869 	ld	a, (hl+)
      0002C0 4F                     870 	ld	c, a
      0002C1 46                     871 	ld	b, (hl)
      0002C2 21 06 00               872 	ld	hl, #0x0006
      0002C5 09                     873 	add	hl, bc
      0002C6 AF                     874 	xor	a, a
      0002C7 22                     875 	ld	(hl+), a
      0002C8 77                     876 	ld	(hl), a
                                    877 ;main.c:1227: for(pjctptr = projectiles; pjctptr <= projectiles + pjctllimit; pjctptr++) { // Initialization of projectiles
      0002C9 21r58r00               878 	ld	hl, #_pjctptr
      0002CC 7E                     879 	ld	a, (hl)
      0002CD C6 08                  880 	add	a, #0x08
      0002CF 22                     881 	ld	(hl+), a
      0002D0 7E                     882 	ld	a, (hl)
      0002D1 CE 00                  883 	adc	a, #0x00
      0002D3 77                     884 	ld	(hl), a
      0002D4 18 CC                  885 	jr	00111$
      0002D6                        886 00106$:
                                    887 ;main.c:1232: for(machptr = machines + 1; machptr <= machines + enlimit; machptr++) {
      0002D6 21rC6r00               888 	ld	hl, #_machptr
      0002D9 36r6D                  889 	ld	(hl), #<((_machines + 0x0011))
      0002DB 23                     890 	inc	hl
      0002DC 36s00                  891 	ld	(hl), #>((_machines + 0x0011))
      0002DE                        892 00114$:
      0002DE 21rCFr00               893 	ld	hl, #_enlimit
      0002E1 4E                     894 	ld	c, (hl)
      0002E2 06 00                  895 	ld	b, #0x00
      0002E4 69                     896 	ld	l, c
      0002E5 60                     897 	ld	h, b
      0002E6 29                     898 	add	hl, hl
      0002E7 29                     899 	add	hl, hl
      0002E8 29                     900 	add	hl, hl
      0002E9 29                     901 	add	hl, hl
      0002EA 09                     902 	add	hl, bc
      0002EB 11r5Cr00               903 	ld	de, #_machines
      0002EE 19                     904 	add	hl, de
      0002EF 4D                     905 	ld	c, l
      0002F0 44                     906 	ld	b, h
      0002F1 21rC6r00               907 	ld	hl, #_machptr
      0002F4 79                     908 	ld	a, c
      0002F5 96                     909 	sub	a, (hl)
      0002F6 23                     910 	inc	hl
      0002F7 78                     911 	ld	a, b
      0002F8 9E                     912 	sbc	a, (hl)
      0002F9 38 78                  913 	jr	C, 00107$
                                    914 ;main.c:1233: machptr->shield = machptr->explcount = machptr->cyccount = machptr->type = 0;
      0002FB 21rC7r00               915 	ld	hl, #_machptr + 1
      0002FE 2B                     916 	dec	hl
      0002FF 2A                     917 	ld	a, (hl+)
      000300 4F                     918 	ld	c, a
      000301 46                     919 	ld	b, (hl)
      000302 21 0B 00               920 	ld	hl, #0x000b
      000305 09                     921 	add	hl, bc
      000306 33                     922 	inc	sp
      000307 33                     923 	inc	sp
      000308 E5                     924 	push	hl
      000309 21 07 00               925 	ld	hl, #0x0007
      00030C 09                     926 	add	hl, bc
      00030D E5                     927 	push	hl
      00030E 7D                     928 	ld	a, l
      00030F F8 04                  929 	ldhl	sp,	#4
      000311 77                     930 	ld	(hl), a
      000312 E1                     931 	pop	hl
      000313 7C                     932 	ld	a, h
      000314 F8 03                  933 	ldhl	sp,	#3
      000316 77                     934 	ld	(hl), a
      000317 21 08 00               935 	ld	hl, #0x0008
      00031A 09                     936 	add	hl, bc
      00031B 5D                     937 	ld	e, l
      00031C 54                     938 	ld	d, h
      00031D 21 0C 00               939 	ld	hl, #0x000c
      000320 09                     940 	add	hl, bc
      000321 36 00                  941 	ld	(hl), #0x00
      000323 AF                     942 	xor	a, a
      000324 12                     943 	ld	(de), a
      000325 C1                     944 	pop	bc
      000326 E1                     945 	pop	hl
      000327 E5                     946 	push	hl
      000328 C5                     947 	push	bc
      000329 36 00                  948 	ld	(hl), #0x00
      00032B E1                     949 	pop	hl
      00032C E5                     950 	push	hl
      00032D 36 00                  951 	ld	(hl), #0x00
      00032F 21rC7r00               952 	ld	hl, #_machptr + 1
      000332 2B                     953 	dec	hl
      000333 2A                     954 	ld	a, (hl+)
      000334 5F                     955 	ld	e, a
      000335 56                     956 	ld	d, (hl)
                                    957 ;main.c:1234: machptr->x = machptr->y = machptr->width = machptr->height = 0;
      000336 4B                     958 	ld	c, e
      000337 42                     959 	ld	b, d
      000338 03                     960 	inc	bc
      000339 D5                     961 	push	de
                                    962 ;c
      00033A 21 02 00               963 	ld	hl, #0x0002
      00033D 19                     964 	add	hl, de
      00033E D1                     965 	pop	de
      00033F 33                     966 	inc	sp
      000340 33                     967 	inc	sp
      000341 E5                     968 	push	hl
      000342 D5                     969 	push	de
                                    970 ;c
      000343 21 05 00               971 	ld	hl, #0x0005
      000346 19                     972 	add	hl, de
      000347 D1                     973 	pop	de
      000348 E5                     974 	push	hl
      000349 7D                     975 	ld	a, l
      00034A F8 04                  976 	ldhl	sp,	#4
      00034C 77                     977 	ld	(hl), a
      00034D E1                     978 	pop	hl
      00034E 7C                     979 	ld	a, h
      00034F F8 03                  980 	ldhl	sp,	#3
      000351 77                     981 	ld	(hl), a
      000352 21 06 00               982 	ld	hl, #0x0006
      000355 19                     983 	add	hl, de
      000356 36 00                  984 	ld	(hl), #0x00
      000358 F8 02                  985 	ldhl	sp,	#2
      00035A 2A                     986 	ld	a, (hl+)
      00035B 66                     987 	ld	h, (hl)
      00035C 6F                     988 	ld	l, a
      00035D 36 00                  989 	ld	(hl), #0x00
      00035F E1                     990 	pop	hl
      000360 E5                     991 	push	hl
      000361 36 00                  992 	ld	(hl), #0x00
      000363 AF                     993 	xor	a, a
      000364 02                     994 	ld	(bc), a
                                    995 ;main.c:1232: for(machptr = machines + 1; machptr <= machines + enlimit; machptr++) {
      000365 21rC6r00               996 	ld	hl, #_machptr
      000368 7E                     997 	ld	a, (hl)
      000369 C6 11                  998 	add	a, #0x11
      00036B 22                     999 	ld	(hl+), a
      00036C 7E                    1000 	ld	a, (hl)
      00036D CE 00                 1001 	adc	a, #0x00
      00036F 77                    1002 	ld	(hl), a
      000370 C3rDEr02              1003 	jp	00114$
      000373                       1004 00107$:
                                   1005 ;main.c:1237: hud_init();
      000373 CDrDBr22              1006 	call	_hud_init
                                   1007 ;main.c:1147: set_win_tile_xy(17, 0, pllives + 1);  // Tile offset 1
      000376 FArC8r00              1008 	ld	a, (#_pllives)
      000379 3C                    1009 	inc	a
      00037A F5                    1010 	push	af
      00037B 33                    1011 	inc	sp
      00037C AF                    1012 	xor	a, a
      00037D 57                    1013 	ld	d,a
      00037E 1E 11                 1014 	ld	e,#0x11
      000380 D5                    1015 	push	de
      000381 CDr00r00              1016 	call	_set_win_tile_xy
      000384 E8 03                 1017 	add	sp, #3
                                   1018 ;main.c:1170: set_win_tile_xy(10, 0, 17 + plgun); // Tile offset 17
      000386 FArDBr00              1019 	ld	a, (#_plgun)
      000389 C6 11                 1020 	add	a, #0x11
      00038B F5                    1021 	push	af
      00038C 33                    1022 	inc	sp
      00038D AF                    1023 	xor	a, a
      00038E 57                    1024 	ld	d,a
      00038F 1E 0A                 1025 	ld	e,#0x0a
      000391 D5                    1026 	push	de
      000392 CDr00r00              1027 	call	_set_win_tile_xy
      000395 E8 03                 1028 	add	sp, #3
                                   1029 ;main.c:1239: hud_draw_gun();
                                   1030 ;main.c:1240: }
      000397 E8 04                 1031 	add	sp, #4
      000399 C9                    1032 	ret
                                   1033 ;main.c:1404: void anim_blackout_loop(UINT8 indictr) NONBANKED {   // To be used in loops
                                   1034 ;	---------------------------------
                                   1035 ; Function anim_blackout_loop
                                   1036 ; ---------------------------------
      00039A                       1037 _anim_blackout_loop::
                                   1038 ;main.c:1405: switch(indictr) {
      00039A F8 02                 1039 	ldhl	sp,	#2
      00039C 7E                    1040 	ld	a, (hl)
      00039D 3D                    1041 	dec	a
      00039E 28 0F                 1042 	jr	Z, 00101$
      0003A0 F8 02                 1043 	ldhl	sp,	#2
      0003A2 7E                    1044 	ld	a, (hl)
      0003A3 D6 0A                 1045 	sub	a, #0x0a
      0003A5 28 0D                 1046 	jr	Z, 00102$
      0003A7 F8 02                 1047 	ldhl	sp,	#2
      0003A9 7E                    1048 	ld	a, (hl)
      0003AA D6 14                 1049 	sub	a, #0x14
      0003AC 28 0B                 1050 	jr	Z, 00103$
      0003AE C9                    1051 	ret
                                   1052 ;main.c:1406: case 1:
      0003AF                       1053 00101$:
                                   1054 ;main.c:1407: BGP_REG = 0xF9;
      0003AF 3E F9                 1055 	ld	a, #0xf9
      0003B1 E0r00                 1056 	ldh	(_BGP_REG+0),a
                                   1057 ;main.c:1408: break;
      0003B3 C9                    1058 	ret
                                   1059 ;main.c:1409: case 10:
      0003B4                       1060 00102$:
                                   1061 ;main.c:1410: BGP_REG = 0xFE;
      0003B4 3E FE                 1062 	ld	a, #0xfe
      0003B6 E0r00                 1063 	ldh	(_BGP_REG+0),a
                                   1064 ;main.c:1411: break;
      0003B8 C9                    1065 	ret
                                   1066 ;main.c:1412: case 20:
      0003B9                       1067 00103$:
                                   1068 ;main.c:1413: BGP_REG = 0xFF;
      0003B9 3E FF                 1069 	ld	a, #0xff
      0003BB E0r00                 1070 	ldh	(_BGP_REG+0),a
                                   1071 ;main.c:1415: }
                                   1072 ;main.c:1416: }
      0003BD C9                    1073 	ret
                                   1074 ;main.c:1419: void anim_reverse_blackout_loop(UINT8 indictr) NONBANKED {   // To be used in loops
                                   1075 ;	---------------------------------
                                   1076 ; Function anim_reverse_blackout_loop
                                   1077 ; ---------------------------------
      0003BE                       1078 _anim_reverse_blackout_loop::
                                   1079 ;main.c:1420: switch(indictr) {
      0003BE F8 02                 1080 	ldhl	sp,	#2
      0003C0 7E                    1081 	ld	a, (hl)
      0003C1 3D                    1082 	dec	a
      0003C2 28 0F                 1083 	jr	Z, 00101$
      0003C4 F8 02                 1084 	ldhl	sp,	#2
      0003C6 7E                    1085 	ld	a, (hl)
      0003C7 D6 0A                 1086 	sub	a, #0x0a
      0003C9 28 0D                 1087 	jr	Z, 00102$
      0003CB F8 02                 1088 	ldhl	sp,	#2
      0003CD 7E                    1089 	ld	a, (hl)
      0003CE D6 14                 1090 	sub	a, #0x14
      0003D0 28 0B                 1091 	jr	Z, 00103$
      0003D2 C9                    1092 	ret
                                   1093 ;main.c:1421: case 1:
      0003D3                       1094 00101$:
                                   1095 ;main.c:1422: BGP_REG = 0xFE;
      0003D3 3E FE                 1096 	ld	a, #0xfe
      0003D5 E0r00                 1097 	ldh	(_BGP_REG+0),a
                                   1098 ;main.c:1423: break;
      0003D7 C9                    1099 	ret
                                   1100 ;main.c:1424: case 10:
      0003D8                       1101 00102$:
                                   1102 ;main.c:1425: BGP_REG = 0xF9;
      0003D8 3E F9                 1103 	ld	a, #0xf9
      0003DA E0r00                 1104 	ldh	(_BGP_REG+0),a
                                   1105 ;main.c:1426: break;
      0003DC C9                    1106 	ret
                                   1107 ;main.c:1427: case 20:
      0003DD                       1108 00103$:
                                   1109 ;main.c:1428: BGP_REG = 0xE4;
      0003DD 3E E4                 1110 	ld	a, #0xe4
      0003DF E0r00                 1111 	ldh	(_BGP_REG+0),a
                                   1112 ;main.c:1430: }
                                   1113 ;main.c:1431: }
      0003E1 C9                    1114 	ret
                                   1115 ;main.c:1434: void anim_blackout() NONBANKED {  // Used as a standalone call
                                   1116 ;	---------------------------------
                                   1117 ; Function anim_blackout
                                   1118 ; ---------------------------------
      0003E2                       1119 _anim_blackout::
                                   1120 ;main.c:1435: for(UINT8 blkstep = 0; blkstep != 21; blkstep++) {
      0003E2 06 00                 1121 	ld	b, #0x00
      0003E4                       1122 00103$:
      0003E4 78                    1123 	ld	a, b
      0003E5 D6 15                 1124 	sub	a, #0x15
      0003E7 C8                    1125 	ret	Z
                                   1126 ;main.c:1436: anim_blackout_loop(blkstep);
      0003E8 C5                    1127 	push	bc
      0003E9 C5                    1128 	push	bc
      0003EA 33                    1129 	inc	sp
      0003EB CDr9Ar03              1130 	call	_anim_blackout_loop
      0003EE 33                    1131 	inc	sp
      0003EF C1                    1132 	pop	bc
                                   1133 ;main.c:1437: wait_vbl_done();
      0003F0 CDr00r00              1134 	call	_wait_vbl_done
                                   1135 ;main.c:1435: for(UINT8 blkstep = 0; blkstep != 21; blkstep++) {
      0003F3 04                    1136 	inc	b
                                   1137 ;main.c:1439: }
      0003F4 18 EE                 1138 	jr	00103$
                                   1139 ;main.c:1442: void anim_reverse_blackout() NONBANKED {  // Used as a standalone call
                                   1140 ;	---------------------------------
                                   1141 ; Function anim_reverse_blackout
                                   1142 ; ---------------------------------
      0003F6                       1143 _anim_reverse_blackout::
                                   1144 ;main.c:1443: for(UINT8 blkstep = 0; blkstep != 21; blkstep++) {
      0003F6 06 00                 1145 	ld	b, #0x00
      0003F8                       1146 00103$:
      0003F8 78                    1147 	ld	a, b
      0003F9 D6 15                 1148 	sub	a, #0x15
      0003FB C8                    1149 	ret	Z
                                   1150 ;main.c:1444: anim_reverse_blackout_loop(blkstep);
      0003FC C5                    1151 	push	bc
      0003FD C5                    1152 	push	bc
      0003FE 33                    1153 	inc	sp
      0003FF CDrBEr03              1154 	call	_anim_reverse_blackout_loop
      000402 33                    1155 	inc	sp
      000403 C1                    1156 	pop	bc
                                   1157 ;main.c:1445: wait_vbl_done();
      000404 CDr00r00              1158 	call	_wait_vbl_done
                                   1159 ;main.c:1443: for(UINT8 blkstep = 0; blkstep != 21; blkstep++) {
      000407 04                    1160 	inc	b
                                   1161 ;main.c:1447: }
      000408 18 EE                 1162 	jr	00103$
                                   1163 ;main.c:1453: void mute_music_pl_chnl(UINT8 chnum) NONBANKED {     // Mutes a music player channel during effects
                                   1164 ;	---------------------------------
                                   1165 ; Function mute_music_pl_chnl
                                   1166 ; ---------------------------------
      00040A                       1167 _mute_music_pl_chnl::
                                   1168 ;main.c:1454: hUGE_mute_channel(chnum, HT_CH_MUTE);
      00040A 3E 01                 1169 	ld	a, #0x01
      00040C F5                    1170 	push	af
      00040D 33                    1171 	inc	sp
      00040E F8 03                 1172 	ldhl	sp,	#3
      000410 7E                    1173 	ld	a, (hl)
      000411 F5                    1174 	push	af
      000412 33                    1175 	inc	sp
      000413 CDr00r00              1176 	call	_hUGE_mute_channel
      000416 E8 02                 1177 	add	sp, #2
                                   1178 ;main.c:1455: chmutedcyccnt[chnum] = mutecycnum;  // Initiates countdown for mute period
      000418 01rD2r00              1179 	ld	bc, #_chmutedcyccnt+0
      00041B F8 02                 1180 	ldhl	sp,	#2
      00041D 6E                    1181 	ld	l, (hl)
      00041E 26 00                 1182 	ld	h, #0x00
      000420 09                    1183 	add	hl, bc
      000421 4D                    1184 	ld	c, l
      000422 44                    1185 	ld	b, h
      000423 FArD4r00              1186 	ld	a, (#_mutecycnum)
      000426 02                    1187 	ld	(bc), a
                                   1188 ;main.c:1456: }
      000427 C9                    1189 	ret
                                   1190 ;main.c:1559: void play_stage() NONBANKED {
                                   1191 ;	---------------------------------
                                   1192 ; Function play_stage
                                   1193 ; ---------------------------------
      000428                       1194 _play_stage::
                                   1195 ;main.c:1560: init_stage(1, 1);
      000428 11 01 01              1196 	ld	de, #0x0101
      00042B D5                    1197 	push	de
      00042C CDr70r01              1198 	call	_init_stage
      00042F E8 02                 1199 	add	sp, #2
                                   1200 ;main.c:1561: anim_stage_start();
      000431 CDr1Ar28              1201 	call	_anim_stage_start
                                   1202 ;main.c:1562: play_song(crntstage->theme);
      000434 21r08r00              1203 	ld	hl, #_crntstage + 1
      000437 2B                    1204 	dec	hl
      000438 2A                    1205 	ld	a, (hl+)
      000439 4F                    1206 	ld	c, a
      00043A 46                    1207 	ld	b, (hl)
      00043B 21 0D 00              1208 	ld	hl, #0x000d
      00043E 09                    1209 	add	hl, bc
      00043F 2A                    1210 	ld	a, (hl+)
      000440 4F                    1211 	ld	c, a
      000441 46                    1212 	ld	b, (hl)
      000442 C5                    1213 	push	bc
      000443 CDrE2r04              1214 	call	_play_song
      000446 E8 02                 1215 	add	sp, #2
                                   1216 ;main.c:1563: stage_loop();
      000448 CDr1Ar24              1217 	call	_stage_loop
                                   1218 ;main.c:1564: if(stageclearflg == 1) {
      00044B FAr02r00              1219 	ld	a, (#_stageclearflg)
      00044E 3D                    1220 	dec	a
      00044F 20 03                 1221 	jr	NZ, 00102$
                                   1222 ;main.c:1565: anim_stage_end();
      000451 CDr3Fr28              1223 	call	_anim_stage_end
      000454                       1224 00102$:
                                   1225 ;main.c:1567: stop_song();    // Stop current stage music
      000454 CDrF8r04              1226 	call	_stop_song
                                   1227 ;main.c:1568: anim_blackout();
      000457 CDrE2r03              1228 	call	_anim_blackout
                                   1229 ;main.c:1569: HIDE_WIN;
      00045A F0r00                 1230 	ldh	a, (_LCDC_REG+0)
      00045C E6 DF                 1231 	and	a, #0xdf
      00045E E0r00                 1232 	ldh	(_LCDC_REG+0),a
                                   1233 ;main.c:1570: clear_all_sprites();
      000460 CDr15r00              1234 	call	_clear_all_sprites
                                   1235 ;main.c:1574: }
      000463 F3                    1236 	di
                                   1237 ;main.c:1572: cloudposx = sceneryposx = roadposx = 0;
      000464 21r10r00              1238 	ld	hl, #_roadposx
      000467 36 00                 1239 	ld	(hl), #0x00
      000469 21r11r00              1240 	ld	hl, #_sceneryposx
      00046C 36 00                 1241 	ld	(hl), #0x00
      00046E 21r12r00              1242 	ld	hl, #_cloudposx
      000471 36 00                 1243 	ld	(hl), #0x00
                                   1244 ;main.c:1573: scroll_stage_bkg();
      000473 CDr22r01              1245 	call	_scroll_stage_bkg
      000476 FB                    1246 	ei
                                   1247 ;main.c:1575: }
      000477 C9                    1248 	ret
                                   1249 ;main.c:1577: void play_boss() NONBANKED {
                                   1250 ;	---------------------------------
                                   1251 ; Function play_boss
                                   1252 ; ---------------------------------
      000478                       1253 _play_boss::
                                   1254 ;main.c:1578: init_stage(1, 0);
      000478 AF                    1255 	xor	a, a
      000479 57                    1256 	ld	d,a
      00047A 1E 01                 1257 	ld	e,#0x01
      00047C D5                    1258 	push	de
      00047D CDr70r01              1259 	call	_init_stage
      000480 E8 02                 1260 	add	sp, #2
                                   1261 ;main.c:1579: init_scorpboss();
      000482 CDr52r07              1262 	call	_init_scorpboss
                                   1263 ;main.c:1580: anim_stage_start();
      000485 CDr1Ar28              1264 	call	_anim_stage_start
                                   1265 ;main.c:1581: play_song(&bosstheme);
      000488 21r00r00              1266 	ld	hl, #_bosstheme
      00048B E5                    1267 	push	hl
      00048C CDrE2r04              1268 	call	_play_song
      00048F E8 02                 1269 	add	sp, #2
                                   1270 ;main.c:1582: scorpboss_loop();
      000491 CDr53r24              1271 	call	_scorpboss_loop
                                   1272 ;main.c:1583: if(bossclearflg == 1) {
      000494 FAr03r00              1273 	ld	a, (#_bossclearflg)
      000497 3D                    1274 	dec	a
      000498 20 24                 1275 	jr	NZ, 00102$
                                   1276 ;main.c:1584: stop_song();
      00049A CDrF8r04              1277 	call	_stop_song
                                   1278 ;main.c:1585: anim_explode_boss(80, 106, 72, 30);
      00049D 11 48 1E              1279 	ld	de, #0x1e48
      0004A0 D5                    1280 	push	de
      0004A1 11 50 6A              1281 	ld	de, #0x6a50
      0004A4 D5                    1282 	push	de
      0004A5 CDrDCr18              1283 	call	_anim_explode_boss
      0004A8 E8 04                 1284 	add	sp, #4
                                   1285 ;main.c:1586: play_song(&cleartheme);
      0004AA 21r00r00              1286 	ld	hl, #_cleartheme
      0004AD E5                    1287 	push	hl
      0004AE CDrE2r04              1288 	call	_play_song
      0004B1 E8 02                 1289 	add	sp, #2
                                   1290 ;main.c:1587: custom_delay(255);
      0004B3 3E FF                 1291 	ld	a, #0xff
      0004B5 F5                    1292 	push	af
      0004B6 33                    1293 	inc	sp
      0004B7 CDr00r00              1294 	call	_custom_delay
      0004BA 33                    1295 	inc	sp
                                   1296 ;main.c:1588: stop_song();
      0004BB CDrF8r04              1297 	call	_stop_song
      0004BE                       1298 00102$:
                                   1299 ;main.c:1590: anim_blackout();
      0004BE CDrE2r03              1300 	call	_anim_blackout
                                   1301 ;main.c:1591: stop_song();    // Stop current stage music
      0004C1 CDrF8r04              1302 	call	_stop_song
                                   1303 ;main.c:1592: HIDE_WIN;
      0004C4 F0r00                 1304 	ldh	a, (_LCDC_REG+0)
      0004C6 E6 DF                 1305 	and	a, #0xdf
      0004C8 E0r00                 1306 	ldh	(_LCDC_REG+0),a
                                   1307 ;main.c:1593: clear_all_sprites();
      0004CA CDr15r00              1308 	call	_clear_all_sprites
                                   1309 ;main.c:1597: }
      0004CD F3                    1310 	di
                                   1311 ;main.c:1595: cloudposx = sceneryposx = roadposx = 0;
      0004CE 21r10r00              1312 	ld	hl, #_roadposx
      0004D1 36 00                 1313 	ld	(hl), #0x00
      0004D3 21r11r00              1314 	ld	hl, #_sceneryposx
      0004D6 36 00                 1315 	ld	(hl), #0x00
      0004D8 21r12r00              1316 	ld	hl, #_cloudposx
      0004DB 36 00                 1317 	ld	(hl), #0x00
                                   1318 ;main.c:1596: scroll_stage_bkg();
      0004DD CDr22r01              1319 	call	_scroll_stage_bkg
      0004E0 FB                    1320 	ei
                                   1321 ;main.c:1598: }
      0004E1 C9                    1322 	ret
                                   1323 ;main.c:1616: void play_song(const hUGESong_t * song) NONBANKED {
                                   1324 ;	---------------------------------
                                   1325 ; Function play_song
                                   1326 ; ---------------------------------
      0004E2                       1327 _play_song::
                                   1328 ;main.c:1620: }
      0004E2 F3                    1329 	di
                                   1330 ;main.c:1618: hUGE_init(song);
      0004E3 C1                    1331 	pop	bc
      0004E4 E1                    1332 	pop	hl
      0004E5 E5                    1333 	push	hl
      0004E6 C5                    1334 	push	bc
      0004E7 E5                    1335 	push	hl
      0004E8 CDr00r00              1336 	call	_hUGE_init
      0004EB E8 02                 1337 	add	sp, #2
                                   1338 ;main.c:1619: add_VBL(hUGE_dosound);
      0004ED 21r00r00              1339 	ld	hl, #_hUGE_dosound
      0004F0 E5                    1340 	push	hl
      0004F1 CDr00r00              1341 	call	_add_VBL
      0004F4 E8 02                 1342 	add	sp, #2
      0004F6 FB                    1343 	ei
                                   1344 ;main.c:1621: }
      0004F7 C9                    1345 	ret
                                   1346 ;main.c:1624: void stop_song() NONBANKED {
                                   1347 ;	---------------------------------
                                   1348 ; Function stop_song
                                   1349 ; ---------------------------------
      0004F8                       1350 _stop_song::
                                   1351 ;main.c:1625: mute_song();
      0004F8 CDr97r29              1352 	call	_mute_song
                                   1353 ;main.c:1626: remove_VBL(hUGE_dosound);
      0004FB 21r00r00              1354 	ld	hl, #_hUGE_dosound
      0004FE E5                    1355 	push	hl
      0004FF CDr00r00              1356 	call	_remove_VBL
      000502 E8 02                 1357 	add	sp, #2
                                   1358 ;main.c:1627: }
      000504 C9                    1359 	ret
                                   1360 ;main.c:1630: void main() NONBANKED {
                                   1361 ;	---------------------------------
                                   1362 ; Function main
                                   1363 ; ---------------------------------
      000505                       1364 _main::
                                   1365 ;main.c:1632: DISPLAY_ON;
      000505 F0r00                 1366 	ldh	a, (_LCDC_REG+0)
      000507 F6 80                 1367 	or	a, #0x80
      000509 E0r00                 1368 	ldh	(_LCDC_REG+0),a
                                   1369 ;main.c:1633: SHOW_BKG;
      00050B F0r00                 1370 	ldh	a, (_LCDC_REG+0)
      00050D F6 01                 1371 	or	a, #0x01
      00050F E0r00                 1372 	ldh	(_LCDC_REG+0),a
                                   1373 ;main.c:1634: SHOW_SPRITES;
      000511 F0r00                 1374 	ldh	a, (_LCDC_REG+0)
      000513 F6 02                 1375 	or	a, #0x02
      000515 E0r00                 1376 	ldh	(_LCDC_REG+0),a
                                   1377 ;main.c:1636: NR52_REG = 0x80; // Sound on
      000517 3E 80                 1378 	ld	a, #0x80
      000519 E0r00                 1379 	ldh	(_NR52_REG+0),a
                                   1380 ;main.c:1637: NR51_REG = 0xFF; // All channels
      00051B 3E FF                 1381 	ld	a, #0xff
      00051D E0r00                 1382 	ldh	(_NR51_REG+0),a
                                   1383 ;main.c:1638: NR50_REG = 0x77; // Max level, left and right
      00051F 3E 77                 1384 	ld	a, #0x77
      000521 E0r00                 1385 	ldh	(_NR50_REG+0),a
                                   1386 ;main.c:1640: anim_blackout();    // DEMO CODE
      000523 CDrE2r03              1387 	call	_anim_blackout
                                   1388 ;main.c:1641: while(1) {
      000526                       1389 00116$:
                                   1390 ;main.c:1642: main_menu();
      000526 1Er00                 1391 	ld	e, #b_main_menu
      000528 21r00r00              1392 	ld	hl, #_main_menu
      00052B CDr00r00              1393 	call	___sdcc_bcall_ehl
                                   1394 ;main.c:1643: init_game();
      00052E CDr5Ar01              1395 	call	_init_game
                                   1396 ;main.c:1644: stageclearflg = bossclearflg = 0;
      000531 21r03r00              1397 	ld	hl, #_bossclearflg
      000534 36 00                 1398 	ld	(hl), #0x00
      000536 21r02r00              1399 	ld	hl, #_stageclearflg
      000539 36 00                 1400 	ld	(hl), #0x00
                                   1401 ;main.c:1645: stagenum = 0;
      00053B 21r09r00              1402 	ld	hl, #_stagenum
      00053E 36 00                 1403 	ld	(hl), #0x00
                                   1404 ;main.c:1646: while(1) {
      000540                       1405 00113$:
                                   1406 ;main.c:1647: if(pllives == 0) {
      000540 FArC8r00              1407 	ld	a, (#_pllives)
      000543 B7                    1408 	or	a, a
      000544 20 10                 1409 	jr	NZ, 00110$
                                   1410 ;main.c:1648: game_over_menu();
      000546 1Er00                 1411 	ld	e, #b_game_over_menu
      000548 21r00r00              1412 	ld	hl, #_game_over_menu
      00054B CDr00r00              1413 	call	___sdcc_bcall_ehl
                                   1414 ;main.c:1649: if(menuidx == 1) {
      00054E FArE7r00              1415 	ld	a, (#_menuidx)
      000551 3D                    1416 	dec	a
      000552 28 D2                 1417 	jr	Z, 00116$
                                   1418 ;main.c:1650: break;  // Player has chosen to quit the stage/boss
      000554 18 EA                 1419 	jr	00113$
      000556                       1420 00110$:
                                   1421 ;main.c:1652: } else if(stageclearflg == 0) {
      000556 FAr02r00              1422 	ld	a, (#_stageclearflg)
      000559 B7                    1423 	or	a, a
      00055A 20 13                 1424 	jr	NZ, 00107$
                                   1425 ;main.c:1653: stage_intro_screen(stagenum);
      00055C FAr09r00              1426 	ld	a, (#_stagenum)
      00055F F5                    1427 	push	af
      000560 33                    1428 	inc	sp
      000561 1Er00                 1429 	ld	e, #b_stage_intro_screen
      000563 21r00r00              1430 	ld	hl, #_stage_intro_screen
      000566 CDr00r00              1431 	call	___sdcc_bcall_ehl
      000569 33                    1432 	inc	sp
                                   1433 ;main.c:1654: play_stage();
      00056A CDr28r04              1434 	call	_play_stage
      00056D 18 D1                 1435 	jr	00113$
      00056F                       1436 00107$:
                                   1437 ;main.c:1655: } else if(bossclearflg == 0) {
      00056F FAr03r00              1438 	ld	a, (#_bossclearflg)
      000572 B7                    1439 	or	a, a
      000573 20 05                 1440 	jr	NZ, 00104$
                                   1441 ;main.c:1656: play_boss();
      000575 CDr78r04              1442 	call	_play_boss
      000578 18 C6                 1443 	jr	00113$
      00057A                       1444 00104$:
                                   1445 ;main.c:1658: demo_end_screen();  // DEMO CODE
      00057A 1Er00                 1446 	ld	e, #b_demo_end_screen
      00057C 21r00r00              1447 	ld	hl, #_demo_end_screen
      00057F CDr00r00              1448 	call	___sdcc_bcall_ehl
                                   1449 ;main.c:1659: init_game(); // DEMO CODE
      000582 CDr5Ar01              1450 	call	_init_game
                                   1451 ;main.c:1660: stageclearflg = bossclearflg = 0;
      000585 21r03r00              1452 	ld	hl, #_bossclearflg
      000588 36 00                 1453 	ld	(hl), #0x00
      00058A 21r02r00              1454 	ld	hl, #_stageclearflg
      00058D 36 00                 1455 	ld	(hl), #0x00
                                   1456 ;main.c:1661: break;  // DEMO CODE
                                   1457 ;main.c:1670: }
      00058F 18 95                 1458 	jr	00116$
                                   1459 	.area _HOME
                                   1460 ;--------------------------------------------------------
                                   1461 ; code
                                   1462 ;--------------------------------------------------------
                                   1463 	.area _CODE_0
                                   1464 ;main.c:256: UINT8 get_OAM_free_tile_idx() {
                                   1465 ;	---------------------------------
                                   1466 ; Function get_OAM_free_tile_idx
                                   1467 ; ---------------------------------
      000000                       1468 _get_OAM_free_tile_idx::
                                   1469 ;main.c:257: for(UINT8 oami = 4; oami < 40; oami++) {
      000000 11 04 04              1470 	ld	de, #0x0404
      000003                       1471 00105$:
      000003 7A                    1472 	ld	a, d
      000004 D6 28                 1473 	sub	a, #0x28
      000006 30 13                 1474 	jr	NC, 00103$
                                   1475 ;main.c:258: if(shadow_OAM[oami].tile == 0) {
      000008 01r00r00              1476 	ld	bc, #_shadow_OAM+0
      00000B 7A                    1477 	ld	a, d
      00000C 26 00                 1478 	ld	h, #0x00
      00000E 6F                    1479 	ld	l, a
      00000F 29                    1480 	add	hl, hl
      000010 29                    1481 	add	hl, hl
      000011 09                    1482 	add	hl, bc
      000012 23                    1483 	inc	hl
      000013 23                    1484 	inc	hl
      000014 7E                    1485 	ld	a, (hl)
      000015 B7                    1486 	or	a, a
                                   1487 ;main.c:259: return oami; // First free tile for usage
      000016 C8                    1488 	ret	Z
                                   1489 ;main.c:257: for(UINT8 oami = 4; oami < 40; oami++) {
      000017 14                    1490 	inc	d
      000018 5A                    1491 	ld	e, d
      000019 18 E8                 1492 	jr	00105$
      00001B                       1493 00103$:
                                   1494 ;main.c:262: return 180; // No free OAM tile space found
      00001B 1E B4                 1495 	ld	e, #0xb4
                                   1496 ;main.c:263: }
      00001D C9                    1497 	ret
      00001E                       1498 _roadlanesy:
      00001E 62                    1499 	.db #0x62	; 98	'b'
      00001F 72                    1500 	.db #0x72	; 114	'r'
      000020 82                    1501 	.db #0x82	; 130
      000021                       1502 _stage1road:
      000021 32                    1503 	.db #0x32	; 50	'2'
      000022 1E                    1504 	.db #0x1e	; 30
      000023 5F                    1505 	.db #0x5f	; 95
      000024 19                    1506 	.db #0x19	; 25
      000025 6E                    1507 	.db #0x6e	; 110	'n'
      000026 19                    1508 	.db #0x19	; 25
      000027 A0                    1509 	.db #0xa0	; 160
      000028 19                    1510 	.db #0x19	; 25
      000029 6E                    1511 	.db #0x6e	; 110	'n'
      00002A 23                    1512 	.db #0x23	; 35
      00002B 0A                    1513 	.db #0x0a	; 10
      00002C 0A                    1514 	.db #0x0a	; 10
      00002D 0A                    1515 	.db #0x0a	; 10
      00002E 0A                    1516 	.db #0x0a	; 10
      00002F 0A                    1517 	.db #0x0a	; 10
      000030 0A                    1518 	.db #0x0a	; 10
      000031 46                    1519 	.db #0x46	; 70	'F'
      000032                       1520 _stage1objs:
      000032 02                    1521 	.db #0x02	; 2
      000033 32                    1522 	.db #0x32	; 50	'2'
      000034 A7                    1523 	.db #0xa7	; 167
      000035 72                    1524 	.db #0x72	; 114	'r'
      000036 00                    1525 	.db #0x00	; 0
      000037 04                    1526 	.db #0x04	; 4
      000038 14                    1527 	.db #0x14	; 20
      000039 A7                    1528 	.db #0xa7	; 167
      00003A 62                    1529 	.db #0x62	; 98	'b'
      00003B 00                    1530 	.db #0x00	; 0
      00003C 04                    1531 	.db #0x04	; 4
      00003D 28                    1532 	.db #0x28	; 40
      00003E A7                    1533 	.db #0xa7	; 167
      00003F 82                    1534 	.db #0x82	; 130
      000040 00                    1535 	.db #0x00	; 0
      000041 04                    1536 	.db #0x04	; 4
      000042 3C                    1537 	.db #0x3c	; 60
      000043 A7                    1538 	.db #0xa7	; 167
      000044 72                    1539 	.db #0x72	; 114	'r'
      000045 00                    1540 	.db #0x00	; 0
      000046 06                    1541 	.db #0x06	; 6
      000047 14                    1542 	.db #0x14	; 20
      000048 A7                    1543 	.db #0xa7	; 167
      000049 82                    1544 	.db #0x82	; 130
      00004A 00                    1545 	.db #0x00	; 0
      00004B 06                    1546 	.db #0x06	; 6
      00004C 28                    1547 	.db #0x28	; 40
      00004D A7                    1548 	.db #0xa7	; 167
      00004E 37                    1549 	.db #0x37	; 55	'7'
      00004F 01                    1550 	.db #0x01	; 1
      000050 06                    1551 	.db #0x06	; 6
      000051 3C                    1552 	.db #0x3c	; 60
      000052 A7                    1553 	.db #0xa7	; 167
      000053 62                    1554 	.db #0x62	; 98	'b'
      000054 00                    1555 	.db #0x00	; 0
      000055 06                    1556 	.db #0x06	; 6
      000056 50                    1557 	.db #0x50	; 80	'P'
      000057 A7                    1558 	.db #0xa7	; 167
      000058 37                    1559 	.db #0x37	; 55	'7'
      000059 01                    1560 	.db #0x01	; 1
      00005A 06                    1561 	.db #0x06	; 6
      00005B 64                    1562 	.db #0x64	; 100	'd'
      00005C A7                    1563 	.db #0xa7	; 167
      00005D 72                    1564 	.db #0x72	; 114	'r'
      00005E 00                    1565 	.db #0x00	; 0
      00005F 08                    1566 	.db #0x08	; 8
      000060 1E                    1567 	.db #0x1e	; 30
      000061 A7                    1568 	.db #0xa7	; 167
      000062 82                    1569 	.db #0x82	; 130
      000063 00                    1570 	.db #0x00	; 0
      000064 08                    1571 	.db #0x08	; 8
      000065 28                    1572 	.db #0x28	; 40
      000066 A7                    1573 	.db #0xa7	; 167
      000067 37                    1574 	.db #0x37	; 55	'7'
      000068 01                    1575 	.db #0x01	; 1
      000069 08                    1576 	.db #0x08	; 8
      00006A 32                    1577 	.db #0x32	; 50	'2'
      00006B A7                    1578 	.db #0xa7	; 167
      00006C 62                    1579 	.db #0x62	; 98	'b'
      00006D 00                    1580 	.db #0x00	; 0
      00006E 08                    1581 	.db #0x08	; 8
      00006F 3C                    1582 	.db #0x3c	; 60
      000070 A7                    1583 	.db #0xa7	; 167
      000071 72                    1584 	.db #0x72	; 114	'r'
      000072 00                    1585 	.db #0x00	; 0
      000073 08                    1586 	.db #0x08	; 8
      000074 46                    1587 	.db #0x46	; 70	'F'
      000075 A7                    1588 	.db #0xa7	; 167
      000076 37                    1589 	.db #0x37	; 55	'7'
      000077 01                    1590 	.db #0x01	; 1
      000078 08                    1591 	.db #0x08	; 8
      000079 50                    1592 	.db #0x50	; 80	'P'
      00007A A7                    1593 	.db #0xa7	; 167
      00007B 72                    1594 	.db #0x72	; 114	'r'
      00007C 00                    1595 	.db #0x00	; 0
      00007D 09                    1596 	.db #0x09	; 9
      00007E 10                    1597 	.db #0x10	; 16
      00007F A7                    1598 	.db #0xa7	; 167
      000080 85                    1599 	.db #0x85	; 133
      000081 03                    1600 	.db #0x03	; 3
      000082 10                    1601 	.db #0x10	; 16
      000083 14                    1602 	.db #0x14	; 20
      000084 A7                    1603 	.db #0xa7	; 167
      000085 72                    1604 	.db #0x72	; 114	'r'
      000086 00                    1605 	.db #0x00	; 0
      000087 10                    1606 	.db #0x10	; 16
      000088 1E                    1607 	.db #0x1e	; 30
      000089 A7                    1608 	.db #0xa7	; 167
      00008A 37                    1609 	.db #0x37	; 55	'7'
      00008B 01                    1610 	.db #0x01	; 1
      00008C                       1611 _stages:
      00008Cr21r00                 1612 	.dw _stage1road
      00008E 11                    1613 	.db #0x11	; 17
      00008Fr32r00                 1614 	.dw _stage1objs
      000091 13                    1615 	.db #0x13	; 19
      000092r00r00                 1616 	.dw _deserttiles
      000094 27                    1617 	.db #0x27	; 39
      000095r00r00                 1618 	.dw _desertmap
      000097 01                    1619 	.db #0x01	; 1
      000098 02                    1620 	.db #0x02	; 2
      000099r00r00                 1621 	.dw _deserttheme
      00009B                       1622 _stagenames:
      00009B 0E                    1623 	.db #0x0e	; 14
      00009C 0F                    1624 	.db #0x0f	; 15
      00009D 1D                    1625 	.db #0x1d	; 29
      00009E 0F                    1626 	.db #0x0f	; 15
      00009F 1C                    1627 	.db #0x1c	; 28
      0000A0 1E                    1628 	.db #0x1e	; 30
      0000A1 00                    1629 	.db #0x00	; 0
      0000A2 12                    1630 	.db #0x12	; 18
      0000A3 13                    1631 	.db #0x13	; 19
      0000A4 11                    1632 	.db #0x11	; 17
      0000A5 12                    1633 	.db #0x12	; 18
      0000A6 21                    1634 	.db #0x21	; 33
      0000A7 0B                    1635 	.db #0x0b	; 11
      0000A8 23                    1636 	.db #0x23	; 35
      0000A9 00                    1637 	.db 0x00
      0000AA 00                    1638 	.db 0x00
      0000AB 00                    1639 	.db 0x00
      0000AC 00                    1640 	.db 0x00
      0000AD                       1641 _stnamelengths:
      0000AD 0E                    1642 	.db #0x0e	; 14
      0000AE 00                    1643 	.db 0x00
      0000AF 00                    1644 	.db 0x00
      0000B0 00                    1645 	.db 0x00
      0000B1 00                    1646 	.db 0x00
      0000B2 00                    1647 	.db 0x00
      0000B3                       1648 _roadscrspeed:
      0000B3 05                    1649 	.db #0x05	; 5
      0000B4                       1650 _jumpspeed:
      0000B4 03                    1651 	.db #0x03	; 3
      0000B5                       1652 _plgroundspeed:
      0000B5 01                    1653 	.db #0x01	; 1
      0000B6                       1654 _roadboundy:
      0000B6 65                    1655 	.db #0x65	; 101	'e'
      0000B7                       1656 _lockedoamtiles:
      0000B7 04                    1657 	.db #0x04	; 4
      0000B8                       1658 _blanktile:
      0000B8 00                    1659 	.db #0x00	; 0
      0000B9 00                    1660 	.db #0x00	; 0
      0000BA 00                    1661 	.db #0x00	; 0
      0000BB 00                    1662 	.db #0x00	; 0
      0000BC 00                    1663 	.db #0x00	; 0
      0000BD 00                    1664 	.db #0x00	; 0
      0000BE 00                    1665 	.db #0x00	; 0
      0000BF 00                    1666 	.db #0x00	; 0
      0000C0 00                    1667 	.db #0x00	; 0
      0000C1 00                    1668 	.db #0x00	; 0
      0000C2 00                    1669 	.db #0x00	; 0
      0000C3 00                    1670 	.db #0x00	; 0
      0000C4 00                    1671 	.db #0x00	; 0
      0000C5 00                    1672 	.db #0x00	; 0
      0000C6 00                    1673 	.db #0x00	; 0
      0000C7 00                    1674 	.db #0x00	; 0
      0000C8                       1675 _machinedimswh:
      0000C8 10                    1676 	.db #0x10	; 16
      0000C9                       1677 _pjctllimit:
      0000C9 07                    1678 	.db #0x07	; 7
      0000CA                       1679 _screenminx:
      0000CA 08                    1680 	.db #0x08	; 8
      0000CB                       1681 _screenminy:
      0000CB 10                    1682 	.db #0x10	; 16
      0000CC                       1683 _screenmaxx:
      0000CC A8                    1684 	.db #0xa8	; 168
      0000CD                       1685 _screenmaxy:
      0000CD 90                    1686 	.db #0x90	; 144
      0000CE                       1687 _abtncooldown:
      0000CE 18                    1688 	.db #0x18	; 24
      0000CF                       1689 _enlimit:
      0000CF 05                    1690 	.db #0x05	; 5
      0000D0                       1691 _pliframeprd:
      0000D0 78                    1692 	.db #0x78	; 120	'x'
      0000D1                       1693 _expldur:
      0000D1 20                    1694 	.db #0x20	; 32
      0000D2                       1695 _jumplimity:
      0000D2 32                    1696 	.db #0x32	; 50	'2'
      0000D3                       1697 _jumphalflimy:
      0000D3 19                    1698 	.db #0x19	; 25
      0000D4                       1699 _mutecycnum:
      0000D4 0F                    1700 	.db #0x0f	; 15
      0000D5                       1701 _genexplcord:
      0000D5 02                    1702 	.db #0x02	; 2
      0000D6 02                    1703 	.db #0x02	; 2
      0000D7 03                    1704 	.db #0x03	; 3
      0000D8 05                    1705 	.db #0x05	; 5
      0000D9 05                    1706 	.db #0x05	; 5
      0000DA 04                    1707 	.db #0x04	; 4
      0000DB 06                    1708 	.db #0x06	; 6
      0000DC 02                    1709 	.db #0x02	; 2
      0000DD 04                    1710 	.db #0x04	; 4
      0000DE 05                    1711 	.db #0x05	; 5
      0000DF                       1712 _plprops:
      0000DF 01                    1713 	.db #0x01	;  1
      0000E0 04                    1714 	.db #0x04	;  4
      0000E1 03                    1715 	.db #0x03	;  3
      0000E2 01                    1716 	.db #0x01	;  1
      0000E3 11                    1717 	.db #0x11	;  17
      0000E4 0C                    1718 	.db #0x0c	;  12
      0000E5 0D                    1719 	.db #0x0d	;  13
      0000E6 0F                    1720 	.db #0x0f	;  15
      0000E7 64                    1721 	.db #0x64	;  100	'd'
      0000E8 01                    1722 	.db #0x01	;  1
      0000E9                       1723 _scorpgunprops:
      0000E9 01                    1724 	.db #0x01	;  1
      0000EA 0A                    1725 	.db #0x0a	;  10
      0000EB 01                    1726 	.db #0x01	;  1
      0000EC 00                    1727 	.db #0x00	;  0
      0000ED FD                    1728 	.db #0xfd	; -3
      0000EE 01                    1729 	.db #0x01	;  1
      0000EF 08                    1730 	.db #0x08	;  8
      0000F0 08                    1731 	.db #0x08	;  8
      0000F1 06                    1732 	.db #0x06	;  6
      0000F2 64                    1733 	.db #0x64	;  100	'd'
      0000F3                       1734 _stingprops:
      0000F3 01                    1735 	.db #0x01	;  1
      0000F4 0A                    1736 	.db #0x0a	;  10
      0000F5 01                    1737 	.db #0x01	;  1
      0000F6 00                    1738 	.db #0x00	;  0
      0000F7 00                    1739 	.db #0x00	;  0
      0000F8 00                    1740 	.db #0x00	;  0
      0000F9 08                    1741 	.db #0x08	;  8
      0000FA 0D                    1742 	.db #0x0d	;  13
      0000FB 06                    1743 	.db #0x06	;  6
      0000FC 64                    1744 	.db #0x64	;  100	'd'
      0000FD                       1745 _enprops:
      0000FD 01                    1746 	.db #0x01	;  1
      0000FE 02                    1747 	.db #0x02	;  2
      0000FF 00                    1748 	.db #0x00	;  0
      000100 01                    1749 	.db #0x01	;  1
      000101 0D                    1750 	.db #0x0d	;  13
      000102 0F                    1751 	.db #0x0f	;  15
      000103 FD                    1752 	.db #0xfd	; -3
      000104 0C                    1753 	.db #0x0c	;  12
      000105 00                    1754 	.db #0x00	;  0
      000106 15                    1755 	.db #0x15	;  21
      000107 00                    1756 	.db #0x00	;  0
      000108 01                    1757 	.db #0x01	;  1
      000109 02                    1758 	.db #0x02	;  2
      00010A 05                    1759 	.db #0x05	;  5
      00010B 0E                    1760 	.db #0x0e	;  14
      00010C 07                    1761 	.db #0x07	;  7
      00010D 07                    1762 	.db #0x07	;  7
      00010E 0D                    1763 	.db #0x0d	;  13
      00010F 01                    1764 	.db #0x01	;  1
      000110 19                    1765 	.db #0x19	;  25
      000111 01                    1766 	.db #0x01	;  1
      000112 09                    1767 	.db #0x09	;  9
      000113 02                    1768 	.db #0x02	;  2
      000114 05                    1769 	.db #0x05	;  5
      000115 0D                    1770 	.db #0x0d	;  13
      000116 0A                    1771 	.db #0x0a	;  10
      000117 01                    1772 	.db #0x01	;  1
      000118 04                    1773 	.db #0x04	;  4
      000119 02                    1774 	.db #0x02	;  2
      00011A 1D                    1775 	.db #0x1d	;  29
      00011B 00                    1776 	.db #0x00	;  0
      00011C 64                    1777 	.db #0x64	;  100	'd'
      00011D 03                    1778 	.db #0x03	;  3
      00011E 02                    1779 	.db #0x02	;  2
      00011F 0E                    1780 	.db #0x0e	;  14
      000120 0C                    1781 	.db #0x0c	;  12
      000121 07                    1782 	.db #0x07	;  7
      000122 FC                    1783 	.db #0xfc	; -4
      000123 03                    1784 	.db #0x03	;  3
      000124 21                    1785 	.db #0x21	;  33
      000125 00                    1786 	.db #0x00	;  0
      000126 02                    1787 	.db #0x02	;  2
      000127 00                    1788 	.db #0x00	;  0
      000128 05                    1789 	.db #0x05	;  5
      000129 0D                    1790 	.db #0x0d	;  13
      00012A 07                    1791 	.db #0x07	;  7
      00012B 04                    1792 	.db #0x04	;  4
      00012C 0B                    1793 	.db #0x0b	;  11
      00012D 04                    1794 	.db #0x04	;  4
      00012E 25                    1795 	.db #0x25	;  37
      00012F 01                    1796 	.db #0x01	;  1
      000130 14                    1797 	.db #0x14	;  20
      000131 03                    1798 	.db #0x03	;  3
      000132 02                    1799 	.db #0x02	;  2
      000133 0B                    1800 	.db #0x0b	;  11
      000134 0B                    1801 	.db #0x0b	;  11
      000135 00                    1802 	.db #0x00	;  0
      000136 00                    1803 	.db #0x00	;  0
      000137 05                    1804 	.db #0x05	;  5
      000138 29                    1805 	.db #0x29	;  41
                                   1806 ;main.c:273: void incr_oam_sprite_tile_idx(INT8 steps) {
                                   1807 ;	---------------------------------
                                   1808 ; Function incr_oam_sprite_tile_idx
                                   1809 ; ---------------------------------
      000139                       1810 _incr_oam_sprite_tile_idx::
                                   1811 ;main.c:274: UINT8 nextoamind = oamidx + steps;
      000139 FAr14r00              1812 	ld	a, (#_oamidx)
      00013C F8 02                 1813 	ldhl	sp,	#2
      00013E 86                    1814 	add	a, (hl)
                                   1815 ;main.c:275: oamidx = nextoamind < 40 ? nextoamind : nextoamind - 40 + lockedoamtiles; // Out of bounds check and reset
      00013F FE 28                 1816 	cp	a, #0x28
      000141 38 07                 1817 	jr	C, 00106$
      000143 C6 D8                 1818 	add	a, #0xd8
      000145 4F                    1819 	ld	c, a
      000146 FArB7r00              1820 	ld	a, (#_lockedoamtiles)
      000149 81                    1821 	add	a, c
      00014A                       1822 00106$:
      00014A 21r14r00              1823 	ld	hl, #_oamidx
      00014D 77                    1824 	ld	(hl), a
                                   1825 ;main.c:276: if(shadow_OAM[oamidx].tile != 0) { // If next OAM tile is used, loop to find a free one
      00014E 6E                    1826 	ld	l, (hl)
      00014F 26 00                 1827 	ld	h, #0x00
      000151 29                    1828 	add	hl, hl
      000152 29                    1829 	add	hl, hl
      000153 11r00r00              1830 	ld	de, #_shadow_OAM
      000156 19                    1831 	add	hl, de
      000157 23                    1832 	inc	hl
      000158 23                    1833 	inc	hl
      000159 7E                    1834 	ld	a, (hl)
      00015A B7                    1835 	or	a, a
      00015B C8                    1836 	ret	Z
                                   1837 ;main.c:277: oamidx = get_OAM_free_tile_idx();
      00015C CDr00r00              1838 	call	_get_OAM_free_tile_idx
      00015F 21r14r00              1839 	ld	hl, #_oamidx
      000162 73                    1840 	ld	(hl), e
                                   1841 ;main.c:279: }
      000163 C9                    1842 	ret
                                   1843 ;main.c:282: inline void itr_enemies_ptr() {
                                   1844 ;	---------------------------------
                                   1845 ; Function itr_enemies_ptr
                                   1846 ; ---------------------------------
      000164                       1847 _itr_enemies_ptr::
                                   1848 ;main.c:283: crntenemy = crntenemy == machines + enlimit ? machines + 1 : crntenemy + 1;
      000164 21rCFr00              1849 	ld	hl, #_enlimit
      000167 4E                    1850 	ld	c, (hl)
      000168 06 00                 1851 	ld	b, #0x00
      00016A 69                    1852 	ld	l, c
      00016B 60                    1853 	ld	h, b
      00016C 29                    1854 	add	hl, hl
      00016D 29                    1855 	add	hl, hl
      00016E 29                    1856 	add	hl, hl
      00016F 29                    1857 	add	hl, hl
      000170 09                    1858 	add	hl, bc
      000171 11r5Cr00              1859 	ld	de, #_machines
      000174 19                    1860 	add	hl, de
      000175 4D                    1861 	ld	c, l
      000176 44                    1862 	ld	b, h
      000177 21rC4r00              1863 	ld	hl, #_crntenemy
      00017A 7E                    1864 	ld	a, (hl)
      00017B 91                    1865 	sub	a, c
      00017C 20 0A                 1866 	jr	NZ, 00103$
      00017E 23                    1867 	inc	hl
      00017F 7E                    1868 	ld	a, (hl)
      000180 90                    1869 	sub	a, b
      000181 20 05                 1870 	jr	NZ, 00103$
      000183 01r6Dr00              1871 	ld	bc, #_machines + 17
      000186 18 0C                 1872 	jr	00104$
      000188                       1873 00103$:
      000188 21rC4r00              1874 	ld	hl, #_crntenemy
      00018B 7E                    1875 	ld	a, (hl)
      00018C C6 11                 1876 	add	a, #0x11
      00018E 4F                    1877 	ld	c, a
      00018F 23                    1878 	inc	hl
      000190 7E                    1879 	ld	a, (hl)
      000191 CE 00                 1880 	adc	a, #0x00
      000193 47                    1881 	ld	b, a
      000194                       1882 00104$:
      000194 21rC4r00              1883 	ld	hl, #_crntenemy
      000197 79                    1884 	ld	a, c
      000198 22                    1885 	ld	(hl+), a
      000199 70                    1886 	ld	(hl), b
                                   1887 ;main.c:284: }
      00019A C9                    1888 	ret
                                   1889 ;main.c:287: inline void incr_projectile_counter() {
                                   1890 ;	---------------------------------
                                   1891 ; Function incr_projectile_counter
                                   1892 ; ---------------------------------
      00019B                       1893 _incr_projectile_counter::
                                   1894 ;main.c:288: prjcnt += prjcnt == pjctllimit + 1 ? 0 : 1;
      00019B 21rC9r00              1895 	ld	hl, #_pjctllimit
      00019E 4E                    1896 	ld	c, (hl)
      00019F 06 00                 1897 	ld	b, #0x00
      0001A1 03                    1898 	inc	bc
      0001A2 21r5Ar00              1899 	ld	hl, #_prjcnt
      0001A5 5E                    1900 	ld	e, (hl)
      0001A6 16 00                 1901 	ld	d, #0x00
      0001A8 7B                    1902 	ld	a, e
      0001A9 91                    1903 	sub	a, c
      0001AA 20 09                 1904 	jr	NZ, 00103$
      0001AC 7A                    1905 	ld	a, d
      0001AD 90                    1906 	sub	a, b
      0001AE 20 05                 1907 	jr	NZ, 00103$
      0001B0 01 00 00              1908 	ld	bc, #0x0000
      0001B3 18 03                 1909 	jr	00104$
      0001B5                       1910 00103$:
      0001B5 01 01 00              1911 	ld	bc, #0x0001
      0001B8                       1912 00104$:
      0001B8 21r5Ar00              1913 	ld	hl, #_prjcnt
      0001BB 7E                    1914 	ld	a, (hl)
      0001BC 81                    1915 	add	a, c
      0001BD 77                    1916 	ld	(hl), a
                                   1917 ;main.c:289: }
      0001BE C9                    1918 	ret
                                   1919 ;main.c:292: inline void itr_projectile_ptr() {
                                   1920 ;	---------------------------------
                                   1921 ; Function itr_projectile_ptr
                                   1922 ; ---------------------------------
      0001BF                       1923 _itr_projectile_ptr::
                                   1924 ;main.c:293: crntpjct = crntpjct == projectiles + pjctllimit ? projectiles : crntpjct + 1;
      0001BF 01r16r00              1925 	ld	bc, #_projectiles+0
      0001C2 FArC9r00              1926 	ld	a, (#_pjctllimit)
      0001C5 26 00                 1927 	ld	h, #0x00
      0001C7 6F                    1928 	ld	l, a
      0001C8 29                    1929 	add	hl, hl
      0001C9 29                    1930 	add	hl, hl
      0001CA 29                    1931 	add	hl, hl
      0001CB 09                    1932 	add	hl, bc
      0001CC 5D                    1933 	ld	e, l
      0001CD 54                    1934 	ld	d, h
      0001CE 21r56r00              1935 	ld	hl, #_crntpjct
      0001D1 7E                    1936 	ld	a, (hl)
      0001D2 93                    1937 	sub	a, e
      0001D3 20 07                 1938 	jr	NZ, 00103$
      0001D5 23                    1939 	inc	hl
      0001D6 7E                    1940 	ld	a, (hl)
      0001D7 92                    1941 	sub	a, d
      0001D8 28 0E                 1942 	jr	Z, 00104$
      0001DA 18 00                 1943 	jr	00103$
      0001DC                       1944 00103$:
      0001DC 21r56r00              1945 	ld	hl, #_crntpjct
      0001DF 7E                    1946 	ld	a, (hl)
      0001E0 C6 08                 1947 	add	a, #0x08
      0001E2 4F                    1948 	ld	c, a
      0001E3 23                    1949 	inc	hl
      0001E4 7E                    1950 	ld	a, (hl)
      0001E5 CE 00                 1951 	adc	a, #0x00
      0001E7 47                    1952 	ld	b, a
      0001E8                       1953 00104$:
      0001E8 21r56r00              1954 	ld	hl, #_crntpjct
      0001EB 79                    1955 	ld	a, c
      0001EC 22                    1956 	ld	(hl+), a
      0001ED 70                    1957 	ld	(hl), b
                                   1958 ;main.c:294: }
      0001EE C9                    1959 	ret
                                   1960 ;main.c:297: inline UBYTE found_free_projectile_space() {   // Checks if there is free space in memory to spawn a projectile
                                   1961 ;	---------------------------------
                                   1962 ; Function found_free_projectile_space
                                   1963 ; ---------------------------------
      0001EF                       1964 _found_free_projectile_space::
                                   1965 ;main.c:298: return prjcnt != pjctllimit + 1 && oamidx != 180;
      0001EF 21rC9r00              1966 	ld	hl, #_pjctllimit
      0001F2 4E                    1967 	ld	c, (hl)
      0001F3 06 00                 1968 	ld	b, #0x00
      0001F5 03                    1969 	inc	bc
      0001F6 21r5Ar00              1970 	ld	hl, #_prjcnt
      0001F9 5E                    1971 	ld	e, (hl)
      0001FA 16 00                 1972 	ld	d, #0x00
      0001FC 7B                    1973 	ld	a, e
      0001FD 91                    1974 	sub	a, c
      0001FE 20 04                 1975 	jr	NZ, 00111$
      000200 7A                    1976 	ld	a, d
      000201 90                    1977 	sub	a, b
      000202 28 07                 1978 	jr	Z, 00103$
      000204                       1979 00111$:
      000204 FAr14r00              1980 	ld	a, (#_oamidx)
      000207 D6 B4                 1981 	sub	a, #0xb4
      000209 20 03                 1982 	jr	NZ, 00104$
      00020B                       1983 00103$:
      00020B 1E 00                 1984 	ld	e, #0x00
      00020D C9                    1985 	ret
      00020E                       1986 00104$:
      00020E 1E 01                 1987 	ld	e, #0x01
                                   1988 ;main.c:299: }
      000210 C9                    1989 	ret
                                   1990 ;main.c:302: inline UINT8 get_tile_idx(UINT8 newidxnum) {   // Recalculate tile index according to the OAM tile limit
                                   1991 ;	---------------------------------
                                   1992 ; Function get_tile_idx
                                   1993 ; ---------------------------------
      000211                       1994 _get_tile_idx::
                                   1995 ;main.c:303: return newidxnum > 31 ? newidxnum - 32 : newidxnum;
      000211 3E 1F                 1996 	ld	a, #0x1f
      000213 F8 02                 1997 	ldhl	sp,	#2
      000215 96                    1998 	sub	a, (hl)
      000216 30 05                 1999 	jr	NC, 00103$
      000218 7E                    2000 	ld	a, (hl)
      000219 C6 E0                 2001 	add	a, #0xe0
      00021B 18 03                 2002 	jr	00104$
      00021D                       2003 00103$:
      00021D F8 02                 2004 	ldhl	sp,	#2
      00021F 7E                    2005 	ld	a, (hl)
      000220                       2006 00104$:
      000220 5F                    2007 	ld	e, a
                                   2008 ;main.c:304: }
      000221 C9                    2009 	ret
                                   2010 ;main.c:332: void set_machine_tile(Machine * mch, UINT8 tlnum) { // Sets all machine tiles to a specific tile from memory
                                   2011 ;	---------------------------------
                                   2012 ; Function set_machine_tile
                                   2013 ; ---------------------------------
      000222                       2014 _set_machine_tile::
                                   2015 ;main.c:333: set_sprite_tile(mch->oamtilenums[0], tlnum);
      000222 F8 04                 2016 	ldhl	sp,	#4
      000224 3A                    2017 	ld	a, (hl-)
      000225 4F                    2018 	ld	c, a
      000226 2B                    2019 	dec	hl
      000227 2A                    2020 	ld	a, (hl+)
      000228 5F                    2021 	ld	e, a
      000229 56                    2022 	ld	d, (hl)
      00022A 21 0D 00              2023 	ld	hl, #0x000d
      00022D 19                    2024 	add	hl, de
      00022E 46                    2025 	ld	b, (hl)
                                   2026 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      00022F AF                    2027 	xor	a, a
      000230 68                    2028 	ld	l, b
      000231 67                    2029 	ld	h, a
      000232 29                    2030 	add	hl, hl
      000233 29                    2031 	add	hl, hl
      000234 D5                    2032 	push	de
      000235 11r00r00              2033 	ld	de, #_shadow_OAM
      000238 19                    2034 	add	hl, de
      000239 D1                    2035 	pop	de
      00023A 23                    2036 	inc	hl
      00023B 23                    2037 	inc	hl
      00023C 71                    2038 	ld	(hl), c
                                   2039 ;main.c:334: set_sprite_tile(mch->oamtilenums[1], tlnum);
      00023D 21 0E 00              2040 	ld	hl, #0x000e
      000240 19                    2041 	add	hl, de
                                   2042 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      000241 7E                    2043 	ld	a, (hl)
      000242 26 00                 2044 	ld	h, #0x00
      000244 6F                    2045 	ld	l, a
      000245 29                    2046 	add	hl, hl
      000246 29                    2047 	add	hl, hl
      000247 D5                    2048 	push	de
      000248 11r00r00              2049 	ld	de, #_shadow_OAM
      00024B 19                    2050 	add	hl, de
      00024C D1                    2051 	pop	de
      00024D 23                    2052 	inc	hl
      00024E 23                    2053 	inc	hl
      00024F 71                    2054 	ld	(hl), c
                                   2055 ;main.c:335: set_sprite_tile(mch->oamtilenums[2], tlnum);
      000250 21 0F 00              2056 	ld	hl, #0x000f
      000253 19                    2057 	add	hl, de
                                   2058 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      000254 7E                    2059 	ld	a, (hl)
      000255 26 00                 2060 	ld	h, #0x00
      000257 6F                    2061 	ld	l, a
      000258 29                    2062 	add	hl, hl
      000259 29                    2063 	add	hl, hl
      00025A D5                    2064 	push	de
      00025B 11r00r00              2065 	ld	de, #_shadow_OAM
      00025E 19                    2066 	add	hl, de
      00025F D1                    2067 	pop	de
      000260 23                    2068 	inc	hl
      000261 23                    2069 	inc	hl
      000262 71                    2070 	ld	(hl), c
                                   2071 ;main.c:336: set_sprite_tile(mch->oamtilenums[3], tlnum);
      000263 21 10 00              2072 	ld	hl, #0x0010
      000266 19                    2073 	add	hl, de
                                   2074 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      000267 6E                    2075 	ld	l, (hl)
      000268 11r00r00              2076 	ld	de, #_shadow_OAM+0
      00026B 26 00                 2077 	ld	h, #0x00
      00026D 29                    2078 	add	hl, hl
      00026E 29                    2079 	add	hl, hl
      00026F 19                    2080 	add	hl, de
      000270 23                    2081 	inc	hl
      000271 23                    2082 	inc	hl
      000272 71                    2083 	ld	(hl), c
                                   2084 ;main.c:336: set_sprite_tile(mch->oamtilenums[3], tlnum);
                                   2085 ;main.c:337: }
      000273 C9                    2086 	ret
                                   2087 ;main.c:340: void set_machine_sprite_tiles(Machine * mch, UINT8 fsttile) {
                                   2088 ;	---------------------------------
                                   2089 ; Function set_machine_sprite_tiles
                                   2090 ; ---------------------------------
      000274                       2091 _set_machine_sprite_tiles::
      000274 3B                    2092 	dec	sp
                                   2093 ;main.c:341: set_sprite_tile(mch->oamtilenums[0], fsttile);
      000275 F8 05                 2094 	ldhl	sp,	#5
      000277 3A                    2095 	ld	a, (hl-)
      000278 4F                    2096 	ld	c, a
      000279 2B                    2097 	dec	hl
      00027A 2A                    2098 	ld	a, (hl+)
      00027B 5F                    2099 	ld	e, a
      00027C 56                    2100 	ld	d, (hl)
      00027D 21 0D 00              2101 	ld	hl, #0x000d
      000280 19                    2102 	add	hl, de
      000281 46                    2103 	ld	b, (hl)
                                   2104 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      000282 AF                    2105 	xor	a, a
      000283 68                    2106 	ld	l, b
      000284 67                    2107 	ld	h, a
      000285 29                    2108 	add	hl, hl
      000286 29                    2109 	add	hl, hl
      000287 D5                    2110 	push	de
      000288 11r00r00              2111 	ld	de, #_shadow_OAM
      00028B 19                    2112 	add	hl, de
      00028C D1                    2113 	pop	de
      00028D 23                    2114 	inc	hl
      00028E 23                    2115 	inc	hl
      00028F 71                    2116 	ld	(hl), c
                                   2117 ;main.c:342: set_sprite_tile(mch->oamtilenums[1], fsttile + 2);
      000290 F8 00                 2118 	ldhl	sp,	#0
      000292 71                    2119 	ld	(hl), c
      000293 4E                    2120 	ld	c, (hl)
      000294 0C                    2121 	inc	c
      000295 0C                    2122 	inc	c
      000296 21 0E 00              2123 	ld	hl, #0x000e
      000299 19                    2124 	add	hl, de
      00029A 46                    2125 	ld	b, (hl)
                                   2126 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      00029B AF                    2127 	xor	a, a
      00029C 68                    2128 	ld	l, b
      00029D 67                    2129 	ld	h, a
      00029E 29                    2130 	add	hl, hl
      00029F 29                    2131 	add	hl, hl
      0002A0 D5                    2132 	push	de
      0002A1 11r00r00              2133 	ld	de, #_shadow_OAM
      0002A4 19                    2134 	add	hl, de
      0002A5 D1                    2135 	pop	de
      0002A6 23                    2136 	inc	hl
      0002A7 23                    2137 	inc	hl
      0002A8 71                    2138 	ld	(hl), c
                                   2139 ;main.c:343: set_sprite_tile(mch->oamtilenums[2], fsttile + 1);
      0002A9 F8 00                 2140 	ldhl	sp,	#0
      0002AB 4E                    2141 	ld	c, (hl)
      0002AC 0C                    2142 	inc	c
      0002AD 21 0F 00              2143 	ld	hl, #0x000f
      0002B0 19                    2144 	add	hl, de
                                   2145 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      0002B1 7E                    2146 	ld	a, (hl)
      0002B2 26 00                 2147 	ld	h, #0x00
      0002B4 6F                    2148 	ld	l, a
      0002B5 29                    2149 	add	hl, hl
      0002B6 29                    2150 	add	hl, hl
      0002B7 D5                    2151 	push	de
      0002B8 11r00r00              2152 	ld	de, #_shadow_OAM
      0002BB 19                    2153 	add	hl, de
      0002BC D1                    2154 	pop	de
      0002BD 23                    2155 	inc	hl
      0002BE 23                    2156 	inc	hl
      0002BF 71                    2157 	ld	(hl), c
                                   2158 ;main.c:344: set_sprite_tile(mch->oamtilenums[3], fsttile + 3);
      0002C0 F8 00                 2159 	ldhl	sp,	#0
      0002C2 4E                    2160 	ld	c, (hl)
      0002C3 0C                    2161 	inc	c
      0002C4 0C                    2162 	inc	c
      0002C5 0C                    2163 	inc	c
      0002C6 21 10 00              2164 	ld	hl, #0x0010
      0002C9 19                    2165 	add	hl, de
                                   2166 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      0002CA 6E                    2167 	ld	l, (hl)
      0002CB 11r00r00              2168 	ld	de, #_shadow_OAM+0
      0002CE 26 00                 2169 	ld	h, #0x00
      0002D0 29                    2170 	add	hl, hl
      0002D1 29                    2171 	add	hl, hl
      0002D2 19                    2172 	add	hl, de
      0002D3 23                    2173 	inc	hl
      0002D4 23                    2174 	inc	hl
      0002D5 71                    2175 	ld	(hl), c
                                   2176 ;main.c:344: set_sprite_tile(mch->oamtilenums[3], fsttile + 3);
                                   2177 ;main.c:345: }
      0002D6 33                    2178 	inc	sp
      0002D7 C9                    2179 	ret
                                   2180 ;main.c:348: void place_machine(Machine * mch, UINT8 x, UINT8 y) {
                                   2181 ;	---------------------------------
                                   2182 ; Function place_machine
                                   2183 ; ---------------------------------
      0002D8                       2184 _place_machine::
      0002D8 E8 FC                 2185 	add	sp, #-4
                                   2186 ;main.c:349: mch->x = x;
      0002DA F8 06                 2187 	ldhl	sp,#6
      0002DC 2A                    2188 	ld	a, (hl+)
      0002DD 5F                    2189 	ld	e, a
      0002DE 56                    2190 	ld	d, (hl)
      0002DF 4B                    2191 	ld	c, e
      0002E0 42                    2192 	ld	b, d
      0002E1 03                    2193 	inc	bc
      0002E2 23                    2194 	inc	hl
      0002E3 7E                    2195 	ld	a, (hl)
      0002E4 02                    2196 	ld	(bc), a
                                   2197 ;main.c:350: mch->y = y;
      0002E5 4B                    2198 	ld	c, e
      0002E6 42                    2199 	ld	b, d
      0002E7 03                    2200 	inc	bc
      0002E8 03                    2201 	inc	bc
      0002E9 23                    2202 	inc	hl
      0002EA 7E                    2203 	ld	a, (hl)
      0002EB 02                    2204 	ld	(bc), a
                                   2205 ;main.c:351: move_sprite(mch->oamtilenums[0], x, y);
      0002EC 7E                    2206 	ld	a, (hl)
      0002ED F8 00                 2207 	ldhl	sp,	#0
      0002EF 77                    2208 	ld	(hl), a
      0002F0 F8 08                 2209 	ldhl	sp,	#8
      0002F2 7E                    2210 	ld	a, (hl)
      0002F3 F8 01                 2211 	ldhl	sp,	#1
      0002F5 77                    2212 	ld	(hl), a
      0002F6 21 0D 00              2213 	ld	hl, #0x000d
      0002F9 19                    2214 	add	hl, de
                                   2215 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      0002FA 7E                    2216 	ld	a, (hl)
      0002FB 26 00                 2217 	ld	h, #0x00
      0002FD 6F                    2218 	ld	l, a
      0002FE 29                    2219 	add	hl, hl
      0002FF 29                    2220 	add	hl, hl
      000300 01r00r00              2221 	ld	bc, #_shadow_OAM
      000303 09                    2222 	add	hl, bc
      000304 4D                    2223 	ld	c, l
      000305 44                    2224 	ld	b, h
                                   2225 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      000306 F8 00                 2226 	ldhl	sp,	#0
      000308 2A                    2227 	ld	a, (hl+)
      000309 02                    2228 	ld	(bc), a
      00030A 03                    2229 	inc	bc
      00030B 7E                    2230 	ld	a, (hl)
      00030C 02                    2231 	ld	(bc), a
                                   2232 ;main.c:352: move_sprite(mch->oamtilenums[1], x + 8, y);
      00030D 7E                    2233 	ld	a, (hl)
      00030E C6 08                 2234 	add	a, #0x08
      000310 23                    2235 	inc	hl
      000311 77                    2236 	ld	(hl), a
      000312 2A                    2237 	ld	a, (hl+)
      000313 77                    2238 	ld	(hl), a
      000314 21 0E 00              2239 	ld	hl, #0x000e
      000317 19                    2240 	add	hl, de
                                   2241 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      000318 7E                    2242 	ld	a, (hl)
      000319 26 00                 2243 	ld	h, #0x00
      00031B 6F                    2244 	ld	l, a
      00031C 29                    2245 	add	hl, hl
      00031D 29                    2246 	add	hl, hl
      00031E 01r00r00              2247 	ld	bc, #_shadow_OAM
      000321 09                    2248 	add	hl, bc
      000322 4D                    2249 	ld	c, l
      000323 44                    2250 	ld	b, h
                                   2251 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      000324 F8 00                 2252 	ldhl	sp,	#0
      000326 7E                    2253 	ld	a, (hl)
      000327 02                    2254 	ld	(bc), a
      000328 03                    2255 	inc	bc
      000329 F8 03                 2256 	ldhl	sp,	#3
      00032B 7E                    2257 	ld	a, (hl)
      00032C 02                    2258 	ld	(bc), a
                                   2259 ;main.c:353: move_sprite(mch->oamtilenums[2], x, y + 8);
      00032D F8 00                 2260 	ldhl	sp,	#0
      00032F 7E                    2261 	ld	a, (hl)
      000330 C6 08                 2262 	add	a, #0x08
      000332 F8 03                 2263 	ldhl	sp,	#3
      000334 77                    2264 	ld	(hl), a
      000335 4E                    2265 	ld	c, (hl)
      000336 21 0F 00              2266 	ld	hl, #0x000f
      000339 19                    2267 	add	hl, de
                                   2268 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      00033A 6E                    2269 	ld	l, (hl)
      00033B 26 00                 2270 	ld	h, #0x00
      00033D 29                    2271 	add	hl, hl
      00033E 29                    2272 	add	hl, hl
      00033F 7D                    2273 	ld	a, l
      000340 C6r00                 2274 	add	a, #<(_shadow_OAM)
      000342 47                    2275 	ld	b, a
      000343 7C                    2276 	ld	a, h
      000344 CEs00                 2277 	adc	a, #>(_shadow_OAM)
      000346 68                    2278 	ld	l, b
      000347 67                    2279 	ld	h, a
                                   2280 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      000348 79                    2281 	ld	a, c
      000349 22                    2282 	ld	(hl+), a
      00034A 4D                    2283 	ld	c, l
      00034B 44                    2284 	ld	b, h
      00034C F8 01                 2285 	ldhl	sp,	#1
      00034E 7E                    2286 	ld	a, (hl)
      00034F 02                    2287 	ld	(bc), a
                                   2288 ;main.c:354: move_sprite(mch->oamtilenums[3], x + 8, y + 8);
      000350 21 10 00              2289 	ld	hl, #0x0010
      000353 19                    2290 	add	hl, de
      000354 5E                    2291 	ld	e, (hl)
                                   2292 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      000355 01r00r00              2293 	ld	bc, #_shadow_OAM+0
      000358 AF                    2294 	xor	a, a
      000359 6B                    2295 	ld	l, e
      00035A 67                    2296 	ld	h, a
      00035B 29                    2297 	add	hl, hl
      00035C 29                    2298 	add	hl, hl
      00035D 09                    2299 	add	hl, bc
      00035E 4D                    2300 	ld	c, l
      00035F 44                    2301 	ld	b, h
                                   2302 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      000360 F8 03                 2303 	ldhl	sp,	#3
      000362 7E                    2304 	ld	a, (hl)
      000363 02                    2305 	ld	(bc), a
      000364 03                    2306 	inc	bc
      000365 2B                    2307 	dec	hl
      000366 7E                    2308 	ld	a, (hl)
      000367 02                    2309 	ld	(bc), a
                                   2310 ;main.c:354: move_sprite(mch->oamtilenums[3], x + 8, y + 8);
                                   2311 ;main.c:355: }
      000368 E8 04                 2312 	add	sp, #4
      00036A C9                    2313 	ret
                                   2314 ;main.c:358: void init_player() {
                                   2315 ;	---------------------------------
                                   2316 ; Function init_player
                                   2317 ; ---------------------------------
      00036B                       2318 _init_player::
                                   2319 ;main.c:359: pl = machines; // First element of the array is the player
      00036B 21rC2r00              2320 	ld	hl, #_pl
      00036E 3Er5C                 2321 	ld	a, #<(_machines)
      000370 22                    2322 	ld	(hl+), a
                                   2323 ;main.c:360: pl->shield = 4;
      000371 3Es00                 2324 	ld	a, #>(_machines)
      000373 32                    2325 	ld	(hl-), a
      000374 2A                    2326 	ld	a, (hl+)
      000375 4F                    2327 	ld	c, a
      000376 46                    2328 	ld	b, (hl)
      000377 21 0B 00              2329 	ld	hl, #0x000b
      00037A 09                    2330 	add	hl, bc
      00037B 36 04                 2331 	ld	(hl), #0x04
                                   2332 ;main.c:361: pl->groundflg = 1;
      00037D 21rC3r00              2333 	ld	hl, #_pl + 1
      000380 2B                    2334 	dec	hl
      000381 2A                    2335 	ld	a, (hl+)
      000382 4F                    2336 	ld	c, a
      000383 46                    2337 	ld	b, (hl)
      000384 3E 01                 2338 	ld	a, #0x01
      000386 02                    2339 	ld	(bc), a
                                   2340 ;main.c:362: pl->hboffx = 3;
      000387 2B                    2341 	dec	hl
      000388 2A                    2342 	ld	a, (hl+)
      000389 4F                    2343 	ld	c, a
      00038A 46                    2344 	ld	b, (hl)
      00038B 03                    2345 	inc	bc
      00038C 03                    2346 	inc	bc
      00038D 03                    2347 	inc	bc
      00038E 78                    2348 	ld	a, b
      00038F 69                    2349 	ld	l, c
      000390 67                    2350 	ld	h, a
      000391 36 03                 2351 	ld	(hl), #0x03
                                   2352 ;main.c:363: pl->hboffy = 1;
      000393 21rC3r00              2353 	ld	hl, #_pl + 1
      000396 2B                    2354 	dec	hl
      000397 2A                    2355 	ld	a, (hl+)
      000398 4F                    2356 	ld	c, a
      000399 46                    2357 	ld	b, (hl)
      00039A 21 04 00              2358 	ld	hl, #0x0004
      00039D 09                    2359 	add	hl, bc
      00039E 36 01                 2360 	ld	(hl), #0x01
                                   2361 ;main.c:364: pl->width = 13;
      0003A0 21rC3r00              2362 	ld	hl, #_pl + 1
      0003A3 2B                    2363 	dec	hl
      0003A4 2A                    2364 	ld	a, (hl+)
      0003A5 4F                    2365 	ld	c, a
      0003A6 46                    2366 	ld	b, (hl)
      0003A7 21 05 00              2367 	ld	hl, #0x0005
      0003AA 09                    2368 	add	hl, bc
      0003AB 36 0D                 2369 	ld	(hl), #0x0d
                                   2370 ;main.c:365: pl->height = 15;
      0003AD 21rC3r00              2371 	ld	hl, #_pl + 1
      0003B0 2B                    2372 	dec	hl
      0003B1 2A                    2373 	ld	a, (hl+)
      0003B2 4F                    2374 	ld	c, a
      0003B3 46                    2375 	ld	b, (hl)
      0003B4 21 06 00              2376 	ld	hl, #0x0006
      0003B7 09                    2377 	add	hl, bc
      0003B8 36 0F                 2378 	ld	(hl), #0x0f
                                   2379 ;main.c:366: pl->gunoffx = 17;
      0003BA 21rC3r00              2380 	ld	hl, #_pl + 1
      0003BD 2B                    2381 	dec	hl
      0003BE 2A                    2382 	ld	a, (hl+)
      0003BF 4F                    2383 	ld	c, a
      0003C0 46                    2384 	ld	b, (hl)
      0003C1 21 09 00              2385 	ld	hl, #0x0009
      0003C4 09                    2386 	add	hl, bc
      0003C5 36 11                 2387 	ld	(hl), #0x11
                                   2388 ;main.c:367: pl->gunoffy = 12;
      0003C7 21rC3r00              2389 	ld	hl, #_pl + 1
      0003CA 2B                    2390 	dec	hl
      0003CB 2A                    2391 	ld	a, (hl+)
      0003CC 4F                    2392 	ld	c, a
      0003CD 46                    2393 	ld	b, (hl)
      0003CE 21 0A 00              2394 	ld	hl, #0x000a
      0003D1 09                    2395 	add	hl, bc
      0003D2 36 0C                 2396 	ld	(hl), #0x0c
                                   2397 ;main.c:368: pl->explcount = 0;
      0003D4 21rC3r00              2398 	ld	hl, #_pl + 1
      0003D7 2B                    2399 	dec	hl
      0003D8 2A                    2400 	ld	a, (hl+)
      0003D9 4F                    2401 	ld	c, a
      0003DA 46                    2402 	ld	b, (hl)
      0003DB 21 07 00              2403 	ld	hl, #0x0007
      0003DE 09                    2404 	add	hl, bc
      0003DF 36 00                 2405 	ld	(hl), #0x00
                                   2406 ;main.c:369: pl->cyccount = 0;
      0003E1 21rC3r00              2407 	ld	hl, #_pl + 1
      0003E4 2B                    2408 	dec	hl
      0003E5 2A                    2409 	ld	a, (hl+)
      0003E6 4F                    2410 	ld	c, a
      0003E7 46                    2411 	ld	b, (hl)
      0003E8 21 08 00              2412 	ld	hl, #0x0008
      0003EB 09                    2413 	add	hl, bc
      0003EC 36 00                 2414 	ld	(hl), #0x00
                                   2415 ;main.c:370: pl->oamtilenums[0] = 0;
      0003EE 21rC3r00              2416 	ld	hl, #_pl + 1
      0003F1 2B                    2417 	dec	hl
      0003F2 2A                    2418 	ld	a, (hl+)
      0003F3 4F                    2419 	ld	c, a
      0003F4 46                    2420 	ld	b, (hl)
      0003F5 21 0D 00              2421 	ld	hl, #0x000d
      0003F8 09                    2422 	add	hl, bc
      0003F9 36 00                 2423 	ld	(hl), #0x00
                                   2424 ;main.c:371: pl->oamtilenums[1] = 1;
      0003FB 21rC3r00              2425 	ld	hl, #_pl + 1
      0003FE 2B                    2426 	dec	hl
      0003FF 2A                    2427 	ld	a, (hl+)
      000400 4F                    2428 	ld	c, a
      000401 46                    2429 	ld	b, (hl)
      000402 21 0E 00              2430 	ld	hl, #0x000e
      000405 09                    2431 	add	hl, bc
      000406 36 01                 2432 	ld	(hl), #0x01
                                   2433 ;main.c:372: pl->oamtilenums[2] = 2;
      000408 21rC3r00              2434 	ld	hl, #_pl + 1
      00040B 2B                    2435 	dec	hl
      00040C 2A                    2436 	ld	a, (hl+)
      00040D 4F                    2437 	ld	c, a
      00040E 46                    2438 	ld	b, (hl)
      00040F 21 0F 00              2439 	ld	hl, #0x000f
      000412 09                    2440 	add	hl, bc
      000413 36 02                 2441 	ld	(hl), #0x02
                                   2442 ;main.c:373: pl->oamtilenums[3] = 3;
      000415 21rC3r00              2443 	ld	hl, #_pl + 1
      000418 2B                    2444 	dec	hl
      000419 2A                    2445 	ld	a, (hl+)
      00041A 4F                    2446 	ld	c, a
      00041B 46                    2447 	ld	b, (hl)
      00041C 21 10 00              2448 	ld	hl, #0x0010
      00041F 09                    2449 	add	hl, bc
      000420 36 03                 2450 	ld	(hl), #0x03
                                   2451 ;main.c:375: set_machine_sprite_tiles(pl, 1);
      000422 3E 01                 2452 	ld	a, #0x01
      000424 F5                    2453 	push	af
      000425 33                    2454 	inc	sp
      000426 21rC2r00              2455 	ld	hl, #_pl
      000429 2A                    2456 	ld	a, (hl+)
      00042A 66                    2457 	ld	h, (hl)
      00042B 6F                    2458 	ld	l, a
      00042C E5                    2459 	push	hl
      00042D CDr74r02              2460 	call	_set_machine_sprite_tiles
      000430 E8 03                 2461 	add	sp, #3
                                   2462 ;main.c:376: incr_oam_sprite_tile_idx(4);
      000432 3E 04                 2463 	ld	a, #0x04
      000434 F5                    2464 	push	af
      000435 33                    2465 	inc	sp
      000436 CDr39r01              2466 	call	_incr_oam_sprite_tile_idx
      000439 33                    2467 	inc	sp
                                   2468 ;main.c:377: place_machine(pl, 248, roadlanesy[1]);
      00043A FAr1Fr00              2469 	ld	a, (#(_roadlanesy + 0x0001) + 0)
      00043D 57                    2470 	ld	d,a
      00043E 1E F8                 2471 	ld	e,#0xf8
      000440 D5                    2472 	push	de
      000441 21rC2r00              2473 	ld	hl, #_pl
      000444 2A                    2474 	ld	a, (hl+)
      000445 66                    2475 	ld	h, (hl)
      000446 6F                    2476 	ld	l, a
      000447 E5                    2477 	push	hl
      000448 CDrD8r02              2478 	call	_place_machine
      00044B E8 04                 2479 	add	sp, #4
                                   2480 ;main.c:378: }
      00044D C9                    2481 	ret
                                   2482 ;main.c:381: void respawn_player() {
                                   2483 ;	---------------------------------
                                   2484 ; Function respawn_player
                                   2485 ; ---------------------------------
      00044E                       2486 _respawn_player::
                                   2487 ;main.c:382: pl->shield = 4;
      00044E 21rC3r00              2488 	ld	hl, #_pl + 1
      000451 2B                    2489 	dec	hl
      000452 2A                    2490 	ld	a, (hl+)
      000453 4F                    2491 	ld	c, a
      000454 46                    2492 	ld	b, (hl)
      000455 21 0B 00              2493 	ld	hl, #0x000b
      000458 09                    2494 	add	hl, bc
      000459 36 04                 2495 	ld	(hl), #0x04
                                   2496 ;main.c:383: pl->hboffx = 3;
      00045B 21rC3r00              2497 	ld	hl, #_pl + 1
      00045E 2B                    2498 	dec	hl
      00045F 2A                    2499 	ld	a, (hl+)
      000460 4F                    2500 	ld	c, a
      000461 46                    2501 	ld	b, (hl)
      000462 03                    2502 	inc	bc
      000463 03                    2503 	inc	bc
      000464 03                    2504 	inc	bc
      000465 78                    2505 	ld	a, b
      000466 69                    2506 	ld	l, c
      000467 67                    2507 	ld	h, a
      000468 36 03                 2508 	ld	(hl), #0x03
                                   2509 ;main.c:384: pl->hboffy = 1;
      00046A 21rC3r00              2510 	ld	hl, #_pl + 1
      00046D 2B                    2511 	dec	hl
      00046E 2A                    2512 	ld	a, (hl+)
      00046F 4F                    2513 	ld	c, a
      000470 46                    2514 	ld	b, (hl)
      000471 21 04 00              2515 	ld	hl, #0x0004
      000474 09                    2516 	add	hl, bc
      000475 36 01                 2517 	ld	(hl), #0x01
                                   2518 ;main.c:385: ascendflg = 1;
      000477 21rCDr00              2519 	ld	hl, #_ascendflg
      00047A 36 01                 2520 	ld	(hl), #0x01
                                   2521 ;main.c:386: hud_upd_shield(0, 4);
      00047C 3E 04                 2522 	ld	a, #0x04
      00047E F5                    2523 	push	af
      00047F 33                    2524 	inc	sp
      000480 AF                    2525 	xor	a, a
      000481 F5                    2526 	push	af
      000482 33                    2527 	inc	sp
      000483 CDr0Dr23              2528 	call	_hud_upd_shield
      000486 E8 02                 2529 	add	sp, #2
                                   2530 ;main.c:382: pl->shield = 4;
      000488 21rC3r00              2531 	ld	hl, #_pl + 1
      00048B 2B                    2532 	dec	hl
      00048C 2A                    2533 	ld	a, (hl+)
      00048D 4F                    2534 	ld	c, a
      00048E 46                    2535 	ld	b, (hl)
                                   2536 ;main.c:387: if(fallinholeflg) {
      00048F 21rCCr00              2537 	ld	hl, #_fallinholeflg
      000492 7E                    2538 	ld	a, (hl)
      000493 B7                    2539 	or	a, a
      000494 28 31                 2540 	jr	Z, 00102$
                                   2541 ;main.c:388: fallinholeflg = 0;
      000496 36 00                 2542 	ld	(hl), #0x00
                                   2543 ;main.c:389: pl->groundflg = 0;
      000498 AF                    2544 	xor	a, a
      000499 02                    2545 	ld	(bc), a
                                   2546 ;main.c:390: set_machine_sprite_tiles(pl, 13);
      00049A 3E 0D                 2547 	ld	a, #0x0d
      00049C F5                    2548 	push	af
      00049D 33                    2549 	inc	sp
      00049E 21rC2r00              2550 	ld	hl, #_pl
      0004A1 2A                    2551 	ld	a, (hl+)
      0004A2 66                    2552 	ld	h, (hl)
      0004A3 6F                    2553 	ld	l, a
      0004A4 E5                    2554 	push	hl
      0004A5 CDr74r02              2555 	call	_set_machine_sprite_tiles
      0004A8 E8 03                 2556 	add	sp, #3
                                   2557 ;main.c:391: place_machine(pl, 16, 64);
      0004AA 11 10 40              2558 	ld	de, #0x4010
      0004AD D5                    2559 	push	de
      0004AE 21rC2r00              2560 	ld	hl, #_pl
      0004B1 2A                    2561 	ld	a, (hl+)
      0004B2 66                    2562 	ld	h, (hl)
      0004B3 6F                    2563 	ld	l, a
      0004B4 E5                    2564 	push	hl
      0004B5 CDrD8r02              2565 	call	_place_machine
      0004B8 E8 04                 2566 	add	sp, #4
                                   2567 ;main.c:392: lockmvmnt = 2;
      0004BA 21rC9r00              2568 	ld	hl, #_lockmvmnt
      0004BD 36 02                 2569 	ld	(hl), #0x02
                                   2570 ;main.c:393: jumpstarty = roadlanesy[1];
      0004BF FAr1Fr00              2571 	ld	a, (#(_roadlanesy + 0x0001) + 0)
      0004C2 EArCEr00              2572 	ld	(#_jumpstarty),a
      0004C5 18 29                 2573 	jr	00103$
      0004C7                       2574 00102$:
                                   2575 ;main.c:395: pl->groundflg = 1;
                                   2576 ;main.c:396: set_machine_sprite_tiles(pl, 1);
      0004C7 3E 01                 2577 	ld	a,#0x01
      0004C9 02                    2578 	ld	(bc),a
      0004CA F5                    2579 	push	af
      0004CB 33                    2580 	inc	sp
      0004CC 21rC2r00              2581 	ld	hl, #_pl
      0004CF 2A                    2582 	ld	a, (hl+)
      0004D0 66                    2583 	ld	h, (hl)
      0004D1 6F                    2584 	ld	l, a
      0004D2 E5                    2585 	push	hl
      0004D3 CDr74r02              2586 	call	_set_machine_sprite_tiles
      0004D6 E8 03                 2587 	add	sp, #3
                                   2588 ;main.c:397: place_machine(pl, 16, roadlanesy[1]);
      0004D8 FAr1Fr00              2589 	ld	a, (#(_roadlanesy + 0x0001) + 0)
      0004DB 57                    2590 	ld	d,a
      0004DC 1E 10                 2591 	ld	e,#0x10
      0004DE D5                    2592 	push	de
      0004DF 21rC2r00              2593 	ld	hl, #_pl
      0004E2 2A                    2594 	ld	a, (hl+)
      0004E3 66                    2595 	ld	h, (hl)
      0004E4 6F                    2596 	ld	l, a
      0004E5 E5                    2597 	push	hl
      0004E6 CDrD8r02              2598 	call	_place_machine
      0004E9 E8 04                 2599 	add	sp, #4
                                   2600 ;main.c:398: lockmvmnt = 0;
      0004EB 21rC9r00              2601 	ld	hl, #_lockmvmnt
      0004EE 36 00                 2602 	ld	(hl), #0x00
      0004F0                       2603 00103$:
                                   2604 ;main.c:400: iframeflg = 1;
      0004F0 21rCBr00              2605 	ld	hl, #_iframeflg
      0004F3 36 01                 2606 	ld	(hl), #0x01
                                   2607 ;main.c:401: }
      0004F5 C9                    2608 	ret
                                   2609 ;main.c:407: void init_machine_props(UINT8 x, UINT8 y, const INT8 * mchprops) {
                                   2610 ;	---------------------------------
                                   2611 ; Function init_machine_props
                                   2612 ; ---------------------------------
      0004F6                       2613 _init_machine_props::
                                   2614 ;main.c:408: crntenemy->explcount = 0;
      0004F6 21rC5r00              2615 	ld	hl, #_crntenemy + 1
      0004F9 2B                    2616 	dec	hl
      0004FA 2A                    2617 	ld	a, (hl+)
      0004FB 4F                    2618 	ld	c, a
      0004FC 46                    2619 	ld	b, (hl)
      0004FD 21 07 00              2620 	ld	hl, #0x0007
      000500 09                    2621 	add	hl, bc
      000501 36 00                 2622 	ld	(hl), #0x00
                                   2623 ;main.c:409: crntenemy->cyccount = 0;
      000503 21rC5r00              2624 	ld	hl, #_crntenemy + 1
      000506 2B                    2625 	dec	hl
      000507 2A                    2626 	ld	a, (hl+)
      000508 4F                    2627 	ld	c, a
      000509 46                    2628 	ld	b, (hl)
      00050A 21 08 00              2629 	ld	hl, #0x0008
      00050D 09                    2630 	add	hl, bc
      00050E 36 00                 2631 	ld	(hl), #0x00
                                   2632 ;main.c:410: crntenemy->groundflg = mchprops[0];
      000510 21rC5r00              2633 	ld	hl, #_crntenemy + 1
      000513 2B                    2634 	dec	hl
      000514 2A                    2635 	ld	a, (hl+)
      000515 5F                    2636 	ld	e, a
      000516 56                    2637 	ld	d, (hl)
      000517 F8 04                 2638 	ldhl	sp,#4
      000519 2A                    2639 	ld	a, (hl+)
      00051A 4F                    2640 	ld	c, a
      00051B 46                    2641 	ld	b, (hl)
      00051C 0A                    2642 	ld	a, (bc)
      00051D 12                    2643 	ld	(de), a
                                   2644 ;main.c:411: crntenemy->shield = mchprops[1];
      00051E 21rC5r00              2645 	ld	hl, #_crntenemy + 1
      000521 2B                    2646 	dec	hl
      000522 2A                    2647 	ld	a, (hl+)
      000523 5F                    2648 	ld	e, a
      000524 56                    2649 	ld	d, (hl)
      000525 21 0B 00              2650 	ld	hl, #0x000b
      000528 19                    2651 	add	hl, de
      000529 59                    2652 	ld	e, c
      00052A 50                    2653 	ld	d, b
      00052B 13                    2654 	inc	de
      00052C 1A                    2655 	ld	a, (de)
      00052D 77                    2656 	ld	(hl), a
                                   2657 ;main.c:412: crntenemy->hboffx = mchprops[2];
      00052E 21rC5r00              2658 	ld	hl, #_crntenemy + 1
      000531 2B                    2659 	dec	hl
      000532 2A                    2660 	ld	a, (hl+)
      000533 5F                    2661 	ld	e, a
      000534 56                    2662 	ld	d, (hl)
      000535 13                    2663 	inc	de
      000536 13                    2664 	inc	de
      000537 13                    2665 	inc	de
      000538 69                    2666 	ld	l, c
      000539 60                    2667 	ld	h, b
      00053A 23                    2668 	inc	hl
      00053B 23                    2669 	inc	hl
      00053C 7E                    2670 	ld	a, (hl)
      00053D 12                    2671 	ld	(de), a
                                   2672 ;main.c:413: crntenemy->hboffy = mchprops[3];
      00053E 21rC5r00              2673 	ld	hl, #_crntenemy + 1
      000541 2B                    2674 	dec	hl
      000542 2A                    2675 	ld	a, (hl+)
      000543 5F                    2676 	ld	e, a
      000544 56                    2677 	ld	d, (hl)
      000545 13                    2678 	inc	de
      000546 13                    2679 	inc	de
      000547 13                    2680 	inc	de
      000548 13                    2681 	inc	de
      000549 69                    2682 	ld	l, c
      00054A 60                    2683 	ld	h, b
      00054B 23                    2684 	inc	hl
      00054C 23                    2685 	inc	hl
      00054D 23                    2686 	inc	hl
      00054E 7E                    2687 	ld	a, (hl)
      00054F 12                    2688 	ld	(de), a
                                   2689 ;main.c:414: crntenemy->width = mchprops[4];
      000550 21rC5r00              2690 	ld	hl, #_crntenemy + 1
      000553 2B                    2691 	dec	hl
      000554 2A                    2692 	ld	a, (hl+)
      000555 5F                    2693 	ld	e, a
      000556 56                    2694 	ld	d, (hl)
      000557 13                    2695 	inc	de
      000558 13                    2696 	inc	de
      000559 13                    2697 	inc	de
      00055A 13                    2698 	inc	de
      00055B 13                    2699 	inc	de
      00055C 21 04 00              2700 	ld	hl, #0x0004
      00055F 09                    2701 	add	hl, bc
      000560 7E                    2702 	ld	a, (hl)
      000561 12                    2703 	ld	(de), a
                                   2704 ;main.c:415: crntenemy->height = mchprops[5];
      000562 21rC5r00              2705 	ld	hl, #_crntenemy + 1
      000565 2B                    2706 	dec	hl
      000566 2A                    2707 	ld	a, (hl+)
      000567 5F                    2708 	ld	e, a
      000568 56                    2709 	ld	d, (hl)
      000569 21 06 00              2710 	ld	hl, #0x0006
      00056C 19                    2711 	add	hl, de
      00056D 5D                    2712 	ld	e, l
      00056E 54                    2713 	ld	d, h
      00056F 21 05 00              2714 	ld	hl, #0x0005
      000572 09                    2715 	add	hl, bc
      000573 7E                    2716 	ld	a, (hl)
      000574 12                    2717 	ld	(de), a
                                   2718 ;main.c:416: crntenemy->gunoffx = mchprops[6];
      000575 21rC5r00              2719 	ld	hl, #_crntenemy + 1
      000578 2B                    2720 	dec	hl
      000579 2A                    2721 	ld	a, (hl+)
      00057A 5F                    2722 	ld	e, a
      00057B 56                    2723 	ld	d, (hl)
      00057C 21 09 00              2724 	ld	hl, #0x0009
      00057F 19                    2725 	add	hl, de
      000580 5D                    2726 	ld	e, l
      000581 54                    2727 	ld	d, h
      000582 21 06 00              2728 	ld	hl, #0x0006
      000585 09                    2729 	add	hl, bc
      000586 7E                    2730 	ld	a, (hl)
      000587 12                    2731 	ld	(de), a
                                   2732 ;main.c:417: crntenemy->gunoffy = mchprops[7];
      000588 21rC5r00              2733 	ld	hl, #_crntenemy + 1
      00058B 2B                    2734 	dec	hl
      00058C 2A                    2735 	ld	a, (hl+)
      00058D 5F                    2736 	ld	e, a
      00058E 56                    2737 	ld	d, (hl)
      00058F 21 0A 00              2738 	ld	hl, #0x000a
      000592 19                    2739 	add	hl, de
      000593 5D                    2740 	ld	e, l
      000594 54                    2741 	ld	d, h
      000595 21 07 00              2742 	ld	hl, #0x0007
      000598 09                    2743 	add	hl, bc
      000599 7E                    2744 	ld	a, (hl)
      00059A 12                    2745 	ld	(de), a
                                   2746 ;main.c:418: crntenemy->type = mchprops[8];
      00059B 21rC5r00              2747 	ld	hl, #_crntenemy + 1
      00059E 2B                    2748 	dec	hl
      00059F 2A                    2749 	ld	a, (hl+)
      0005A0 5F                    2750 	ld	e, a
      0005A1 56                    2751 	ld	d, (hl)
      0005A2 21 0C 00              2752 	ld	hl, #0x000c
      0005A5 19                    2753 	add	hl, de
      0005A6 5D                    2754 	ld	e, l
      0005A7 54                    2755 	ld	d, h
      0005A8 21 08 00              2756 	ld	hl, #0x0008
      0005AB 09                    2757 	add	hl, bc
      0005AC 7E                    2758 	ld	a, (hl)
      0005AD 12                    2759 	ld	(de), a
                                   2760 ;main.c:419: for(i = 0; i < 4; i++) {
      0005AE 21r0Dr00              2761 	ld	hl, #_i
      0005B1 36 00                 2762 	ld	(hl), #0x00
      0005B3                       2763 00103$:
                                   2764 ;main.c:420: crntenemy->oamtilenums[i] = oamidx;
      0005B3 21rC5r00              2765 	ld	hl, #_crntenemy + 1
      0005B6 2B                    2766 	dec	hl
      0005B7 2A                    2767 	ld	a, (hl+)
      0005B8 5F                    2768 	ld	e, a
      0005B9 56                    2769 	ld	d, (hl)
      0005BA 21 0D 00              2770 	ld	hl, #0x000d
      0005BD 19                    2771 	add	hl, de
      0005BE 5D                    2772 	ld	e, l
      0005BF 54                    2773 	ld	d, h
      0005C0 FAr0Dr00              2774 	ld	a, (#_i)
      0005C3 83                    2775 	add	a, e
      0005C4 5F                    2776 	ld	e, a
      0005C5 3E 00                 2777 	ld	a, #0x00
      0005C7 8A                    2778 	adc	a, d
      0005C8 57                    2779 	ld	d, a
      0005C9 FAr14r00              2780 	ld	a, (#_oamidx)
      0005CC 12                    2781 	ld	(de), a
                                   2782 ;main.c:421: incr_oam_sprite_tile_idx(1);
      0005CD C5                    2783 	push	bc
      0005CE 3E 01                 2784 	ld	a, #0x01
      0005D0 F5                    2785 	push	af
      0005D1 33                    2786 	inc	sp
      0005D2 CDr39r01              2787 	call	_incr_oam_sprite_tile_idx
      0005D5 33                    2788 	inc	sp
      0005D6 C1                    2789 	pop	bc
                                   2790 ;main.c:419: for(i = 0; i < 4; i++) {
      0005D7 21r0Dr00              2791 	ld	hl, #_i
      0005DA 34                    2792 	inc	(hl)
      0005DB 7E                    2793 	ld	a, (hl)
      0005DC D6 04                 2794 	sub	a, #0x04
      0005DE 38 D3                 2795 	jr	C, 00103$
                                   2796 ;main.c:423: set_machine_sprite_tiles(crntenemy, mchprops[9]);
      0005E0 21 09 00              2797 	ld	hl, #0x0009
      0005E3 09                    2798 	add	hl, bc
      0005E4 7E                    2799 	ld	a, (hl)
      0005E5 F5                    2800 	push	af
      0005E6 33                    2801 	inc	sp
      0005E7 21rC4r00              2802 	ld	hl, #_crntenemy
      0005EA 2A                    2803 	ld	a, (hl+)
      0005EB 66                    2804 	ld	h, (hl)
      0005EC 6F                    2805 	ld	l, a
      0005ED E5                    2806 	push	hl
      0005EE CDr74r02              2807 	call	_set_machine_sprite_tiles
      0005F1 E8 03                 2808 	add	sp, #3
                                   2809 ;main.c:424: place_machine(crntenemy, x, y);
      0005F3 F8 03                 2810 	ldhl	sp,	#3
      0005F5 7E                    2811 	ld	a, (hl)
      0005F6 F5                    2812 	push	af
      0005F7 33                    2813 	inc	sp
      0005F8 2B                    2814 	dec	hl
      0005F9 7E                    2815 	ld	a, (hl)
      0005FA F5                    2816 	push	af
      0005FB 33                    2817 	inc	sp
      0005FC 21rC4r00              2818 	ld	hl, #_crntenemy
      0005FF 2A                    2819 	ld	a, (hl+)
      000600 66                    2820 	ld	h, (hl)
      000601 6F                    2821 	ld	l, a
      000602 E5                    2822 	push	hl
      000603 CDrD8r02              2823 	call	_place_machine
      000606 E8 04                 2824 	add	sp, #4
                                   2825 ;main.c:283: crntenemy = crntenemy == machines + enlimit ? machines + 1 : crntenemy + 1;
      000608 21rCFr00              2826 	ld	hl, #_enlimit
      00060B 4E                    2827 	ld	c, (hl)
      00060C 06 00                 2828 	ld	b, #0x00
      00060E 69                    2829 	ld	l, c
      00060F 60                    2830 	ld	h, b
      000610 29                    2831 	add	hl, hl
      000611 29                    2832 	add	hl, hl
      000612 29                    2833 	add	hl, hl
      000613 29                    2834 	add	hl, hl
      000614 09                    2835 	add	hl, bc
      000615 11r5Cr00              2836 	ld	de, #_machines
      000618 19                    2837 	add	hl, de
      000619 4D                    2838 	ld	c, l
      00061A 44                    2839 	ld	b, h
      00061B 21rC4r00              2840 	ld	hl, #_crntenemy
      00061E 7E                    2841 	ld	a, (hl)
      00061F 91                    2842 	sub	a, c
      000620 20 0A                 2843 	jr	NZ, 00107$
      000622 23                    2844 	inc	hl
      000623 7E                    2845 	ld	a, (hl)
      000624 90                    2846 	sub	a, b
      000625 20 05                 2847 	jr	NZ, 00107$
      000627 01r6Dr00              2848 	ld	bc, #_machines + 17
      00062A 18 0C                 2849 	jr	00108$
      00062C                       2850 00107$:
      00062C 21rC4r00              2851 	ld	hl, #_crntenemy
      00062F 7E                    2852 	ld	a, (hl)
      000630 C6 11                 2853 	add	a, #0x11
      000632 4F                    2854 	ld	c, a
      000633 23                    2855 	inc	hl
      000634 7E                    2856 	ld	a, (hl)
      000635 CE 00                 2857 	adc	a, #0x00
      000637 47                    2858 	ld	b, a
      000638                       2859 00108$:
      000638 21rC4r00              2860 	ld	hl, #_crntenemy
      00063B 79                    2861 	ld	a, c
      00063C 22                    2862 	ld	(hl+), a
      00063D 70                    2863 	ld	(hl), b
                                   2864 ;main.c:425: itr_enemies_ptr();
                                   2865 ;main.c:426: }
      00063E C9                    2866 	ret
                                   2867 ;main.c:431: void init_scorpboss_gun(UINT8 x, UINT8 y) {
                                   2868 ;	---------------------------------
                                   2869 ; Function init_scorpboss_gun
                                   2870 ; ---------------------------------
      00063F                       2871 _init_scorpboss_gun::
                                   2872 ;main.c:432: crntenemy->groundflg = 1;
      00063F 21rC5r00              2873 	ld	hl, #_crntenemy + 1
      000642 2B                    2874 	dec	hl
      000643 2A                    2875 	ld	a, (hl+)
      000644 4F                    2876 	ld	c, a
      000645 46                    2877 	ld	b, (hl)
      000646 3E 01                 2878 	ld	a, #0x01
      000648 02                    2879 	ld	(bc), a
                                   2880 ;main.c:433: crntenemy->shield = 10;
      000649 2B                    2881 	dec	hl
      00064A 4E                    2882 	ld	c, (hl)
      00064B 23                    2883 	inc	hl
      00064C 46                    2884 	ld	b, (hl)
      00064D 21 0B 00              2885 	ld	hl, #0x000b
      000650 09                    2886 	add	hl, bc
      000651 36 0A                 2887 	ld	(hl), #0x0a
                                   2888 ;main.c:434: crntenemy->hboffx = 1;
      000653 21rC5r00              2889 	ld	hl, #_crntenemy + 1
      000656 2B                    2890 	dec	hl
      000657 2A                    2891 	ld	a, (hl+)
      000658 4F                    2892 	ld	c, a
      000659 46                    2893 	ld	b, (hl)
      00065A 03                    2894 	inc	bc
      00065B 03                    2895 	inc	bc
      00065C 03                    2896 	inc	bc
      00065D 78                    2897 	ld	a, b
      00065E 69                    2898 	ld	l, c
      00065F 67                    2899 	ld	h, a
      000660 36 01                 2900 	ld	(hl), #0x01
                                   2901 ;main.c:435: crntenemy->hboffy = 0;
      000662 21rC5r00              2902 	ld	hl, #_crntenemy + 1
      000665 2B                    2903 	dec	hl
      000666 2A                    2904 	ld	a, (hl+)
      000667 4F                    2905 	ld	c, a
      000668 46                    2906 	ld	b, (hl)
      000669 03                    2907 	inc	bc
      00066A 03                    2908 	inc	bc
      00066B 03                    2909 	inc	bc
      00066C 03                    2910 	inc	bc
      00066D AF                    2911 	xor	a, a
      00066E 02                    2912 	ld	(bc), a
                                   2913 ;main.c:436: crntenemy->gunoffx = -3;
      00066F 2B                    2914 	dec	hl
      000670 2A                    2915 	ld	a, (hl+)
      000671 4F                    2916 	ld	c, a
      000672 46                    2917 	ld	b, (hl)
      000673 21 09 00              2918 	ld	hl, #0x0009
      000676 09                    2919 	add	hl, bc
      000677 36 FD                 2920 	ld	(hl), #0xfd
                                   2921 ;main.c:437: crntenemy->gunoffy = 1;
      000679 21rC5r00              2922 	ld	hl, #_crntenemy + 1
      00067C 2B                    2923 	dec	hl
      00067D 2A                    2924 	ld	a, (hl+)
      00067E 4F                    2925 	ld	c, a
      00067F 46                    2926 	ld	b, (hl)
      000680 21 0A 00              2927 	ld	hl, #0x000a
      000683 09                    2928 	add	hl, bc
      000684 36 01                 2929 	ld	(hl), #0x01
                                   2930 ;main.c:438: crntenemy->width = 8;
      000686 21rC5r00              2931 	ld	hl, #_crntenemy + 1
      000689 2B                    2932 	dec	hl
      00068A 2A                    2933 	ld	a, (hl+)
      00068B 4F                    2934 	ld	c, a
      00068C 46                    2935 	ld	b, (hl)
      00068D 21 05 00              2936 	ld	hl, #0x0005
      000690 09                    2937 	add	hl, bc
      000691 36 08                 2938 	ld	(hl), #0x08
                                   2939 ;main.c:439: crntenemy->height = 8;
      000693 21rC5r00              2940 	ld	hl, #_crntenemy + 1
      000696 2B                    2941 	dec	hl
      000697 2A                    2942 	ld	a, (hl+)
      000698 4F                    2943 	ld	c, a
      000699 46                    2944 	ld	b, (hl)
      00069A 21 06 00              2945 	ld	hl, #0x0006
      00069D 09                    2946 	add	hl, bc
      00069E 36 08                 2947 	ld	(hl), #0x08
                                   2948 ;main.c:440: crntenemy->type = 6;
      0006A0 21rC5r00              2949 	ld	hl, #_crntenemy + 1
      0006A3 2B                    2950 	dec	hl
      0006A4 2A                    2951 	ld	a, (hl+)
      0006A5 4F                    2952 	ld	c, a
      0006A6 46                    2953 	ld	b, (hl)
      0006A7 21 0C 00              2954 	ld	hl, #0x000c
      0006AA 09                    2955 	add	hl, bc
      0006AB 36 06                 2956 	ld	(hl), #0x06
                                   2957 ;main.c:441: for(i = 0; i < 4; i++) {
      0006AD 21r0Dr00              2958 	ld	hl, #_i
      0006B0 36 00                 2959 	ld	(hl), #0x00
      0006B2                       2960 00104$:
                                   2961 ;main.c:442: crntenemy->oamtilenums[i] = oamidx;
      0006B2 21rC4r00              2962 	ld	hl, #_crntenemy
      0006B5 2A                    2963 	ld	a, (hl+)
      0006B6 5F                    2964 	ld	e, a
      0006B7 46                    2965 	ld	b, (hl)
      0006B8 7B                    2966 	ld	a, e
      0006B9 C6 0D                 2967 	add	a, #0x0d
      0006BB 4F                    2968 	ld	c, a
      0006BC 30 01                 2969 	jr	NC, 00125$
      0006BE 04                    2970 	inc	b
      0006BF                       2971 00125$:
      0006BF FAr0Dr00              2972 	ld	a, (#_i)
      0006C2 81                    2973 	add	a, c
      0006C3 4F                    2974 	ld	c, a
      0006C4 3E 00                 2975 	ld	a, #0x00
      0006C6 88                    2976 	adc	a, b
      0006C7 47                    2977 	ld	b, a
      0006C8 FAr14r00              2978 	ld	a, (#_oamidx)
      0006CB 02                    2979 	ld	(bc), a
                                   2980 ;main.c:443: incr_oam_sprite_tile_idx(1);
      0006CC 3E 01                 2981 	ld	a, #0x01
      0006CE F5                    2982 	push	af
      0006CF 33                    2983 	inc	sp
      0006D0 CDr39r01              2984 	call	_incr_oam_sprite_tile_idx
      0006D3 33                    2985 	inc	sp
                                   2986 ;main.c:441: for(i = 0; i < 4; i++) {
      0006D4 21r0Dr00              2987 	ld	hl, #_i
      0006D7 34                    2988 	inc	(hl)
      0006D8 7E                    2989 	ld	a, (hl)
      0006D9 D6 04                 2990 	sub	a, #0x04
      0006DB 38 D5                 2991 	jr	C, 00104$
                                   2992 ;main.c:445: set_machine_tile(crntenemy, 127);   // Last tile is blank => won't be used for bullets accidently
      0006DD 3E 7F                 2993 	ld	a, #0x7f
      0006DF F5                    2994 	push	af
      0006E0 33                    2995 	inc	sp
      0006E1 21rC4r00              2996 	ld	hl, #_crntenemy
      0006E4 2A                    2997 	ld	a, (hl+)
      0006E5 66                    2998 	ld	h, (hl)
      0006E6 6F                    2999 	ld	l, a
      0006E7 E5                    3000 	push	hl
      0006E8 CDr22r02              3001 	call	_set_machine_tile
      0006EB E8 03                 3002 	add	sp, #3
                                   3003 ;main.c:446: set_sprite_tile(crntenemy->oamtilenums[0], 22);
      0006ED 21rC5r00              3004 	ld	hl, #_crntenemy + 1
      0006F0 2B                    3005 	dec	hl
      0006F1 2A                    3006 	ld	a, (hl+)
      0006F2 4F                    3007 	ld	c, a
      0006F3 46                    3008 	ld	b, (hl)
      0006F4 21 0D 00              3009 	ld	hl, #0x000d
      0006F7 09                    3010 	add	hl, bc
      0006F8 5E                    3011 	ld	e, (hl)
                                   3012 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      0006F9 01r00r00              3013 	ld	bc, #_shadow_OAM+0
      0006FC AF                    3014 	xor	a, a
      0006FD 6B                    3015 	ld	l, e
      0006FE 67                    3016 	ld	h, a
      0006FF 29                    3017 	add	hl, hl
      000700 29                    3018 	add	hl, hl
      000701 09                    3019 	add	hl, bc
      000702 23                    3020 	inc	hl
      000703 23                    3021 	inc	hl
      000704 36 16                 3022 	ld	(hl), #0x16
                                   3023 ;main.c:447: place_machine(crntenemy, x, y);
      000706 F8 03                 3024 	ldhl	sp,	#3
      000708 7E                    3025 	ld	a, (hl)
      000709 F5                    3026 	push	af
      00070A 33                    3027 	inc	sp
      00070B 2B                    3028 	dec	hl
      00070C 7E                    3029 	ld	a, (hl)
      00070D F5                    3030 	push	af
      00070E 33                    3031 	inc	sp
      00070F 21rC4r00              3032 	ld	hl, #_crntenemy
      000712 2A                    3033 	ld	a, (hl+)
      000713 66                    3034 	ld	h, (hl)
      000714 6F                    3035 	ld	l, a
      000715 E5                    3036 	push	hl
      000716 CDrD8r02              3037 	call	_place_machine
      000719 E8 04                 3038 	add	sp, #4
                                   3039 ;main.c:283: crntenemy = crntenemy == machines + enlimit ? machines + 1 : crntenemy + 1;
      00071B 21rCFr00              3040 	ld	hl, #_enlimit
      00071E 4E                    3041 	ld	c, (hl)
      00071F 06 00                 3042 	ld	b, #0x00
      000721 69                    3043 	ld	l, c
      000722 60                    3044 	ld	h, b
      000723 29                    3045 	add	hl, hl
      000724 29                    3046 	add	hl, hl
      000725 29                    3047 	add	hl, hl
      000726 29                    3048 	add	hl, hl
      000727 09                    3049 	add	hl, bc
      000728 11r5Cr00              3050 	ld	de, #_machines
      00072B 19                    3051 	add	hl, de
      00072C 4D                    3052 	ld	c, l
      00072D 44                    3053 	ld	b, h
      00072E 21rC4r00              3054 	ld	hl, #_crntenemy
      000731 7E                    3055 	ld	a, (hl)
      000732 91                    3056 	sub	a, c
      000733 20 0A                 3057 	jr	NZ, 00108$
      000735 23                    3058 	inc	hl
      000736 7E                    3059 	ld	a, (hl)
      000737 90                    3060 	sub	a, b
      000738 20 05                 3061 	jr	NZ, 00108$
      00073A 01r6Dr00              3062 	ld	bc, #_machines + 17
      00073D 18 0C                 3063 	jr	00109$
      00073F                       3064 00108$:
      00073F 21rC4r00              3065 	ld	hl, #_crntenemy
      000742 7E                    3066 	ld	a, (hl)
      000743 C6 11                 3067 	add	a, #0x11
      000745 4F                    3068 	ld	c, a
      000746 23                    3069 	inc	hl
      000747 7E                    3070 	ld	a, (hl)
      000748 CE 00                 3071 	adc	a, #0x00
      00074A 47                    3072 	ld	b, a
      00074B                       3073 00109$:
      00074B 21rC4r00              3074 	ld	hl, #_crntenemy
      00074E 79                    3075 	ld	a, c
      00074F 22                    3076 	ld	(hl+), a
      000750 70                    3077 	ld	(hl), b
                                   3078 ;main.c:448: itr_enemies_ptr();
                                   3079 ;main.c:449: }
      000751 C9                    3080 	ret
                                   3081 ;main.c:452: void init_scorpboss() {
                                   3082 ;	---------------------------------
                                   3083 ; Function init_scorpboss
                                   3084 ; ---------------------------------
      000752                       3085 _init_scorpboss::
                                   3086 ;main.c:453: set_bkg_data(100, 40, scorpbosstiles);
      000752 21r00r00              3087 	ld	hl, #_scorpbosstiles
      000755 E5                    3088 	push	hl
      000756 11 64 28              3089 	ld	de, #0x2864
      000759 D5                    3090 	push	de
      00075A CDr00r00              3091 	call	_set_bkg_data
      00075D E8 04                 3092 	add	sp, #4
                                   3093 ;main.c:454: set_bkg_tiles(11, 10, 9, 6, scorpbossmap);
      00075F 21r00r00              3094 	ld	hl, #_scorpbossmap
      000762 E5                    3095 	push	hl
      000763 11 09 06              3096 	ld	de, #0x0609
      000766 D5                    3097 	push	de
      000767 11 0B 0A              3098 	ld	de, #0x0a0b
      00076A D5                    3099 	push	de
      00076B CDr00r00              3100 	call	_set_bkg_tiles
      00076E E8 06                 3101 	add	sp, #6
                                   3102 ;main.c:455: set_sprite_data(20, 8, bossspritetiles);
      000770 21r00r00              3103 	ld	hl, #_bossspritetiles
      000773 E5                    3104 	push	hl
      000774 11 14 08              3105 	ld	de, #0x0814
      000777 D5                    3106 	push	de
      000778 CDr00r00              3107 	call	_set_sprite_data
      00077B E8 04                 3108 	add	sp, #4
                                   3109 ;main.c:458: crntenemy->groundflg = 1;
      00077D 21rC5r00              3110 	ld	hl, #_crntenemy + 1
      000780 2B                    3111 	dec	hl
      000781 2A                    3112 	ld	a, (hl+)
      000782 4F                    3113 	ld	c, a
      000783 46                    3114 	ld	b, (hl)
      000784 3E 01                 3115 	ld	a, #0x01
      000786 02                    3116 	ld	(bc), a
                                   3117 ;main.c:459: crntenemy->shield = 10;
      000787 2B                    3118 	dec	hl
      000788 4E                    3119 	ld	c, (hl)
      000789 23                    3120 	inc	hl
      00078A 46                    3121 	ld	b, (hl)
      00078B 21 0B 00              3122 	ld	hl, #0x000b
      00078E 09                    3123 	add	hl, bc
      00078F 36 0A                 3124 	ld	(hl), #0x0a
                                   3125 ;main.c:460: crntenemy->hboffx = 1;
      000791 21rC5r00              3126 	ld	hl, #_crntenemy + 1
      000794 2B                    3127 	dec	hl
      000795 2A                    3128 	ld	a, (hl+)
      000796 4F                    3129 	ld	c, a
      000797 46                    3130 	ld	b, (hl)
      000798 03                    3131 	inc	bc
      000799 03                    3132 	inc	bc
      00079A 03                    3133 	inc	bc
      00079B 78                    3134 	ld	a, b
      00079C 69                    3135 	ld	l, c
      00079D 67                    3136 	ld	h, a
      00079E 36 01                 3137 	ld	(hl), #0x01
                                   3138 ;main.c:461: crntenemy->hboffy = 0;
      0007A0 21rC5r00              3139 	ld	hl, #_crntenemy + 1
      0007A3 2B                    3140 	dec	hl
      0007A4 2A                    3141 	ld	a, (hl+)
      0007A5 4F                    3142 	ld	c, a
      0007A6 46                    3143 	ld	b, (hl)
      0007A7 03                    3144 	inc	bc
      0007A8 03                    3145 	inc	bc
      0007A9 03                    3146 	inc	bc
      0007AA 03                    3147 	inc	bc
      0007AB AF                    3148 	xor	a, a
      0007AC 02                    3149 	ld	(bc), a
                                   3150 ;main.c:462: crntenemy->width = 8;
      0007AD 2B                    3151 	dec	hl
      0007AE 2A                    3152 	ld	a, (hl+)
      0007AF 4F                    3153 	ld	c, a
      0007B0 46                    3154 	ld	b, (hl)
      0007B1 21 05 00              3155 	ld	hl, #0x0005
      0007B4 09                    3156 	add	hl, bc
      0007B5 36 08                 3157 	ld	(hl), #0x08
                                   3158 ;main.c:463: crntenemy->height = 13;
      0007B7 21rC5r00              3159 	ld	hl, #_crntenemy + 1
      0007BA 2B                    3160 	dec	hl
      0007BB 2A                    3161 	ld	a, (hl+)
      0007BC 4F                    3162 	ld	c, a
      0007BD 46                    3163 	ld	b, (hl)
      0007BE 21 06 00              3164 	ld	hl, #0x0006
      0007C1 09                    3165 	add	hl, bc
      0007C2 36 0D                 3166 	ld	(hl), #0x0d
                                   3167 ;main.c:464: crntenemy->type = 6;
      0007C4 21rC5r00              3168 	ld	hl, #_crntenemy + 1
      0007C7 2B                    3169 	dec	hl
      0007C8 2A                    3170 	ld	a, (hl+)
      0007C9 4F                    3171 	ld	c, a
      0007CA 46                    3172 	ld	b, (hl)
      0007CB 21 0C 00              3173 	ld	hl, #0x000c
      0007CE 09                    3174 	add	hl, bc
      0007CF 36 06                 3175 	ld	(hl), #0x06
                                   3176 ;main.c:465: for(i = 0; i < 4; i++) {
      0007D1 21r0Dr00              3177 	ld	hl, #_i
      0007D4 36 00                 3178 	ld	(hl), #0x00
      0007D6                       3179 00105$:
                                   3180 ;main.c:466: crntenemy->oamtilenums[i] = oamidx;
      0007D6 21rC4r00              3181 	ld	hl, #_crntenemy
      0007D9 2A                    3182 	ld	a, (hl+)
      0007DA 5F                    3183 	ld	e, a
      0007DB 46                    3184 	ld	b, (hl)
      0007DC 7B                    3185 	ld	a, e
      0007DD C6 0D                 3186 	add	a, #0x0d
      0007DF 4F                    3187 	ld	c, a
      0007E0 30 01                 3188 	jr	NC, 00126$
      0007E2 04                    3189 	inc	b
      0007E3                       3190 00126$:
      0007E3 FAr0Dr00              3191 	ld	a, (#_i)
      0007E6 81                    3192 	add	a, c
      0007E7 4F                    3193 	ld	c, a
      0007E8 3E 00                 3194 	ld	a, #0x00
      0007EA 88                    3195 	adc	a, b
      0007EB 47                    3196 	ld	b, a
      0007EC FAr14r00              3197 	ld	a, (#_oamidx)
      0007EF 02                    3198 	ld	(bc), a
                                   3199 ;main.c:467: incr_oam_sprite_tile_idx(1);
      0007F0 3E 01                 3200 	ld	a, #0x01
      0007F2 F5                    3201 	push	af
      0007F3 33                    3202 	inc	sp
      0007F4 CDr39r01              3203 	call	_incr_oam_sprite_tile_idx
      0007F7 33                    3204 	inc	sp
                                   3205 ;main.c:465: for(i = 0; i < 4; i++) {
      0007F8 21r0Dr00              3206 	ld	hl, #_i
      0007FB 34                    3207 	inc	(hl)
      0007FC 7E                    3208 	ld	a, (hl)
      0007FD D6 04                 3209 	sub	a, #0x04
      0007FF 38 D5                 3210 	jr	C, 00105$
                                   3211 ;main.c:469: set_machine_tile(crntenemy, 127);   // Last tile is blank => won't be used for bullets accidently
      000801 3E 7F                 3212 	ld	a, #0x7f
      000803 F5                    3213 	push	af
      000804 33                    3214 	inc	sp
      000805 21rC4r00              3215 	ld	hl, #_crntenemy
      000808 2A                    3216 	ld	a, (hl+)
      000809 66                    3217 	ld	h, (hl)
      00080A 6F                    3218 	ld	l, a
      00080B E5                    3219 	push	hl
      00080C CDr22r02              3220 	call	_set_machine_tile
      00080F E8 03                 3221 	add	sp, #3
                                   3222 ;main.c:470: set_sprite_tile(crntenemy->oamtilenums[0], 20);
      000811 21rC5r00              3223 	ld	hl, #_crntenemy + 1
      000814 2B                    3224 	dec	hl
      000815 2A                    3225 	ld	a, (hl+)
      000816 4F                    3226 	ld	c, a
      000817 46                    3227 	ld	b, (hl)
      000818 21 0D 00              3228 	ld	hl, #0x000d
      00081B 09                    3229 	add	hl, bc
      00081C 5E                    3230 	ld	e, (hl)
                                   3231 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      00081D 01r00r00              3232 	ld	bc, #_shadow_OAM+0
      000820 AF                    3233 	xor	a, a
      000821 6B                    3234 	ld	l, e
      000822 67                    3235 	ld	h, a
      000823 29                    3236 	add	hl, hl
      000824 29                    3237 	add	hl, hl
      000825 09                    3238 	add	hl, bc
      000826 23                    3239 	inc	hl
      000827 23                    3240 	inc	hl
      000828 36 14                 3241 	ld	(hl), #0x14
                                   3242 ;main.c:471: set_sprite_tile(crntenemy->oamtilenums[2], 21);
      00082A 21rC5r00              3243 	ld	hl, #_crntenemy + 1
      00082D 2B                    3244 	dec	hl
      00082E 2A                    3245 	ld	a, (hl+)
      00082F 4F                    3246 	ld	c, a
      000830 46                    3247 	ld	b, (hl)
      000831 21 0F 00              3248 	ld	hl, #0x000f
      000834 09                    3249 	add	hl, bc
      000835 5E                    3250 	ld	e, (hl)
                                   3251 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      000836 01r00r00              3252 	ld	bc, #_shadow_OAM+0
      000839 AF                    3253 	xor	a, a
      00083A 6B                    3254 	ld	l, e
      00083B 67                    3255 	ld	h, a
      00083C 29                    3256 	add	hl, hl
      00083D 29                    3257 	add	hl, hl
      00083E 09                    3258 	add	hl, bc
      00083F 23                    3259 	inc	hl
      000840 23                    3260 	inc	hl
      000841 36 15                 3261 	ld	(hl), #0x15
                                   3262 ;main.c:472: place_machine(crntenemy, 121, 96);
      000843 11 79 60              3263 	ld	de, #0x6079
      000846 D5                    3264 	push	de
      000847 21rC4r00              3265 	ld	hl, #_crntenemy
      00084A 2A                    3266 	ld	a, (hl+)
      00084B 66                    3267 	ld	h, (hl)
      00084C 6F                    3268 	ld	l, a
      00084D E5                    3269 	push	hl
      00084E CDrD8r02              3270 	call	_place_machine
      000851 E8 04                 3271 	add	sp, #4
                                   3272 ;main.c:283: crntenemy = crntenemy == machines + enlimit ? machines + 1 : crntenemy + 1;
      000853 21rCFr00              3273 	ld	hl, #_enlimit
      000856 4E                    3274 	ld	c, (hl)
      000857 06 00                 3275 	ld	b, #0x00
      000859 69                    3276 	ld	l, c
      00085A 60                    3277 	ld	h, b
      00085B 29                    3278 	add	hl, hl
      00085C 29                    3279 	add	hl, hl
      00085D 29                    3280 	add	hl, hl
      00085E 29                    3281 	add	hl, hl
      00085F 09                    3282 	add	hl, bc
      000860 11r5Cr00              3283 	ld	de, #_machines
      000863 19                    3284 	add	hl, de
      000864 4D                    3285 	ld	c, l
      000865 44                    3286 	ld	b, h
      000866 21rC4r00              3287 	ld	hl, #_crntenemy
      000869 7E                    3288 	ld	a, (hl)
      00086A 91                    3289 	sub	a, c
      00086B 20 0A                 3290 	jr	NZ, 00109$
      00086D 23                    3291 	inc	hl
      00086E 7E                    3292 	ld	a, (hl)
      00086F 90                    3293 	sub	a, b
      000870 20 05                 3294 	jr	NZ, 00109$
      000872 01r6Dr00              3295 	ld	bc, #_machines + 17
      000875 18 0C                 3296 	jr	00110$
      000877                       3297 00109$:
      000877 21rC4r00              3298 	ld	hl, #_crntenemy
      00087A 7E                    3299 	ld	a, (hl)
      00087B C6 11                 3300 	add	a, #0x11
      00087D 4F                    3301 	ld	c, a
      00087E 23                    3302 	inc	hl
      00087F 7E                    3303 	ld	a, (hl)
      000880 CE 00                 3304 	adc	a, #0x00
      000882 47                    3305 	ld	b, a
      000883                       3306 00110$:
      000883 21rC4r00              3307 	ld	hl, #_crntenemy
      000886 79                    3308 	ld	a, c
      000887 22                    3309 	ld	(hl+), a
      000888 70                    3310 	ld	(hl), b
                                   3311 ;main.c:476: init_scorpboss_gun(100, 105);
      000889 11 64 69              3312 	ld	de, #0x6964
      00088C D5                    3313 	push	de
      00088D CDr3Fr06              3314 	call	_init_scorpboss_gun
      000890 E8 02                 3315 	add	sp, #2
                                   3316 ;main.c:479: init_scorpboss_gun(96, 136);
      000892 11 60 88              3317 	ld	de, #0x8860
      000895 D5                    3318 	push	de
      000896 CDr3Fr06              3319 	call	_init_scorpboss_gun
      000899 E8 02                 3320 	add	sp, #2
                                   3321 ;main.c:480: }
      00089B C9                    3322 	ret
                                   3323 ;main.c:483: inline UBYTE collides_with_sidewalk(INT8 vspeed) {
                                   3324 ;	---------------------------------
                                   3325 ; Function collides_with_sidewalk
                                   3326 ; ---------------------------------
      00089C                       3327 _collides_with_sidewalk::
                                   3328 ;main.c:484: return pl->y + vspeed < 96 || pl->y + vspeed > 127;
      00089C 21rC3r00              3329 	ld	hl, #_pl + 1
      00089F 2B                    3330 	dec	hl
      0008A0 2A                    3331 	ld	a, (hl+)
      0008A1 4F                    3332 	ld	c, a
      0008A2 46                    3333 	ld	b, (hl)
      0008A3 03                    3334 	inc	bc
      0008A4 03                    3335 	inc	bc
      0008A5 78                    3336 	ld	a, b
      0008A6 69                    3337 	ld	l, c
      0008A7 67                    3338 	ld	h, a
      0008A8 4E                    3339 	ld	c, (hl)
      0008A9 06 00                 3340 	ld	b, #0x00
      0008AB F8 02                 3341 	ldhl	sp,	#2
      0008AD 7E                    3342 	ld	a, (hl)
      0008AE 5F                    3343 	ld	e, a
      0008AF 17                    3344 	rla
      0008B0 9F                    3345 	sbc	a, a
      0008B1 57                    3346 	ld	d, a
      0008B2 6B                    3347 	ld	l, e
      0008B3 62                    3348 	ld	h, d
      0008B4 09                    3349 	add	hl, bc
      0008B5 7D                    3350 	ld	a, l
      0008B6 D6 60                 3351 	sub	a, #0x60
      0008B8 7C                    3352 	ld	a, h
      0008B9 17                    3353 	rla
      0008BA 3F                    3354 	ccf
      0008BB 1F                    3355 	rra
      0008BC DE 80                 3356 	sbc	a, #0x80
      0008BE 38 1E                 3357 	jr	C, 00104$
      0008C0 5C                    3358 	ld	e, h
      0008C1 16 00                 3359 	ld	d, #0x00
      0008C3 3E 7F                 3360 	ld	a, #0x7f
      0008C5 BD                    3361 	cp	a, l
      0008C6 3E 00                 3362 	ld	a, #0x00
      0008C8 9C                    3363 	sbc	a, h
      0008C9 CB 7B                 3364 	bit	7, e
      0008CB 28 07                 3365 	jr	Z, 00116$
      0008CD CB 7A                 3366 	bit	7, d
      0008CF 20 08                 3367 	jr	NZ, 00117$
      0008D1 BF                    3368 	cp	a, a
      0008D2 18 05                 3369 	jr	00117$
      0008D4                       3370 00116$:
      0008D4 CB 7A                 3371 	bit	7, d
      0008D6 28 01                 3372 	jr	Z, 00117$
      0008D8 37                    3373 	scf
      0008D9                       3374 00117$:
      0008D9 38 03                 3375 	jr	C, 00104$
      0008DB 1E 00                 3376 	ld	e, #0x00
      0008DD C9                    3377 	ret
      0008DE                       3378 00104$:
      0008DE 1E 01                 3379 	ld	e, #0x01
                                   3380 ;main.c:485: }
      0008E0 C9                    3381 	ret
                                   3382 ;main.c:488: inline UBYTE is_inside_x_bounds(UINT8 posx) {
                                   3383 ;	---------------------------------
                                   3384 ; Function is_inside_x_bounds
                                   3385 ; ---------------------------------
      0008E1                       3386 _is_inside_x_bounds::
                                   3387 ;main.c:489: return posx > 15 && posx < 141;
      0008E1 3E 0F                 3388 	ld	a, #0x0f
      0008E3 F8 02                 3389 	ldhl	sp,	#2
      0008E5 96                    3390 	sub	a, (hl)
      0008E6 30 05                 3391 	jr	NC, 00103$
      0008E8 7E                    3392 	ld	a, (hl)
      0008E9 D6 8D                 3393 	sub	a, #0x8d
      0008EB 38 03                 3394 	jr	C, 00104$
      0008ED                       3395 00103$:
      0008ED 1E 00                 3396 	ld	e, #0x00
      0008EF C9                    3397 	ret
      0008F0                       3398 00104$:
      0008F0 1E 01                 3399 	ld	e, #0x01
                                   3400 ;main.c:490: }
      0008F2 C9                    3401 	ret
                                   3402 ;main.c:493: void move_machine(Machine * mch, INT8 speedx, INT8 speedy) {
                                   3403 ;	---------------------------------
                                   3404 ; Function move_machine
                                   3405 ; ---------------------------------
      0008F3                       3406 _move_machine::
      0008F3 E8 FA                 3407 	add	sp, #-6
                                   3408 ;main.c:494: mch->x += speedx;
      0008F5 F8 08                 3409 	ldhl	sp,#8
      0008F7 2A                    3410 	ld	a, (hl+)
      0008F8 4F                    3411 	ld	c, a
      0008F9 46                    3412 	ld	b, (hl)
      0008FA 69                    3413 	ld	l, c
      0008FB 60                    3414 	ld	h, b
      0008FC 23                    3415 	inc	hl
      0008FD 33                    3416 	inc	sp
      0008FE 33                    3417 	inc	sp
      0008FF 5D                    3418 	ld	e, l
      000900 54                    3419 	ld	d, h
      000901 D5                    3420 	push	de
      000902 1A                    3421 	ld	a, (de)
      000903 F8 0A                 3422 	ldhl	sp,	#10
      000905 86                    3423 	add	a, (hl)
      000906 E1                    3424 	pop	hl
      000907 E5                    3425 	push	hl
      000908 77                    3426 	ld	(hl), a
                                   3427 ;main.c:495: mch->y += speedy;
      000909 21 02 00              3428 	ld	hl, #0x0002
      00090C 09                    3429 	add	hl, bc
      00090D E5                    3430 	push	hl
      00090E 7D                    3431 	ld	a, l
      00090F F8 04                 3432 	ldhl	sp,	#4
      000911 77                    3433 	ld	(hl), a
      000912 E1                    3434 	pop	hl
      000913 7C                    3435 	ld	a, h
      000914 F8 03                 3436 	ldhl	sp,	#3
      000916 32                    3437 	ld	(hl-), a
      000917 2A                    3438 	ld	a, (hl+)
      000918 5F                    3439 	ld	e, a
      000919 56                    3440 	ld	d, (hl)
      00091A 1A                    3441 	ld	a, (de)
      00091B F8 0B                 3442 	ldhl	sp,	#11
      00091D 86                    3443 	add	a, (hl)
      00091E F8 02                 3444 	ldhl	sp,	#2
      000920 F5                    3445 	push	af
      000921 2A                    3446 	ld	a, (hl+)
      000922 66                    3447 	ld	h, (hl)
      000923 6F                    3448 	ld	l, a
      000924 F1                    3449 	pop	af
      000925 77                    3450 	ld	(hl), a
                                   3451 ;main.c:496: move_sprite(mch->oamtilenums[0], mch->x, mch->y);
      000926 F8 02                 3452 	ldhl	sp,#2
      000928 2A                    3453 	ld	a, (hl+)
      000929 5F                    3454 	ld	e, a
      00092A 56                    3455 	ld	d, (hl)
      00092B 1A                    3456 	ld	a, (de)
      00092C 23                    3457 	inc	hl
      00092D 77                    3458 	ld	(hl), a
      00092E D1                    3459 	pop	de
      00092F D5                    3460 	push	de
      000930 1A                    3461 	ld	a, (de)
      000931 23                    3462 	inc	hl
      000932 77                    3463 	ld	(hl), a
      000933 21 0D 00              3464 	ld	hl, #0x000d
      000936 09                    3465 	add	hl, bc
                                   3466 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      000937 7E                    3467 	ld	a, (hl)
      000938 26 00                 3468 	ld	h, #0x00
      00093A 6F                    3469 	ld	l, a
      00093B 29                    3470 	add	hl, hl
      00093C 29                    3471 	add	hl, hl
      00093D 11r00r00              3472 	ld	de, #_shadow_OAM
      000940 19                    3473 	add	hl, de
      000941 5D                    3474 	ld	e, l
      000942 54                    3475 	ld	d, h
                                   3476 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      000943 F8 04                 3477 	ldhl	sp,	#4
      000945 7E                    3478 	ld	a, (hl)
      000946 12                    3479 	ld	(de), a
      000947 13                    3480 	inc	de
      000948 23                    3481 	inc	hl
      000949 7E                    3482 	ld	a, (hl)
      00094A 12                    3483 	ld	(de), a
                                   3484 ;main.c:497: move_sprite(mch->oamtilenums[1], mch->x + 8, mch->y);
      00094B 2B                    3485 	dec	hl
      00094C 2B                    3486 	dec	hl
      00094D 2B                    3487 	dec	hl
      00094E 2A                    3488 	ld	a, (hl+)
      00094F 5F                    3489 	ld	e, a
      000950 56                    3490 	ld	d, (hl)
      000951 1A                    3491 	ld	a, (de)
      000952 23                    3492 	inc	hl
      000953 77                    3493 	ld	(hl), a
      000954 D1                    3494 	pop	de
      000955 D5                    3495 	push	de
      000956 1A                    3496 	ld	a, (de)
      000957 C6 08                 3497 	add	a, #0x08
      000959 23                    3498 	inc	hl
      00095A 77                    3499 	ld	(hl), a
      00095B 21 0E 00              3500 	ld	hl, #0x000e
      00095E 09                    3501 	add	hl, bc
                                   3502 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      00095F 7E                    3503 	ld	a, (hl)
      000960 26 00                 3504 	ld	h, #0x00
      000962 6F                    3505 	ld	l, a
      000963 29                    3506 	add	hl, hl
      000964 29                    3507 	add	hl, hl
      000965 11r00r00              3508 	ld	de, #_shadow_OAM
      000968 19                    3509 	add	hl, de
      000969 5D                    3510 	ld	e, l
      00096A 54                    3511 	ld	d, h
                                   3512 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      00096B F8 04                 3513 	ldhl	sp,	#4
      00096D 7E                    3514 	ld	a, (hl)
      00096E 12                    3515 	ld	(de), a
      00096F 13                    3516 	inc	de
      000970 23                    3517 	inc	hl
      000971 7E                    3518 	ld	a, (hl)
      000972 12                    3519 	ld	(de), a
                                   3520 ;main.c:498: move_sprite(mch->oamtilenums[2], mch->x, mch->y + 8);
      000973 2B                    3521 	dec	hl
      000974 2B                    3522 	dec	hl
      000975 2B                    3523 	dec	hl
      000976 2A                    3524 	ld	a, (hl+)
      000977 5F                    3525 	ld	e, a
      000978 56                    3526 	ld	d, (hl)
      000979 1A                    3527 	ld	a, (de)
      00097A C6 08                 3528 	add	a, #0x08
      00097C 23                    3529 	inc	hl
      00097D 77                    3530 	ld	(hl), a
      00097E D1                    3531 	pop	de
      00097F D5                    3532 	push	de
      000980 1A                    3533 	ld	a, (de)
      000981 23                    3534 	inc	hl
      000982 77                    3535 	ld	(hl), a
      000983 21 0F 00              3536 	ld	hl, #0x000f
      000986 09                    3537 	add	hl, bc
                                   3538 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      000987 7E                    3539 	ld	a, (hl)
      000988 26 00                 3540 	ld	h, #0x00
      00098A 6F                    3541 	ld	l, a
      00098B 29                    3542 	add	hl, hl
      00098C 29                    3543 	add	hl, hl
      00098D 11r00r00              3544 	ld	de, #_shadow_OAM
      000990 19                    3545 	add	hl, de
      000991 5D                    3546 	ld	e, l
      000992 54                    3547 	ld	d, h
                                   3548 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      000993 F8 04                 3549 	ldhl	sp,	#4
      000995 7E                    3550 	ld	a, (hl)
      000996 12                    3551 	ld	(de), a
      000997 13                    3552 	inc	de
      000998 23                    3553 	inc	hl
      000999 7E                    3554 	ld	a, (hl)
      00099A 12                    3555 	ld	(de), a
                                   3556 ;main.c:499: move_sprite(mch->oamtilenums[3], mch->x + 8, mch->y + 8);
      00099B 2B                    3557 	dec	hl
      00099C 2B                    3558 	dec	hl
      00099D 2B                    3559 	dec	hl
      00099E 2A                    3560 	ld	a, (hl+)
      00099F 5F                    3561 	ld	e, a
      0009A0 56                    3562 	ld	d, (hl)
      0009A1 1A                    3563 	ld	a, (de)
      0009A2 C6 08                 3564 	add	a, #0x08
      0009A4 23                    3565 	inc	hl
      0009A5 23                    3566 	inc	hl
      0009A6 77                    3567 	ld	(hl), a
      0009A7 D1                    3568 	pop	de
      0009A8 D5                    3569 	push	de
      0009A9 1A                    3570 	ld	a, (de)
      0009AA C6 08                 3571 	add	a, #0x08
      0009AC 5F                    3572 	ld	e, a
      0009AD 21 10 00              3573 	ld	hl, #0x0010
      0009B0 09                    3574 	add	hl, bc
                                   3575 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      0009B1 6E                    3576 	ld	l, (hl)
      0009B2 01r00r00              3577 	ld	bc, #_shadow_OAM+0
      0009B5 26 00                 3578 	ld	h, #0x00
      0009B7 29                    3579 	add	hl, hl
      0009B8 29                    3580 	add	hl, hl
      0009B9 09                    3581 	add	hl, bc
      0009BA 4D                    3582 	ld	c, l
      0009BB 44                    3583 	ld	b, h
                                   3584 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      0009BC F8 05                 3585 	ldhl	sp,	#5
      0009BE 7E                    3586 	ld	a, (hl)
      0009BF 02                    3587 	ld	(bc), a
      0009C0 03                    3588 	inc	bc
      0009C1 7B                    3589 	ld	a, e
      0009C2 02                    3590 	ld	(bc), a
                                   3591 ;main.c:499: move_sprite(mch->oamtilenums[3], mch->x + 8, mch->y + 8);
                                   3592 ;main.c:500: }
      0009C3 E8 06                 3593 	add	sp, #6
      0009C5 C9                    3594 	ret
                                   3595 ;main.c:503: void move_player(INT8 speedx, INT8 speedy) {
                                   3596 ;	---------------------------------
                                   3597 ; Function move_player
                                   3598 ; ---------------------------------
      0009C6                       3599 _move_player::
                                   3600 ;main.c:504: if((speedx != 0 && is_inside_x_bounds(pl->x + speedx))
      0009C6 21rC3r00              3601 	ld	hl, #_pl + 1
      0009C9 2B                    3602 	dec	hl
      0009CA 2A                    3603 	ld	a, (hl+)
      0009CB 4F                    3604 	ld	c, a
      0009CC 46                    3605 	ld	b, (hl)
      0009CD F8 02                 3606 	ldhl	sp,	#2
      0009CF 7E                    3607 	ld	a, (hl)
      0009D0 B7                    3608 	or	a, a
      0009D1 28 18                 3609 	jr	Z, 00105$
      0009D3 59                    3610 	ld	e, c
      0009D4 50                    3611 	ld	d, b
      0009D5 13                    3612 	inc	de
      0009D6 1A                    3613 	ld	a, (de)
      0009D7 86                    3614 	add	a, (hl)
      0009D8 5F                    3615 	ld	e, a
                                   3616 ;main.c:489: return posx > 15 && posx < 141;
      0009D9 3E 0F                 3617 	ld	a, #0x0f
      0009DB 93                    3618 	sub	a, e
      0009DC 30 05                 3619 	jr	NC, 00110$
      0009DE 7B                    3620 	ld	a, e
      0009DF D6 8D                 3621 	sub	a, #0x8d
      0009E1 38 03                 3622 	jr	C, 00111$
      0009E3                       3623 00110$:
      0009E3 AF                    3624 	xor	a, a
      0009E4 18 02                 3625 	jr	00112$
      0009E6                       3626 00111$:
      0009E6 3E 01                 3627 	ld	a, #0x01
      0009E8                       3628 00112$:
                                   3629 ;main.c:504: if((speedx != 0 && is_inside_x_bounds(pl->x + speedx))
      0009E8 B7                    3630 	or	a, a
      0009E9 20 3E                 3631 	jr	NZ, 00101$
      0009EB                       3632 00105$:
                                   3633 ;main.c:505: || (speedy != 0 && !collides_with_sidewalk(speedy)) ) {
      0009EB F8 03                 3634 	ldhl	sp,	#3
      0009ED 7E                    3635 	ld	a, (hl)
      0009EE B7                    3636 	or	a, a
      0009EF C8                    3637 	ret	Z
      0009F0 5E                    3638 	ld	e, (hl)
                                   3639 ;main.c:484: return pl->y + vspeed < 96 || pl->y + vspeed > 127;
      0009F1 03                    3640 	inc	bc
      0009F2 03                    3641 	inc	bc
      0009F3 0A                    3642 	ld	a, (bc)
      0009F4 6F                    3643 	ld	l, a
      0009F5 26 00                 3644 	ld	h, #0x00
      0009F7 7B                    3645 	ld	a, e
      0009F8 17                    3646 	rla
      0009F9 9F                    3647 	sbc	a, a
      0009FA 57                    3648 	ld	d, a
      0009FB 19                    3649 	add	hl, de
      0009FC 7D                    3650 	ld	a, l
      0009FD D6 60                 3651 	sub	a, #0x60
      0009FF 7C                    3652 	ld	a, h
      000A00 17                    3653 	rla
      000A01 3F                    3654 	ccf
      000A02 1F                    3655 	rra
      000A03 DE 80                 3656 	sbc	a, #0x80
      000A05 38 1E                 3657 	jr	C, 00114$
      000A07 5C                    3658 	ld	e, h
      000A08 16 00                 3659 	ld	d, #0x00
      000A0A 3E 7F                 3660 	ld	a, #0x7f
      000A0C BD                    3661 	cp	a, l
      000A0D 3E 00                 3662 	ld	a, #0x00
      000A0F 9C                    3663 	sbc	a, h
      000A10 CB 7B                 3664 	bit	7, e
      000A12 28 07                 3665 	jr	Z, 00141$
      000A14 CB 7A                 3666 	bit	7, d
      000A16 20 08                 3667 	jr	NZ, 00142$
      000A18 BF                    3668 	cp	a, a
      000A19 18 05                 3669 	jr	00142$
      000A1B                       3670 00141$:
      000A1B CB 7A                 3671 	bit	7, d
      000A1D 28 01                 3672 	jr	Z, 00142$
      000A1F 37                    3673 	scf
      000A20                       3674 00142$:
      000A20 38 03                 3675 	jr	C, 00114$
      000A22 AF                    3676 	xor	a, a
      000A23 18 02                 3677 	jr	00115$
      000A25                       3678 00114$:
      000A25 3E 01                 3679 	ld	a, #0x01
      000A27                       3680 00115$:
                                   3681 ;main.c:505: || (speedy != 0 && !collides_with_sidewalk(speedy)) ) {
      000A27 B7                    3682 	or	a, a
      000A28 C0                    3683 	ret	NZ
      000A29                       3684 00101$:
                                   3685 ;main.c:506: move_machine(pl, speedx, speedy);
      000A29 F8 03                 3686 	ldhl	sp,	#3
      000A2B 7E                    3687 	ld	a, (hl)
      000A2C F5                    3688 	push	af
      000A2D 33                    3689 	inc	sp
      000A2E 2B                    3690 	dec	hl
      000A2F 7E                    3691 	ld	a, (hl)
      000A30 F5                    3692 	push	af
      000A31 33                    3693 	inc	sp
      000A32 21rC2r00              3694 	ld	hl, #_pl
      000A35 2A                    3695 	ld	a, (hl+)
      000A36 66                    3696 	ld	h, (hl)
      000A37 6F                    3697 	ld	l, a
      000A38 E5                    3698 	push	hl
      000A39 CDrF3r08              3699 	call	_move_machine
      000A3C E8 04                 3700 	add	sp, #4
                                   3701 ;main.c:508: }
      000A3E C9                    3702 	ret
                                   3703 ;main.c:511: void move_enemy(Machine * en, INT8 speedx, INT8 speedy) {
                                   3704 ;	---------------------------------
                                   3705 ; Function move_enemy
                                   3706 ; ---------------------------------
      000A3F                       3707 _move_enemy::
                                   3708 ;main.c:512: move_machine(en, speedx, speedy);
      000A3F F8 05                 3709 	ldhl	sp,	#5
      000A41 7E                    3710 	ld	a, (hl)
      000A42 F5                    3711 	push	af
      000A43 33                    3712 	inc	sp
      000A44 2B                    3713 	dec	hl
      000A45 7E                    3714 	ld	a, (hl)
      000A46 F5                    3715 	push	af
      000A47 33                    3716 	inc	sp
      000A48 2B                    3717 	dec	hl
      000A49 2B                    3718 	dec	hl
      000A4A 2A                    3719 	ld	a, (hl+)
      000A4B 66                    3720 	ld	h, (hl)
      000A4C 6F                    3721 	ld	l, a
      000A4D E5                    3722 	push	hl
      000A4E CDrF3r08              3723 	call	_move_machine
      000A51 E8 04                 3724 	add	sp, #4
                                   3725 ;main.c:513: if(!is_obj_inside_screen(en->x, en->y, 16, 16)) {
      000A53 C1                    3726 	pop	bc
      000A54 D1                    3727 	pop	de
      000A55 D5                    3728 	push	de
      000A56 C5                    3729 	push	bc
      000A57 6B                    3730 	ld	l, e
      000A58 62                    3731 	ld	h, d
      000A59 23                    3732 	inc	hl
      000A5A 23                    3733 	inc	hl
      000A5B 46                    3734 	ld	b, (hl)
      000A5C 6B                    3735 	ld	l, e
      000A5D 62                    3736 	ld	h, d
      000A5E 23                    3737 	inc	hl
      000A5F 7E                    3738 	ld	a, (hl)
      000A60 D5                    3739 	push	de
      000A61 26 10                 3740 	ld	h, #0x10
      000A63 E5                    3741 	push	hl
      000A64 33                    3742 	inc	sp
      000A65 26 10                 3743 	ld	h, #0x10
      000A67 68                    3744 	ld	l, b
      000A68 E5                    3745 	push	hl
      000A69 F5                    3746 	push	af
      000A6A 33                    3747 	inc	sp
      000A6B CDrB3r15              3748 	call	_is_obj_inside_screen
      000A6E E8 04                 3749 	add	sp, #4
      000A70 7B                    3750 	ld	a, e
      000A71 D1                    3751 	pop	de
      000A72 B7                    3752 	or	a, a
      000A73 C0                    3753 	ret	NZ
                                   3754 ;main.c:514: destroy_machine(en);
      000A74 D5                    3755 	push	de
      000A75 CDr49r1A              3756 	call	_destroy_machine
      000A78 E8 02                 3757 	add	sp, #2
                                   3758 ;main.c:516: }
      000A7A C9                    3759 	ret
                                   3760 ;main.c:519: void incr_bkg_x_coords(UINT8 roadsp) {
                                   3761 ;	---------------------------------
                                   3762 ; Function incr_bkg_x_coords
                                   3763 ; ---------------------------------
      000A7B                       3764 _incr_bkg_x_coords::
                                   3765 ;main.c:524: }
      000A7B F3                    3766 	di
                                   3767 ;main.c:521: cloudposx += roadsp - 3;
      000A7C F8 02                 3768 	ldhl	sp,	#2
      000A7E 4E                    3769 	ld	c, (hl)
      000A7F 79                    3770 	ld	a, c
      000A80 C6 FD                 3771 	add	a, #0xfd
      000A82 21r12r00              3772 	ld	hl, #_cloudposx
      000A85 46                    3773 	ld	b, (hl)
      000A86 80                    3774 	add	a, b
      000A87 77                    3775 	ld	(hl), a
                                   3776 ;main.c:522: sceneryposx += roadsp - 1;
      000A88 0D                    3777 	dec	c
      000A89 21r11r00              3778 	ld	hl, #_sceneryposx
      000A8C 7E                    3779 	ld	a, (hl)
      000A8D 81                    3780 	add	a, c
      000A8E 77                    3781 	ld	(hl), a
                                   3782 ;main.c:523: roadposx += roadsp;
      000A8F FAr10r00              3783 	ld	a, (#_roadposx)
      000A92 F8 02                 3784 	ldhl	sp,	#2
      000A94 86                    3785 	add	a, (hl)
      000A95 EAr10r00              3786 	ld	(#_roadposx),a
      000A98 FB                    3787 	ei
                                   3788 ;main.c:525: }
      000A99 C9                    3789 	ret
                                   3790 ;main.c:546: void place_stage_obj(UINT8 type, UINT8 x, UINT8 y) {
                                   3791 ;	---------------------------------
                                   3792 ; Function place_stage_obj
                                   3793 ; ---------------------------------
      000A9A                       3794 _place_stage_obj::
                                   3795 ;main.c:547: init_machine_props(x, y, *(enprops + type));
      000A9A F8 02                 3796 	ldhl	sp,	#2
      000A9C 4E                    3797 	ld	c, (hl)
      000A9D 06 00                 3798 	ld	b, #0x00
      000A9F 69                    3799 	ld	l, c
      000AA0 60                    3800 	ld	h, b
      000AA1 29                    3801 	add	hl, hl
      000AA2 29                    3802 	add	hl, hl
      000AA3 09                    3803 	add	hl, bc
      000AA4 29                    3804 	add	hl, hl
      000AA5 01rFDr00              3805 	ld	bc,#_enprops
      000AA8 09                    3806 	add	hl,bc
      000AA9 E5                    3807 	push	hl
      000AAA F8 06                 3808 	ldhl	sp,	#6
      000AAC 7E                    3809 	ld	a, (hl)
      000AAD F5                    3810 	push	af
      000AAE 33                    3811 	inc	sp
      000AAF 2B                    3812 	dec	hl
      000AB0 7E                    3813 	ld	a, (hl)
      000AB1 F5                    3814 	push	af
      000AB2 33                    3815 	inc	sp
      000AB3 CDrF6r04              3816 	call	_init_machine_props
      000AB6 E8 04                 3817 	add	sp, #4
                                   3818 ;main.c:548: }
      000AB8 C9                    3819 	ret
                                   3820 ;main.c:551: void build_stage() {   // Automatically builds the road ahead while scrolling the stage
                                   3821 ;	---------------------------------
                                   3822 ; Function build_stage
                                   3823 ; ---------------------------------
      000AB9                       3824 _build_stage::
      000AB9 E8 FE                 3825 	add	sp, #-2
                                   3826 ;main.c:552: camtileidx = get_tile_idx((SCX_REG + 168) / 8);
      000ABB F0r00                 3827 	ldh	a, (_SCX_REG+0)
      000ABD 06 00                 3828 	ld	b, #0x00
      000ABF C6 A8                 3829 	add	a, #0xa8
      000AC1 4F                    3830 	ld	c, a
      000AC2 30 01                 3831 	jr	NC, 00166$
      000AC4 04                    3832 	inc	b
      000AC5                       3833 00166$:
      000AC5 69                    3834 	ld	l, c
      000AC6 60                    3835 	ld	h, b
      000AC7 CB 78                 3836 	bit	7, b
      000AC9 28 04                 3837 	jr	Z, 00118$
      000ACB 21 07 00              3838 	ld	hl, #0x0007
      000ACE 09                    3839 	add	hl, bc
      000ACF                       3840 00118$:
      000ACF CB 2C                 3841 	sra	h
      000AD1 CB 1D                 3842 	rr	l
      000AD3 CB 2C                 3843 	sra	h
      000AD5 CB 1D                 3844 	rr	l
      000AD7 CB 2C                 3845 	sra	h
      000AD9 CB 1D                 3846 	rr	l
                                   3847 ;main.c:303: return newidxnum > 31 ? newidxnum - 32 : newidxnum;
      000ADB 3E 1F                 3848 	ld	a, #0x1f
      000ADD 95                    3849 	sub	a, l
      000ADE 30 05                 3850 	jr	NC, 00119$
      000AE0 7D                    3851 	ld	a, l
      000AE1 C6 E0                 3852 	add	a, #0xe0
      000AE3 18 01                 3853 	jr	00120$
      000AE5                       3854 00119$:
      000AE5 7D                    3855 	ld	a, l
      000AE6                       3856 00120$:
      000AE6 21r0Br00              3857 	ld	hl, #_camtileidx
      000AE9 77                    3858 	ld	(hl), a
                                   3859 ;main.c:553: if(camtileidx == nextcamtileidx) {
      000AEA 7E                    3860 	ld	a, (hl)
      000AEB 21r0Cr00              3861 	ld	hl, #_nextcamtileidx
      000AEE 96                    3862 	sub	a, (hl)
      000AEF C2r89r0B              3863 	jp	NZ,00112$
                                   3864 ;main.c:554: if(holeflg) {
      000AF2 FAr01r00              3865 	ld	a, (#_holeflg)
      000AF5 B7                    3866 	or	a, a
      000AF6 28 05                 3867 	jr	Z, 00102$
                                   3868 ;main.c:555: build_hole();
      000AF8 CDrCFr0B              3869 	call	_build_hole
      000AFB 18 03                 3870 	jr	00103$
      000AFD                       3871 00102$:
                                   3872 ;main.c:557: build_road();
      000AFD CDrA4r0B              3873 	call	_build_road
      000B00                       3874 00103$:
                                   3875 ;main.c:561: if(roadbuildidx == crntstage->roadlayout[stageidx]) {
      000B00 21r08r00              3876 	ld	hl, #_crntstage + 1
      000B03 2B                    3877 	dec	hl
      000B04 2A                    3878 	ld	a, (hl+)
      000B05 4F                    3879 	ld	c, a
      000B06 46                    3880 	ld	b, (hl)
      000B07 59                    3881 	ld	e, c
      000B08 50                    3882 	ld	d, b
      000B09 1A                    3883 	ld	a, (de)
      000B0A F8 00                 3884 	ldhl	sp,	#0
      000B0C 22                    3885 	ld	(hl+), a
      000B0D 13                    3886 	inc	de
      000B0E 1A                    3887 	ld	a, (de)
      000B0F 77                    3888 	ld	(hl), a
                                   3889 ;c
      000B10 D1                    3890 	pop	de
      000B11 D5                    3891 	push	de
      000B12 21r00r00              3892 	ld	hl, #_stageidx
      000B15 6E                    3893 	ld	l, (hl)
      000B16 26 00                 3894 	ld	h, #0x00
      000B18 19                    3895 	add	hl, de
      000B19 5D                    3896 	ld	e, l
      000B1A 54                    3897 	ld	d, h
      000B1B 1A                    3898 	ld	a, (de)
      000B1C 5F                    3899 	ld	e, a
      000B1D FAr0Ar00              3900 	ld	a, (#_roadbuildidx)
      000B20 93                    3901 	sub	a, e
      000B21 20 15                 3902 	jr	NZ, 00105$
                                   3903 ;main.c:562: stageidx++; // Moving to next elem in stage array
      000B23 21r00r00              3904 	ld	hl, #_stageidx
      000B26 34                    3905 	inc	(hl)
                                   3906 ;main.c:563: roadbuildidx = 0;
      000B27 21r0Ar00              3907 	ld	hl, #_roadbuildidx
      000B2A 36 00                 3908 	ld	(hl), #0x00
                                   3909 ;main.c:564: holeflg = !holeflg; // Roads and holes alternate
      000B2C 21r01r00              3910 	ld	hl, #_holeflg
      000B2F 7E                    3911 	ld	a, (hl)
      000B30 D6 01                 3912 	sub	a,#0x01
      000B32 3E 00                 3913 	ld	a, #0x00
      000B34 17                    3914 	rla
      000B35 77                    3915 	ld	(hl), a
      000B36 18 04                 3916 	jr	00106$
      000B38                       3917 00105$:
                                   3918 ;main.c:566: roadbuildidx++;
      000B38 21r0Ar00              3919 	ld	hl, #_roadbuildidx
      000B3B 34                    3920 	inc	(hl)
      000B3C                       3921 00106$:
                                   3922 ;main.c:570: if(lvlobjscnt != crntstage->ennum && lvlplacptr->arridx == stageidx && lvlplacptr->elemidx == roadbuildidx) {
      000B3C 21 05 00              3923 	ld	hl, #0x0005
      000B3F 09                    3924 	add	hl, bc
      000B40 4E                    3925 	ld	c, (hl)
      000B41 FAr04r00              3926 	ld	a, (#_lvlobjscnt)
      000B44 91                    3927 	sub	a, c
      000B45 28 42                 3928 	jr	Z, 00112$
      000B47 21r06r00              3929 	ld	hl, #_lvlplacptr + 1
      000B4A 2B                    3930 	dec	hl
      000B4B 2A                    3931 	ld	a, (hl+)
      000B4C 4F                    3932 	ld	c, a
      000B4D 46                    3933 	ld	b, (hl)
      000B4E 0A                    3934 	ld	a, (bc)
      000B4F 5F                    3935 	ld	e, a
      000B50 FAr00r00              3936 	ld	a, (#_stageidx)
      000B53 93                    3937 	sub	a, e
      000B54 20 33                 3938 	jr	NZ, 00112$
      000B56 69                    3939 	ld	l, c
      000B57 60                    3940 	ld	h, b
      000B58 23                    3941 	inc	hl
      000B59 5E                    3942 	ld	e, (hl)
      000B5A FAr0Ar00              3943 	ld	a, (#_roadbuildidx)
      000B5D 93                    3944 	sub	a, e
      000B5E 20 29                 3945 	jr	NZ, 00112$
                                   3946 ;main.c:571: place_stage_obj(lvlplacptr->type, lvlplacptr->x, lvlplacptr->y);
      000B60 69                    3947 	ld	l, c
      000B61 60                    3948 	ld	h, b
      000B62 23                    3949 	inc	hl
      000B63 23                    3950 	inc	hl
      000B64 23                    3951 	inc	hl
      000B65 5E                    3952 	ld	e, (hl)
      000B66 69                    3953 	ld	l, c
      000B67 60                    3954 	ld	h, b
      000B68 23                    3955 	inc	hl
      000B69 23                    3956 	inc	hl
      000B6A 56                    3957 	ld	d, (hl)
      000B6B 03                    3958 	inc	bc
      000B6C 03                    3959 	inc	bc
      000B6D 03                    3960 	inc	bc
      000B6E 03                    3961 	inc	bc
      000B6F 0A                    3962 	ld	a, (bc)
      000B70 63                    3963 	ld	h, e
      000B71 6A                    3964 	ld	l, d
      000B72 E5                    3965 	push	hl
      000B73 F5                    3966 	push	af
      000B74 33                    3967 	inc	sp
      000B75 CDr9Ar0A              3968 	call	_place_stage_obj
      000B78 E8 03                 3969 	add	sp, #3
                                   3970 ;main.c:572: lvlplacptr++;
      000B7A 21r05r00              3971 	ld	hl, #_lvlplacptr
      000B7D 7E                    3972 	ld	a, (hl)
      000B7E C6 05                 3973 	add	a, #0x05
      000B80 22                    3974 	ld	(hl+), a
      000B81 7E                    3975 	ld	a, (hl)
      000B82 CE 00                 3976 	adc	a, #0x00
      000B84 77                    3977 	ld	(hl), a
                                   3978 ;main.c:573: lvlobjscnt++;
      000B85 21r04r00              3979 	ld	hl, #_lvlobjscnt
      000B88 34                    3980 	inc	(hl)
      000B89                       3981 00112$:
                                   3982 ;main.c:577: if(stageidx == crntstage->roadlength) { // End of stage reached
      000B89 21r08r00              3983 	ld	hl, #_crntstage + 1
      000B8C 2B                    3984 	dec	hl
      000B8D 2A                    3985 	ld	a, (hl+)
      000B8E 4F                    3986 	ld	c, a
      000B8F 46                    3987 	ld	b, (hl)
      000B90 03                    3988 	inc	bc
      000B91 03                    3989 	inc	bc
      000B92 78                    3990 	ld	a, b
      000B93 69                    3991 	ld	l, c
      000B94 67                    3992 	ld	h, a
      000B95 4E                    3993 	ld	c, (hl)
      000B96 FAr00r00              3994 	ld	a, (#_stageidx)
      000B99 91                    3995 	sub	a, c
      000B9A 20 05                 3996 	jr	NZ, 00116$
                                   3997 ;main.c:578: stageclearflg = 1;
      000B9C 21r02r00              3998 	ld	hl, #_stageclearflg
      000B9F 36 01                 3999 	ld	(hl), #0x01
      000BA1                       4000 00116$:
                                   4001 ;main.c:580: }
      000BA1 E8 02                 4002 	add	sp, #2
      000BA3 C9                    4003 	ret
                                   4004 ;main.c:583: void build_road() {
                                   4005 ;	---------------------------------
                                   4006 ; Function build_road
                                   4007 ; ---------------------------------
      000BA4                       4008 _build_road::
                                   4009 ;main.c:584: set_bkg_tiles(camtileidx, 10, 3, 7, goodroadmap);
      000BA4 21r00r00              4010 	ld	hl, #_goodroadmap
      000BA7 E5                    4011 	push	hl
      000BA8 11 03 07              4012 	ld	de, #0x0703
      000BAB D5                    4013 	push	de
      000BAC 3E 0A                 4014 	ld	a, #0x0a
      000BAE F5                    4015 	push	af
      000BAF 33                    4016 	inc	sp
      000BB0 FAr0Br00              4017 	ld	a, (#_camtileidx)
      000BB3 F5                    4018 	push	af
      000BB4 33                    4019 	inc	sp
      000BB5 CDr00r00              4020 	call	_set_bkg_tiles
      000BB8 E8 06                 4021 	add	sp, #6
                                   4022 ;main.c:585: nextcamtileidx = get_tile_idx(camtileidx + 3);
      000BBA FAr0Br00              4023 	ld	a, (#_camtileidx)
      000BBD C6 03                 4024 	add	a, #0x03
      000BBF 4F                    4025 	ld	c, a
                                   4026 ;main.c:303: return newidxnum > 31 ? newidxnum - 32 : newidxnum;
      000BC0 3E 1F                 4027 	ld	a, #0x1f
      000BC2 91                    4028 	sub	a, c
      000BC3 30 05                 4029 	jr	NC, 00104$
      000BC5 79                    4030 	ld	a, c
      000BC6 C6 E0                 4031 	add	a, #0xe0
      000BC8 18 01                 4032 	jr	00105$
      000BCA                       4033 00104$:
      000BCA 79                    4034 	ld	a, c
      000BCB                       4035 00105$:
      000BCB EAr0Cr00              4036 	ld	(#_nextcamtileidx),a
                                   4037 ;main.c:585: nextcamtileidx = get_tile_idx(camtileidx + 3);
                                   4038 ;main.c:586: }
      000BCE C9                    4039 	ret
                                   4040 ;main.c:589: void build_hole() {
                                   4041 ;	---------------------------------
                                   4042 ; Function build_hole
                                   4043 ; ---------------------------------
      000BCF                       4044 _build_hole::
                                   4045 ;main.c:590: if(roadbuildidx == 0) {
      000BCF FAr0Ar00              4046 	ld	a, (#_roadbuildidx)
      000BD2 B7                    4047 	or	a, a
      000BD3 20 30                 4048 	jr	NZ, 00105$
                                   4049 ;main.c:592: holestartx = 238;
      000BD5 21rCFr00              4050 	ld	hl, #_holestartx
      000BD8 36 EE                 4051 	ld	(hl), #0xee
                                   4052 ;main.c:593: set_bkg_tiles(camtileidx, 10, 4, 7, holestartmap);
      000BDA 21r00r00              4053 	ld	hl, #_holestartmap
      000BDD E5                    4054 	push	hl
      000BDE 11 04 07              4055 	ld	de, #0x0704
      000BE1 D5                    4056 	push	de
      000BE2 3E 0A                 4057 	ld	a, #0x0a
      000BE4 F5                    4058 	push	af
      000BE5 33                    4059 	inc	sp
      000BE6 FAr0Br00              4060 	ld	a, (#_camtileidx)
      000BE9 F5                    4061 	push	af
      000BEA 33                    4062 	inc	sp
      000BEB CDr00r00              4063 	call	_set_bkg_tiles
      000BEE E8 06                 4064 	add	sp, #6
                                   4065 ;main.c:594: nextcamtileidx = get_tile_idx(camtileidx + 4);
      000BF0 FAr0Br00              4066 	ld	a, (#_camtileidx)
      000BF3 C6 04                 4067 	add	a, #0x04
      000BF5 4F                    4068 	ld	c, a
                                   4069 ;main.c:303: return newidxnum > 31 ? newidxnum - 32 : newidxnum;
      000BF6 3E 1F                 4070 	ld	a, #0x1f
      000BF8 91                    4071 	sub	a, c
      000BF9 30 05                 4072 	jr	NC, 00112$
      000BFB 79                    4073 	ld	a, c
      000BFC C6 E0                 4074 	add	a, #0xe0
      000BFE 18 01                 4075 	jr	00113$
      000C00                       4076 00112$:
      000C00 79                    4077 	ld	a, c
      000C01                       4078 00113$:
      000C01 EAr0Cr00              4079 	ld	(#_nextcamtileidx),a
                                   4080 ;main.c:594: nextcamtileidx = get_tile_idx(camtileidx + 4);
      000C04 C9                    4081 	ret
      000C05                       4082 00105$:
                                   4083 ;main.c:595: } else if(roadbuildidx == stage1road[stageidx]) {
      000C05 01r21r00              4084 	ld	bc, #_stage1road+0
      000C08 79                    4085 	ld	a, c
      000C09 21r00r00              4086 	ld	hl, #_stageidx
      000C0C 86                    4087 	add	a, (hl)
      000C0D 4F                    4088 	ld	c, a
      000C0E 30 01                 4089 	jr	NC, 00143$
      000C10 04                    4090 	inc	b
      000C11                       4091 00143$:
      000C11 0A                    4092 	ld	a, (bc)
      000C12 4F                    4093 	ld	c, a
      000C13 FAr0Ar00              4094 	ld	a, (#_roadbuildidx)
      000C16 91                    4095 	sub	a, c
      000C17 20 35                 4096 	jr	NZ, 00102$
                                   4097 ;main.c:597: holeendx = 174;
      000C19 21rD0r00              4098 	ld	hl, #_holeendx
      000C1C 36 AE                 4099 	ld	(hl), #0xae
                                   4100 ;main.c:598: holestartx = 255;   // Resetting hole start value
      000C1E 21rCFr00              4101 	ld	hl, #_holestartx
      000C21 36 FF                 4102 	ld	(hl), #0xff
                                   4103 ;main.c:599: set_bkg_tiles(camtileidx, 10, 3, 7, holeendmap);
      000C23 21r00r00              4104 	ld	hl, #_holeendmap
      000C26 E5                    4105 	push	hl
      000C27 11 03 07              4106 	ld	de, #0x0703
      000C2A D5                    4107 	push	de
      000C2B 3E 0A                 4108 	ld	a, #0x0a
      000C2D F5                    4109 	push	af
      000C2E 33                    4110 	inc	sp
      000C2F FAr0Br00              4111 	ld	a, (#_camtileidx)
      000C32 F5                    4112 	push	af
      000C33 33                    4113 	inc	sp
      000C34 CDr00r00              4114 	call	_set_bkg_tiles
      000C37 E8 06                 4115 	add	sp, #6
                                   4116 ;main.c:600: nextcamtileidx = get_tile_idx(camtileidx + 3);
      000C39 FAr0Br00              4117 	ld	a, (#_camtileidx)
      000C3C C6 03                 4118 	add	a, #0x03
      000C3E 4F                    4119 	ld	c, a
                                   4120 ;main.c:303: return newidxnum > 31 ? newidxnum - 32 : newidxnum;
      000C3F 3E 1F                 4121 	ld	a, #0x1f
      000C41 91                    4122 	sub	a, c
      000C42 30 05                 4123 	jr	NC, 00114$
      000C44 79                    4124 	ld	a, c
      000C45 C6 E0                 4125 	add	a, #0xe0
      000C47 18 01                 4126 	jr	00115$
      000C49                       4127 00114$:
      000C49 79                    4128 	ld	a, c
      000C4A                       4129 00115$:
      000C4A EAr0Cr00              4130 	ld	(#_nextcamtileidx),a
                                   4131 ;main.c:600: nextcamtileidx = get_tile_idx(camtileidx + 3);
      000C4D C9                    4132 	ret
      000C4E                       4133 00102$:
                                   4134 ;main.c:602: set_bkg_tiles(camtileidx, 10, 3, 7, holemap);
      000C4E 21r00r00              4135 	ld	hl, #_holemap
      000C51 E5                    4136 	push	hl
      000C52 11 03 07              4137 	ld	de, #0x0703
      000C55 D5                    4138 	push	de
      000C56 3E 0A                 4139 	ld	a, #0x0a
      000C58 F5                    4140 	push	af
      000C59 33                    4141 	inc	sp
      000C5A FAr0Br00              4142 	ld	a, (#_camtileidx)
      000C5D F5                    4143 	push	af
      000C5E 33                    4144 	inc	sp
      000C5F CDr00r00              4145 	call	_set_bkg_tiles
      000C62 E8 06                 4146 	add	sp, #6
                                   4147 ;main.c:603: nextcamtileidx = get_tile_idx(camtileidx + 3);
      000C64 FAr0Br00              4148 	ld	a, (#_camtileidx)
      000C67 C6 03                 4149 	add	a, #0x03
      000C69 4F                    4150 	ld	c, a
                                   4151 ;main.c:303: return newidxnum > 31 ? newidxnum - 32 : newidxnum;
      000C6A 3E 1F                 4152 	ld	a, #0x1f
      000C6C 91                    4153 	sub	a, c
      000C6D 30 05                 4154 	jr	NC, 00116$
      000C6F 79                    4155 	ld	a, c
      000C70 C6 E0                 4156 	add	a, #0xe0
      000C72 18 01                 4157 	jr	00117$
      000C74                       4158 00116$:
      000C74 79                    4159 	ld	a, c
      000C75                       4160 00117$:
      000C75 EAr0Cr00              4161 	ld	(#_nextcamtileidx),a
                                   4162 ;main.c:603: nextcamtileidx = get_tile_idx(camtileidx + 3);
                                   4163 ;main.c:605: }
      000C78 C9                    4164 	ret
                                   4165 ;main.c:608: void manage_hole_props() {
                                   4166 ;	---------------------------------
                                   4167 ; Function manage_hole_props
                                   4168 ; ---------------------------------
      000C79                       4169 _manage_hole_props::
                                   4170 ;main.c:609: if(holestartx != 255 && holestartx > screenminx) { // Road hole has appeared
      000C79 21rCAr00              4171 	ld	hl, #_screenminx
      000C7C 4E                    4172 	ld	c, (hl)
                                   4173 ;main.c:610: holestartx -= roadscrspeed;
      000C7D 21rB3r00              4174 	ld	hl, #_roadscrspeed
      000C80 46                    4175 	ld	b, (hl)
                                   4176 ;main.c:609: if(holestartx != 255 && holestartx > screenminx) { // Road hole has appeared
      000C81 FArCFr00              4177 	ld	a, (#_holestartx)
      000C84 3C                    4178 	inc	a
      000C85 28 0A                 4179 	jr	Z, 00102$
      000C87 79                    4180 	ld	a, c
      000C88 21rCFr00              4181 	ld	hl, #_holestartx
      000C8B 96                    4182 	sub	a, (hl)
      000C8C 30 03                 4183 	jr	NC, 00102$
                                   4184 ;main.c:610: holestartx -= roadscrspeed;
      000C8E 7E                    4185 	ld	a, (hl)
      000C8F 90                    4186 	sub	a, b
      000C90 77                    4187 	ld	(hl), a
      000C91                       4188 00102$:
                                   4189 ;main.c:612: if (holeendx != 0) {  // Road hole end reached
      000C91 21rD0r00              4190 	ld	hl, #_holeendx
      000C94 7E                    4191 	ld	a, (hl)
      000C95 B7                    4192 	or	a, a
      000C96 28 04                 4193 	jr	Z, 00107$
                                   4194 ;main.c:613: holeendx -= roadscrspeed;
      000C98 7E                    4195 	ld	a, (hl)
      000C99 90                    4196 	sub	a, b
      000C9A 77                    4197 	ld	(hl), a
      000C9B C9                    4198 	ret
      000C9C                       4199 00107$:
                                   4200 ;main.c:614: } else if(holeendx < screenminx) {
      000C9C 21rD0r00              4201 	ld	hl, #_holeendx
      000C9F 7E                    4202 	ld	a, (hl)
      000CA0 91                    4203 	sub	a, c
      000CA1 D0                    4204 	ret	NC
                                   4205 ;main.c:615: holeendx = 0;   // Resetting hole end value
      000CA2 36 00                 4206 	ld	(hl), #0x00
                                   4207 ;main.c:617: }
      000CA4 C9                    4208 	ret
                                   4209 ;main.c:620: void manage_projectiles() {
                                   4210 ;	---------------------------------
                                   4211 ; Function manage_projectiles
                                   4212 ; ---------------------------------
      000CA5                       4213 _manage_projectiles::
                                   4214 ;main.c:621: for(pjctptr = projectiles; pjctptr <= projectiles + pjctllimit; pjctptr++) { // Projectiles handling
      000CA5 21r58r00              4215 	ld	hl, #_pjctptr
      000CA8 3Er16                 4216 	ld	a, #<(_projectiles)
      000CAA 22                    4217 	ld	(hl+), a
      000CAB 36s00                 4218 	ld	(hl), #>(_projectiles)
      000CAD                       4219 00116$:
      000CAD FArC9r00              4220 	ld	a, (#_pjctllimit)
      000CB0 26 00                 4221 	ld	h, #0x00
      000CB2 6F                    4222 	ld	l, a
      000CB3 29                    4223 	add	hl, hl
      000CB4 29                    4224 	add	hl, hl
      000CB5 29                    4225 	add	hl, hl
      000CB6 11r16r00              4226 	ld	de, #_projectiles
      000CB9 19                    4227 	add	hl, de
      000CBA 4D                    4228 	ld	c, l
      000CBB 44                    4229 	ld	b, h
      000CBC 21r58r00              4230 	ld	hl, #_pjctptr
      000CBF 79                    4231 	ld	a, c
      000CC0 96                    4232 	sub	a, (hl)
      000CC1 23                    4233 	inc	hl
      000CC2 78                    4234 	ld	a, b
      000CC3 9E                    4235 	sbc	a, (hl)
      000CC4 D8                    4236 	ret	C
                                   4237 ;main.c:622: if(pjctptr->oam != NULL) {
      000CC5 21r59r00              4238 	ld	hl, #_pjctptr + 1
      000CC8 2B                    4239 	dec	hl
      000CC9 2A                    4240 	ld	a, (hl+)
      000CCA 4F                    4241 	ld	c, a
      000CCB 46                    4242 	ld	b, (hl)
      000CCC 21 06 00              4243 	ld	hl, #0x0006
      000CCF 09                    4244 	add	hl, bc
      000CD0 2A                    4245 	ld	a, (hl+)
      000CD1 B6                    4246 	or	a,(hl)
      000CD2 CAr6Er0D              4247 	jp	Z, 00117$
                                   4248 ;main.c:623: move_projectile(pjctptr);
      000CD5 21r58r00              4249 	ld	hl, #_pjctptr
      000CD8 2A                    4250 	ld	a, (hl+)
      000CD9 66                    4251 	ld	h, (hl)
      000CDA 6F                    4252 	ld	l, a
      000CDB E5                    4253 	push	hl
      000CDC CDr11r17              4254 	call	_move_projectile
      000CDF E8 02                 4255 	add	sp, #2
                                   4256 ;main.c:624: for(machptr = machines; machptr <= machines + enlimit; machptr++) {
      000CE1 21rC6r00              4257 	ld	hl, #_machptr
      000CE4 36r5C                 4258 	ld	(hl), #<(_machines)
      000CE6 23                    4259 	inc	hl
      000CE7 36s00                 4260 	ld	(hl), #>(_machines)
      000CE9                       4261 00114$:
      000CE9 21rCFr00              4262 	ld	hl, #_enlimit
      000CEC 4E                    4263 	ld	c, (hl)
      000CED 06 00                 4264 	ld	b, #0x00
      000CEF 69                    4265 	ld	l, c
      000CF0 60                    4266 	ld	h, b
      000CF1 29                    4267 	add	hl, hl
      000CF2 29                    4268 	add	hl, hl
      000CF3 29                    4269 	add	hl, hl
      000CF4 29                    4270 	add	hl, hl
      000CF5 09                    4271 	add	hl, bc
      000CF6 11r5Cr00              4272 	ld	de, #_machines
      000CF9 19                    4273 	add	hl, de
      000CFA 4D                    4274 	ld	c, l
      000CFB 44                    4275 	ld	b, h
      000CFC 21rC6r00              4276 	ld	hl, #_machptr
      000CFF 79                    4277 	ld	a, c
      000D00 96                    4278 	sub	a, (hl)
      000D01 23                    4279 	inc	hl
      000D02 78                    4280 	ld	a, b
      000D03 9E                    4281 	sbc	a, (hl)
      000D04 38 68                 4282 	jr	C, 00117$
                                   4283 ;main.c:625: if(is_alive(machptr)) {
      000D06 21rC6r00              4284 	ld	hl, #_machptr
      000D09 2A                    4285 	ld	a, (hl+)
      000D0A 66                    4286 	ld	h, (hl)
      000D0B 6F                    4287 	ld	l, a
      000D0C E5                    4288 	push	hl
      000D0D CDr21r16              4289 	call	_is_alive
      000D10 E8 02                 4290 	add	sp, #2
      000D12 7B                    4291 	ld	a, e
      000D13 B7                    4292 	or	a, a
      000D14 28 4A                 4293 	jr	Z, 00108$
                                   4294 ;main.c:626: if(pl == machptr && (iframeflg || (!pl->groundflg && pjctptr->oam->y > 95))) {
      000D16 FArC2r00              4295 	ld	a, (#_pl)
      000D19 21rC6r00              4296 	ld	hl, #_machptr
      000D1C 96                    4297 	sub	a, (hl)
      000D1D 20 2E                 4298 	jr	NZ, 00102$
      000D1F FArC3r00              4299 	ld	a, (#_pl + 1)
      000D22 21rC7r00              4300 	ld	hl, #_machptr + 1
      000D25 96                    4301 	sub	a, (hl)
      000D26 20 25                 4302 	jr	NZ, 00102$
      000D28 FArCBr00              4303 	ld	a, (#_iframeflg)
      000D2B B7                    4304 	or	a, a
      000D2C 20 32                 4305 	jr	NZ, 00108$
      000D2E 21rC3r00              4306 	ld	hl, #_pl + 1
      000D31 2B                    4307 	dec	hl
      000D32 2A                    4308 	ld	a, (hl+)
      000D33 4F                    4309 	ld	c, a
      000D34 46                    4310 	ld	b, (hl)
      000D35 0A                    4311 	ld	a, (bc)
      000D36 B7                    4312 	or	a, a
      000D37 20 14                 4313 	jr	NZ, 00102$
      000D39 21r59r00              4314 	ld	hl, #_pjctptr + 1
      000D3C 2B                    4315 	dec	hl
      000D3D 2A                    4316 	ld	a, (hl+)
      000D3E 4F                    4317 	ld	c, a
      000D3F 46                    4318 	ld	b, (hl)
      000D40 21 06 00              4319 	ld	hl, #0x0006
      000D43 09                    4320 	add	hl, bc
      000D44 2A                    4321 	ld	a, (hl+)
      000D45 66                    4322 	ld	h, (hl)
      000D46 6F                    4323 	ld	l, a
      000D47 4E                    4324 	ld	c, (hl)
      000D48 3E 5F                 4325 	ld	a, #0x5f
      000D4A 91                    4326 	sub	a, c
      000D4B 38 13                 4327 	jr	C, 00108$
                                   4328 ;main.c:627: continue;   // Avoid hit during iframes or when player jumps and a bullet is above him on the road
      000D4D                       4329 00102$:
                                   4330 ;main.c:629: check_projectile_collsn(machptr, pjctptr); // Check collision for all machines on screen
      000D4D 21r58r00              4331 	ld	hl, #_pjctptr
      000D50 2A                    4332 	ld	a, (hl+)
      000D51 66                    4333 	ld	h, (hl)
      000D52 6F                    4334 	ld	l, a
      000D53 E5                    4335 	push	hl
      000D54 21rC6r00              4336 	ld	hl, #_machptr
      000D57 2A                    4337 	ld	a, (hl+)
      000D58 66                    4338 	ld	h, (hl)
      000D59 6F                    4339 	ld	l, a
      000D5A E5                    4340 	push	hl
      000D5B CDr98r1C              4341 	call	_check_projectile_collsn
      000D5E E8 04                 4342 	add	sp, #4
      000D60                       4343 00108$:
                                   4344 ;main.c:624: for(machptr = machines; machptr <= machines + enlimit; machptr++) {
      000D60 21rC6r00              4345 	ld	hl, #_machptr
      000D63 7E                    4346 	ld	a, (hl)
      000D64 C6 11                 4347 	add	a, #0x11
      000D66 22                    4348 	ld	(hl+), a
      000D67 7E                    4349 	ld	a, (hl)
      000D68 CE 00                 4350 	adc	a, #0x00
      000D6A 77                    4351 	ld	(hl), a
      000D6B C3rE9r0C              4352 	jp	00114$
      000D6E                       4353 00117$:
                                   4354 ;main.c:621: for(pjctptr = projectiles; pjctptr <= projectiles + pjctllimit; pjctptr++) { // Projectiles handling
      000D6E 21r58r00              4355 	ld	hl, #_pjctptr
      000D71 7E                    4356 	ld	a, (hl)
      000D72 C6 08                 4357 	add	a, #0x08
      000D74 22                    4358 	ld	(hl+), a
      000D75 7E                    4359 	ld	a, (hl)
      000D76 CE 00                 4360 	adc	a, #0x00
      000D78 77                    4361 	ld	(hl), a
                                   4362 ;main.c:634: }
      000D79 C3rADr0C              4363 	jp	00116$
                                   4364 ;main.c:636: void manage_machines() {
                                   4365 ;	---------------------------------
                                   4366 ; Function manage_machines
                                   4367 ; ---------------------------------
      000D7C                       4368 _manage_machines::
                                   4369 ;main.c:637: for(machptr = machines; machptr <= machines + enlimit; machptr++) {    // Player and enemies handling
      000D7C 21rC6r00              4370 	ld	hl, #_machptr
      000D7F 36r5C                 4371 	ld	(hl), #<(_machines)
      000D81 23                    4372 	inc	hl
      000D82 36s00                 4373 	ld	(hl), #>(_machines)
      000D84                       4374 00112$:
      000D84 21rCFr00              4375 	ld	hl, #_enlimit
      000D87 4E                    4376 	ld	c, (hl)
      000D88 06 00                 4377 	ld	b, #0x00
      000D8A 69                    4378 	ld	l, c
      000D8B 60                    4379 	ld	h, b
      000D8C 29                    4380 	add	hl, hl
      000D8D 29                    4381 	add	hl, hl
      000D8E 29                    4382 	add	hl, hl
      000D8F 29                    4383 	add	hl, hl
      000D90 09                    4384 	add	hl, bc
      000D91 11r5Cr00              4385 	ld	de, #_machines
      000D94 19                    4386 	add	hl, de
      000D95 4D                    4387 	ld	c, l
      000D96 44                    4388 	ld	b, h
      000D97 21rC6r00              4389 	ld	hl, #_machptr
      000D9A 79                    4390 	ld	a, c
      000D9B 96                    4391 	sub	a, (hl)
      000D9C 23                    4392 	inc	hl
      000D9D 78                    4393 	ld	a, b
      000D9E 9E                    4394 	sbc	a, (hl)
      000D9F D8                    4395 	ret	C
                                   4396 ;main.c:638: if(machptr != pl && machptr->y != 0) {
      000DA0 FArC6r00              4397 	ld	a, (#_machptr)
      000DA3 21rC2r00              4398 	ld	hl, #_pl
      000DA6 96                    4399 	sub	a, (hl)
      000DA7 20 09                 4400 	jr	NZ, 00156$
      000DA9 FArC7r00              4401 	ld	a, (#_machptr + 1)
      000DAC 21rC3r00              4402 	ld	hl, #_pl + 1
      000DAF 96                    4403 	sub	a, (hl)
      000DB0 28 44                 4404 	jr	Z, 00106$
      000DB2                       4405 00156$:
      000DB2 21rC7r00              4406 	ld	hl, #_machptr + 1
      000DB5 2B                    4407 	dec	hl
      000DB6 2A                    4408 	ld	a, (hl+)
      000DB7 4F                    4409 	ld	c, a
      000DB8 46                    4410 	ld	b, (hl)
      000DB9 59                    4411 	ld	e, c
      000DBA 50                    4412 	ld	d, b
      000DBB 13                    4413 	inc	de
      000DBC 13                    4414 	inc	de
      000DBD 1A                    4415 	ld	a, (de)
      000DBE B7                    4416 	or	a, a
      000DBF 28 35                 4417 	jr	Z, 00106$
                                   4418 ;main.c:639: if(!iframeflg && pl->explcount == 0 && pl->groundflg == machptr->groundflg) {    // Player hasn't exploded
      000DC1 FArCBr00              4419 	ld	a, (#_iframeflg)
      000DC4 B7                    4420 	or	a, a
      000DC5 20 23                 4421 	jr	NZ, 00102$
      000DC7 21rC3r00              4422 	ld	hl, #_pl + 1
      000DCA 2B                    4423 	dec	hl
      000DCB 2A                    4424 	ld	a, (hl+)
      000DCC 5F                    4425 	ld	e, a
      000DCD 56                    4426 	ld	d, (hl)
      000DCE 21 07 00              4427 	ld	hl, #0x0007
      000DD1 19                    4428 	add	hl, de
      000DD2 7E                    4429 	ld	a, (hl)
      000DD3 B7                    4430 	or	a, a
      000DD4 20 14                 4431 	jr	NZ, 00102$
      000DD6 1A                    4432 	ld	a, (de)
      000DD7 F5                    4433 	push	af
      000DD8 0A                    4434 	ld	a, (bc)
      000DD9 4F                    4435 	ld	c, a
      000DDA F1                    4436 	pop	af
      000DDB 91                    4437 	sub	a, c
      000DDC 20 0C                 4438 	jr	NZ, 00102$
                                   4439 ;main.c:640: check_player_machine_collsn(machptr);
      000DDE 21rC6r00              4440 	ld	hl, #_machptr
      000DE1 2A                    4441 	ld	a, (hl+)
      000DE2 66                    4442 	ld	h, (hl)
      000DE3 6F                    4443 	ld	l, a
      000DE4 E5                    4444 	push	hl
      000DE5 CDrF1r1D              4445 	call	_check_player_machine_collsn
      000DE8 E8 02                 4446 	add	sp, #2
      000DEA                       4447 00102$:
                                   4448 ;main.c:642: exec_enemy_pattern(machptr);
      000DEA 21rC6r00              4449 	ld	hl, #_machptr
      000DED 2A                    4450 	ld	a, (hl+)
      000DEE 66                    4451 	ld	h, (hl)
      000DEF 6F                    4452 	ld	l, a
      000DF0 E5                    4453 	push	hl
      000DF1 CDrAEr20              4454 	call	_exec_enemy_pattern
      000DF4 E8 02                 4455 	add	sp, #2
      000DF6                       4456 00106$:
                                   4457 ;main.c:644: if(machptr->explcount != 0) {
      000DF6 21rC7r00              4458 	ld	hl, #_machptr + 1
      000DF9 2B                    4459 	dec	hl
      000DFA 2A                    4460 	ld	a, (hl+)
      000DFB 4F                    4461 	ld	c, a
      000DFC 46                    4462 	ld	b, (hl)
      000DFD 21 07 00              4463 	ld	hl, #0x0007
      000E00 09                    4464 	add	hl, bc
      000E01 7E                    4465 	ld	a, (hl)
      000E02 B7                    4466 	or	a, a
      000E03 28 0C                 4467 	jr	Z, 00113$
                                   4468 ;main.c:645: explode_machine(machptr);
      000E05 21rC6r00              4469 	ld	hl, #_machptr
      000E08 2A                    4470 	ld	a, (hl+)
      000E09 66                    4471 	ld	h, (hl)
      000E0A 6F                    4472 	ld	l, a
      000E0B E5                    4473 	push	hl
      000E0C CDr87r18              4474 	call	_explode_machine
      000E0F E8 02                 4475 	add	sp, #2
      000E11                       4476 00113$:
                                   4477 ;main.c:637: for(machptr = machines; machptr <= machines + enlimit; machptr++) {    // Player and enemies handling
      000E11 21rC6r00              4478 	ld	hl, #_machptr
      000E14 7E                    4479 	ld	a, (hl)
      000E15 C6 11                 4480 	add	a, #0x11
      000E17 22                    4481 	ld	(hl+), a
      000E18 7E                    4482 	ld	a, (hl)
      000E19 CE 00                 4483 	adc	a, #0x00
      000E1B 77                    4484 	ld	(hl), a
                                   4485 ;main.c:648: }
      000E1C C3r84r0D              4486 	jp	00112$
                                   4487 ;main.c:651: void manage_sound_chnls() {
                                   4488 ;	---------------------------------
                                   4489 ; Function manage_sound_chnls
                                   4490 ; ---------------------------------
      000E1F                       4491 _manage_sound_chnls::
                                   4492 ;main.c:652: for(i = 0; i < 4; i++) {
      000E1F 21r0Dr00              4493 	ld	hl, #_i
      000E22 36 00                 4494 	ld	(hl), #0x00
      000E24                       4495 00104$:
                                   4496 ;main.c:653: if(chmutedcyccnt[i] != 255) {
      000E24 3ErD2                 4497 	ld	a, #<(_chmutedcyccnt)
      000E26 21r0Dr00              4498 	ld	hl, #_i
      000E29 86                    4499 	add	a, (hl)
      000E2A 4F                    4500 	ld	c, a
      000E2B 3Es00                 4501 	ld	a, #>(_chmutedcyccnt)
      000E2D CE 00                 4502 	adc	a, #0x00
      000E2F 47                    4503 	ld	b, a
      000E30 0A                    4504 	ld	a, (bc)
      000E31 3C                    4505 	inc	a
      000E32 28 07                 4506 	jr	Z, 00105$
                                   4507 ;main.c:654: upd_mute_chnl_cycles(i);
      000E34 7E                    4508 	ld	a, (hl)
      000E35 F5                    4509 	push	af
      000E36 33                    4510 	inc	sp
      000E37 CDr86r28              4511 	call	_upd_mute_chnl_cycles
      000E3A 33                    4512 	inc	sp
      000E3B                       4513 00105$:
                                   4514 ;main.c:652: for(i = 0; i < 4; i++) {
      000E3B 21r0Dr00              4515 	ld	hl, #_i
      000E3E 34                    4516 	inc	(hl)
      000E3F 7E                    4517 	ld	a, (hl)
      000E40 D6 04                 4518 	sub	a, #0x04
      000E42 38 E0                 4519 	jr	C, 00104$
                                   4520 ;main.c:657: }
      000E44 C9                    4521 	ret
                                   4522 ;main.c:660: void manage_player() {
                                   4523 ;	---------------------------------
                                   4524 ; Function manage_player
                                   4525 ; ---------------------------------
      000E45                       4526 _manage_player::
      000E45 E8 FE                 4527 	add	sp, #-2
                                   4528 ;main.c:661: if(iframeflg) {    // Invincibility period
      000E47 FArCBr00              4529 	ld	a, (#_iframeflg)
      000E4A B7                    4530 	or	a, a
      000E4B 28 03                 4531 	jr	Z, 00102$
                                   4532 ;main.c:662: check_iframes();
      000E4D CDr24r1C              4533 	call	_check_iframes
      000E50                       4534 00102$:
                                   4535 ;main.c:665: if(lockmvmnt != 2) {
      000E50 FArC9r00              4536 	ld	a, (#_lockmvmnt)
      000E53 D6 02                 4537 	sub	a, #0x02
      000E55 28 4E                 4538 	jr	Z, 00107$
                                   4539 ;main.c:666: if(pl->x + pl->width > holestartx && !fallinholeflg) { // Hole in the road and player is inside
      000E57 21rC3r00              4540 	ld	hl, #_pl + 1
      000E5A 2B                    4541 	dec	hl
      000E5B 2A                    4542 	ld	a, (hl+)
      000E5C 4F                    4543 	ld	c, a
      000E5D 46                    4544 	ld	b, (hl)
      000E5E 69                    4545 	ld	l, c
      000E5F 60                    4546 	ld	h, b
      000E60 23                    4547 	inc	hl
      000E61 5E                    4548 	ld	e, (hl)
      000E62 16 00                 4549 	ld	d, #0x00
      000E64 21 05 00              4550 	ld	hl, #0x0005
      000E67 09                    4551 	add	hl, bc
      000E68 7E                    4552 	ld	a, (hl)
      000E69 06 00                 4553 	ld	b, #0x00
      000E6B 83                    4554 	add	a, e
      000E6C 4F                    4555 	ld	c, a
      000E6D 78                    4556 	ld	a, b
      000E6E 8A                    4557 	adc	a, d
      000E6F 47                    4558 	ld	b, a
      000E70 FArCFr00              4559 	ld	a, (#_holestartx)
      000E73 F8 00                 4560 	ldhl	sp,	#0
      000E75 77                    4561 	ld	(hl), a
      000E76 AF                    4562 	xor	a, a
      000E77 23                    4563 	inc	hl
      000E78 32                    4564 	ld	(hl-), a
      000E79 7E                    4565 	ld	a, (hl)
      000E7A 91                    4566 	sub	a, c
      000E7B 23                    4567 	inc	hl
      000E7C 7E                    4568 	ld	a, (hl)
      000E7D 98                    4569 	sbc	a, b
      000E7E 56                    4570 	ld	d, (hl)
      000E7F 78                    4571 	ld	a, b
      000E80 CB 7F                 4572 	bit	7,a
      000E82 28 07                 4573 	jr	Z, 00300$
      000E84 CB 7A                 4574 	bit	7, d
      000E86 20 08                 4575 	jr	NZ, 00301$
      000E88 BF                    4576 	cp	a, a
      000E89 18 05                 4577 	jr	00301$
      000E8B                       4578 00300$:
      000E8B CB 7A                 4579 	bit	7, d
      000E8D 28 01                 4580 	jr	Z, 00301$
      000E8F 37                    4581 	scf
      000E90                       4582 00301$:
      000E90 30 16                 4583 	jr	NC, 00108$
      000E92 21rCCr00              4584 	ld	hl, #_fallinholeflg
      000E95 7E                    4585 	ld	a, (hl)
      000E96 B7                    4586 	or	a, a
      000E97 20 0F                 4587 	jr	NZ, 00108$
                                   4588 ;main.c:667: fallinholeflg = 1;
      000E99 36 01                 4589 	ld	(hl), #0x01
                                   4590 ;main.c:668: lockmvmnt = 3;
      000E9B 21rC9r00              4591 	ld	hl, #_lockmvmnt
      000E9E 36 03                 4592 	ld	(hl), #0x03
                                   4593 ;main.c:669: se_fall_in_hole();
      000EA0 CDrABr28              4594 	call	_se_fall_in_hole
      000EA3 18 03                 4595 	jr	00108$
      000EA5                       4596 00107$:
                                   4597 ;main.c:672: anim_jump();
      000EA5 CDr7Dr1F              4598 	call	_anim_jump
      000EA8                       4599 00108$:
                                   4600 ;main.c:675: if(fallinholeflg) {
      000EA8 FArCCr00              4601 	ld	a, (#_fallinholeflg)
      000EAB B7                    4602 	or	a, a
      000EAC 28 3C                 4603 	jr	Z, 00113$
                                   4604 ;main.c:676: move_machine(pl, -1, 2); // Animate fall
      000EAE 11 FF 02              4605 	ld	de, #0x02ff
      000EB1 D5                    4606 	push	de
      000EB2 21rC2r00              4607 	ld	hl, #_pl
      000EB5 2A                    4608 	ld	a, (hl+)
      000EB6 66                    4609 	ld	h, (hl)
      000EB7 6F                    4610 	ld	l, a
      000EB8 E5                    4611 	push	hl
      000EB9 CDrF3r08              4612 	call	_move_machine
      000EBC E8 04                 4613 	add	sp, #4
                                   4614 ;main.c:666: if(pl->x + pl->width > holestartx && !fallinholeflg) { // Hole in the road and player is inside
      000EBE 21rC3r00              4615 	ld	hl, #_pl + 1
      000EC1 2B                    4616 	dec	hl
      000EC2 2A                    4617 	ld	a, (hl+)
      000EC3 4F                    4618 	ld	c, a
      000EC4 46                    4619 	ld	b, (hl)
                                   4620 ;main.c:677: if(pl->y > 144 && pl->explcount == 0) {
      000EC5 69                    4621 	ld	l, c
      000EC6 60                    4622 	ld	h, b
      000EC7 23                    4623 	inc	hl
      000EC8 23                    4624 	inc	hl
      000EC9 5E                    4625 	ld	e, (hl)
      000ECA 3E 90                 4626 	ld	a, #0x90
      000ECC 93                    4627 	sub	a, e
      000ECD 30 1B                 4628 	jr	NC, 00113$
      000ECF 21 07 00              4629 	ld	hl, #0x0007
      000ED2 09                    4630 	add	hl, bc
      000ED3 7E                    4631 	ld	a, (hl)
      000ED4 B7                    4632 	or	a, a
      000ED5 20 13                 4633 	jr	NZ, 00113$
                                   4634 ;main.c:678: take_damage(pl, pl->shield);
      000ED7 21 0B 00              4635 	ld	hl, #0x000b
      000EDA 09                    4636 	add	hl, bc
      000EDB 7E                    4637 	ld	a, (hl)
      000EDC F5                    4638 	push	af
      000EDD 33                    4639 	inc	sp
      000EDE 21rC2r00              4640 	ld	hl, #_pl
      000EE1 2A                    4641 	ld	a, (hl+)
      000EE2 66                    4642 	ld	h, (hl)
      000EE3 6F                    4643 	ld	l, a
      000EE4 E5                    4644 	push	hl
      000EE5 CDrC1r1A              4645 	call	_take_damage
      000EE8 E8 03                 4646 	add	sp, #3
      000EEA                       4647 00113$:
                                   4648 ;main.c:682: if(!is_alive(pl) && pllives != 0 && pl->explcount == 0) {
      000EEA 21rC2r00              4649 	ld	hl, #_pl
      000EED 2A                    4650 	ld	a, (hl+)
      000EEE 66                    4651 	ld	h, (hl)
      000EEF 6F                    4652 	ld	l, a
      000EF0 E5                    4653 	push	hl
      000EF1 CDr21r16              4654 	call	_is_alive
      000EF4 E8 02                 4655 	add	sp, #2
      000EF6 7B                    4656 	ld	a, e
      000EF7 B7                    4657 	or	a, a
      000EF8 20 18                 4658 	jr	NZ, 00115$
      000EFA FArC8r00              4659 	ld	a, (#_pllives)
      000EFD B7                    4660 	or	a, a
      000EFE 28 12                 4661 	jr	Z, 00115$
      000F00 21rC3r00              4662 	ld	hl, #_pl + 1
      000F03 2B                    4663 	dec	hl
      000F04 2A                    4664 	ld	a, (hl+)
      000F05 4F                    4665 	ld	c, a
      000F06 46                    4666 	ld	b, (hl)
      000F07 21 07 00              4667 	ld	hl, #0x0007
      000F0A 09                    4668 	add	hl, bc
      000F0B 7E                    4669 	ld	a, (hl)
      000F0C B7                    4670 	or	a, a
      000F0D 20 03                 4671 	jr	NZ, 00115$
                                   4672 ;main.c:683: respawn_player();
      000F0F CDr4Er04              4673 	call	_respawn_player
      000F12                       4674 00115$:
                                   4675 ;main.c:686: if(abtncnt != 0) {
      000F12 FAr5Br00              4676 	ld	a, (#_abtncnt)
      000F15 B7                    4677 	or	a, a
      000F16 28 19                 4678 	jr	Z, 00119$
                                   4679 ;main.c:687: abtncnt = abtncnt == abtncooldown ? 0 : abtncnt + 1;
      000F18 21rCEr00              4680 	ld	hl, #_abtncooldown
      000F1B 4E                    4681 	ld	c, (hl)
      000F1C FAr5Br00              4682 	ld	a, (#_abtncnt)
      000F1F 91                    4683 	sub	a, c
      000F20 20 05                 4684 	jr	NZ, 00152$
      000F22 01 00 00              4685 	ld	bc, #0x0000
      000F25 18 06                 4686 	jr	00153$
      000F27                       4687 00152$:
      000F27 FAr5Br00              4688 	ld	a, (#_abtncnt)
      000F2A 3C                    4689 	inc	a
      000F2B 4F                    4690 	ld	c, a
      000F2C 17                    4691 	rla
      000F2D                       4692 00153$:
      000F2D 21r5Br00              4693 	ld	hl, #_abtncnt
      000F30 71                    4694 	ld	(hl), c
      000F31                       4695 00119$:
                                   4696 ;main.c:690: if(lockmvmnt != 1 && lockmvmnt != 3) { // Check horizontal lock
      000F31 FArC9r00              4697 	ld	a, (#_lockmvmnt)
      000F34 3D                    4698 	dec	a
      000F35 28 32                 4699 	jr	Z, 00125$
      000F37 FArC9r00              4700 	ld	a, (#_lockmvmnt)
      000F3A D6 03                 4701 	sub	a, #0x03
      000F3C 28 2B                 4702 	jr	Z, 00125$
                                   4703 ;main.c:691: if(joypad() & J_LEFT) {
      000F3E CDr00r00              4704 	call	_joypad
      000F41 CB 4B                 4705 	bit	1, e
      000F43 28 10                 4706 	jr	Z, 00121$
                                   4707 ;main.c:692: move_player(-plspeed, 0);
      000F45 AF                    4708 	xor	a, a
      000F46 21r13r00              4709 	ld	hl, #_plspeed
      000F49 96                    4710 	sub	a, (hl)
      000F4A 47                    4711 	ld	b, a
      000F4B AF                    4712 	xor	a, a
      000F4C F5                    4713 	push	af
      000F4D 33                    4714 	inc	sp
      000F4E C5                    4715 	push	bc
      000F4F 33                    4716 	inc	sp
      000F50 CDrC6r09              4717 	call	_move_player
      000F53 E8 02                 4718 	add	sp, #2
      000F55                       4719 00121$:
                                   4720 ;main.c:694: if(joypad() & J_RIGHT) {
      000F55 CDr00r00              4721 	call	_joypad
      000F58 7B                    4722 	ld	a, e
      000F59 0F                    4723 	rrca
      000F5A 30 0D                 4724 	jr	NC, 00125$
                                   4725 ;main.c:695: move_player(plspeed, 0);
      000F5C AF                    4726 	xor	a, a
      000F5D F5                    4727 	push	af
      000F5E 33                    4728 	inc	sp
      000F5F FAr13r00              4729 	ld	a, (#_plspeed)
      000F62 F5                    4730 	push	af
      000F63 33                    4731 	inc	sp
      000F64 CDrC6r09              4732 	call	_move_player
      000F67 E8 02                 4733 	add	sp, #2
      000F69                       4734 00125$:
                                   4735 ;main.c:698: if(lockmvmnt != 2 && lockmvmnt != 3) { // Check vertical lock
      000F69 FArC9r00              4736 	ld	a,(#_lockmvmnt)
      000F6C FE 02                 4737 	cp	a,#0x02
      000F6E 28 2F                 4738 	jr	Z, 00132$
      000F70 D6 03                 4739 	sub	a, #0x03
      000F72 28 2B                 4740 	jr	Z, 00132$
                                   4741 ;main.c:699: if(joypad() & J_UP) {
      000F74 CDr00r00              4742 	call	_joypad
      000F77 CB 53                 4743 	bit	2, e
      000F79 28 10                 4744 	jr	Z, 00128$
                                   4745 ;main.c:700: move_player(0, -plspeed);
      000F7B AF                    4746 	xor	a, a
      000F7C 21r13r00              4747 	ld	hl, #_plspeed
      000F7F 96                    4748 	sub	a, (hl)
      000F80 47                    4749 	ld	b, a
      000F81 C5                    4750 	push	bc
      000F82 33                    4751 	inc	sp
      000F83 AF                    4752 	xor	a, a
      000F84 F5                    4753 	push	af
      000F85 33                    4754 	inc	sp
      000F86 CDrC6r09              4755 	call	_move_player
      000F89 E8 02                 4756 	add	sp, #2
      000F8B                       4757 00128$:
                                   4758 ;main.c:702: if(joypad() & J_DOWN) {
      000F8B CDr00r00              4759 	call	_joypad
      000F8E CB 5B                 4760 	bit	3, e
      000F90 28 0D                 4761 	jr	Z, 00132$
                                   4762 ;main.c:703: move_player(0, plspeed);
      000F92 FAr13r00              4763 	ld	a, (#_plspeed)
      000F95 F5                    4764 	push	af
      000F96 33                    4765 	inc	sp
      000F97 AF                    4766 	xor	a, a
      000F98 F5                    4767 	push	af
      000F99 33                    4768 	inc	sp
      000F9A CDrC6r09              4769 	call	_move_player
      000F9D E8 02                 4770 	add	sp, #2
      000F9F                       4771 00132$:
                                   4772 ;main.c:706: if(joypad() & J_B) {
      000F9F CDr00r00              4773 	call	_joypad
      000FA2 CB 6B                 4774 	bit	5, e
      000FA4 28 57                 4775 	jr	Z, 00141$
                                   4776 ;main.c:707: if(abtncnt == 0) { // Check cooldown period before firing
      000FA6 FAr5Br00              4777 	ld	a, (#_abtncnt)
      000FA9 B7                    4778 	or	a, a
      000FAA 20 51                 4779 	jr	NZ, 00141$
                                   4780 ;main.c:708: switch(plgun) {
      000FAC FArDBr00              4781 	ld	a, (#_plgun)
      000FAF B7                    4782 	or	a, a
      000FB0 28 0F                 4783 	jr	Z, 00134$
      000FB2 FArDBr00              4784 	ld	a, (#_plgun)
      000FB5 3D                    4785 	dec	a
      000FB6 28 1C                 4786 	jr	Z, 00135$
      000FB8 FArDBr00              4787 	ld	a, (#_plgun)
      000FBB D6 02                 4788 	sub	a, #0x02
      000FBD 28 28                 4789 	jr	Z, 00136$
      000FBF 18 37                 4790 	jr	00137$
                                   4791 ;main.c:709: case 0:
      000FC1                       4792 00134$:
                                   4793 ;main.c:710: fire_bullet(pl, 2, 0);
      000FC1 AF                    4794 	xor	a, a
      000FC2 57                    4795 	ld	d,a
      000FC3 1E 02                 4796 	ld	e,#0x02
      000FC5 D5                    4797 	push	de
      000FC6 21rC2r00              4798 	ld	hl, #_pl
      000FC9 2A                    4799 	ld	a, (hl+)
      000FCA 66                    4800 	ld	h, (hl)
      000FCB 6F                    4801 	ld	l, a
      000FCC E5                    4802 	push	hl
      000FCD CDr8Ar13              4803 	call	_fire_bullet
      000FD0 E8 04                 4804 	add	sp, #4
                                   4805 ;main.c:711: break;
      000FD2 18 24                 4806 	jr	00137$
                                   4807 ;main.c:712: case 1:
      000FD4                       4808 00135$:
                                   4809 ;main.c:713: fire_bigbullet(pl, 2, 0);
      000FD4 AF                    4810 	xor	a, a
      000FD5 57                    4811 	ld	d,a
      000FD6 1E 02                 4812 	ld	e,#0x02
      000FD8 D5                    4813 	push	de
      000FD9 21rC2r00              4814 	ld	hl, #_pl
      000FDC 2A                    4815 	ld	a, (hl+)
      000FDD 66                    4816 	ld	h, (hl)
      000FDE 6F                    4817 	ld	l, a
      000FDF E5                    4818 	push	hl
      000FE0 CDr00r14              4819 	call	_fire_bigbullet
      000FE3 E8 04                 4820 	add	sp, #4
                                   4821 ;main.c:714: break;
      000FE5 18 11                 4822 	jr	00137$
                                   4823 ;main.c:715: case 2:
      000FE7                       4824 00136$:
                                   4825 ;main.c:716: fire_laser(pl, 2, 0);
      000FE7 AF                    4826 	xor	a, a
      000FE8 57                    4827 	ld	d,a
      000FE9 1E 02                 4828 	ld	e,#0x02
      000FEB D5                    4829 	push	de
      000FEC 21rC2r00              4830 	ld	hl, #_pl
      000FEF 2A                    4831 	ld	a, (hl+)
      000FF0 66                    4832 	ld	h, (hl)
      000FF1 6F                    4833 	ld	l, a
      000FF2 E5                    4834 	push	hl
      000FF3 CDr76r14              4835 	call	_fire_laser
      000FF6 E8 04                 4836 	add	sp, #4
                                   4837 ;main.c:718: }
      000FF8                       4838 00137$:
                                   4839 ;main.c:719: abtncnt = 1;
      000FF8 21r5Br00              4840 	ld	hl, #_abtncnt
      000FFB 36 01                 4841 	ld	(hl), #0x01
      000FFD                       4842 00141$:
                                   4843 ;main.c:722: if(joypad() & J_A) { 
      000FFD CDr00r00              4844 	call	_joypad
      001000 CB 63                 4845 	bit	4, e
      001002 28 3E                 4846 	jr	Z, 00146$
                                   4847 ;main.c:723: if(lockmvmnt == 0 && !isapressed) {
      001004 FArC9r00              4848 	ld	a, (#_lockmvmnt)
      001007 B7                    4849 	or	a, a
      001008 20 31                 4850 	jr	NZ, 00143$
      00100A FArD1r00              4851 	ld	a, (#_isapressed)
      00100D B7                    4852 	or	a, a
      00100E 20 2B                 4853 	jr	NZ, 00143$
                                   4854 ;main.c:724: lockmvmnt = 2;  // Lock vert movement during jump
      001010 21rC9r00              4855 	ld	hl, #_lockmvmnt
      001013 36 02                 4856 	ld	(hl), #0x02
                                   4857 ;main.c:725: pl->groundflg = 0;
      001015 21rC3r00              4858 	ld	hl, #_pl + 1
      001018 2B                    4859 	dec	hl
      001019 2A                    4860 	ld	a, (hl+)
      00101A 4F                    4861 	ld	c, a
      00101B 46                    4862 	ld	b, (hl)
      00101C AF                    4863 	xor	a, a
      00101D 02                    4864 	ld	(bc), a
                                   4865 ;main.c:726: jumpstarty = pl->y; // Keeping player y position for landing
      00101E 2B                    4866 	dec	hl
      00101F 2A                    4867 	ld	a, (hl+)
      001020 4F                    4868 	ld	c, a
      001021 46                    4869 	ld	b, (hl)
      001022 03                    4870 	inc	bc
      001023 03                    4871 	inc	bc
      001024 0A                    4872 	ld	a, (bc)
      001025 EArCEr00              4873 	ld	(#_jumpstarty),a
                                   4874 ;main.c:727: set_machine_sprite_tiles(pl, 13);
      001028 3E 0D                 4875 	ld	a, #0x0d
      00102A F5                    4876 	push	af
      00102B 33                    4877 	inc	sp
      00102C 21rC2r00              4878 	ld	hl, #_pl
      00102F 2A                    4879 	ld	a, (hl+)
      001030 66                    4880 	ld	h, (hl)
      001031 6F                    4881 	ld	l, a
      001032 E5                    4882 	push	hl
      001033 CDr74r02              4883 	call	_set_machine_sprite_tiles
      001036 E8 03                 4884 	add	sp, #3
                                   4885 ;main.c:728: se_jump();
      001038 CDr4Ar29              4886 	call	_se_jump
      00103B                       4887 00143$:
                                   4888 ;main.c:730: isapressed = 1;
      00103B 21rD1r00              4889 	ld	hl, #_isapressed
      00103E 36 01                 4890 	ld	(hl), #0x01
      001040 18 05                 4891 	jr	00147$
      001042                       4892 00146$:
                                   4893 ;main.c:732: isapressed = 0;
      001042 21rD1r00              4894 	ld	hl, #_isapressed
      001045 36 00                 4895 	ld	(hl), #0x00
      001047                       4896 00147$:
                                   4897 ;main.c:734: if(joypad() & J_START) {
      001047 CDr00r00              4898 	call	_joypad
      00104A 7B                    4899 	ld	a, e
      00104B 07                    4900 	rlca
      00104C 30 03                 4901 	jr	NC, 00150$
                                   4902 ;main.c:735: pause_game();
      00104E CDr7Br27              4903 	call	_pause_game
      001051                       4904 00150$:
                                   4905 ;main.c:737: }
      001051 E8 02                 4906 	add	sp, #2
      001053 C9                    4907 	ret
                                   4908 ;main.c:740: inline UINT8 get_horiz_dist(UINT8 fstobjx, UINT8 sndobjx) { // Returns the distance between 2 objects on x axis
                                   4909 ;	---------------------------------
                                   4910 ; Function get_horiz_dist
                                   4911 ; ---------------------------------
      001054                       4912 _get_horiz_dist::
                                   4913 ;main.c:741: return fstobjx > sndobjx ? fstobjx - sndobjx : sndobjx - fstobjx;
      001054 F8 03                 4914 	ldhl	sp,	#3
      001056 3A                    4915 	ld	a, (hl-)
      001057 96                    4916 	sub	a, (hl)
      001058 30 04                 4917 	jr	NC, 00103$
      00105A 2A                    4918 	ld	a, (hl+)
      00105B 96                    4919 	sub	a, (hl)
      00105C 18 04                 4920 	jr	00104$
      00105E                       4921 00103$:
      00105E F8 03                 4922 	ldhl	sp,	#3
      001060 3A                    4923 	ld	a, (hl-)
      001061 96                    4924 	sub	a, (hl)
      001062                       4925 00104$:
      001062 5F                    4926 	ld	e, a
                                   4927 ;main.c:742: }
      001063 C9                    4928 	ret
                                   4929 ;main.c:745: void set_projctl_comm_prop(Machine * mch, INT8 speedx, INT8 speedy) {
                                   4930 ;	---------------------------------
                                   4931 ; Function set_projctl_comm_prop
                                   4932 ; ---------------------------------
      001064                       4933 _set_projctl_comm_prop::
      001064 E8 F4                 4934 	add	sp, #-12
                                   4935 ;main.c:746: crntpjct->speedx = speedx;
      001066 21r57r00              4936 	ld	hl, #_crntpjct + 1
      001069 2B                    4937 	dec	hl
      00106A 2A                    4938 	ld	a, (hl+)
      00106B 4F                    4939 	ld	c, a
      00106C 46                    4940 	ld	b, (hl)
      00106D F8 10                 4941 	ldhl	sp,	#16
      00106F 7E                    4942 	ld	a, (hl)
      001070 02                    4943 	ld	(bc), a
                                   4944 ;main.c:747: crntpjct->speedy = speedy;
      001071 21r57r00              4945 	ld	hl, #_crntpjct + 1
      001074 2B                    4946 	dec	hl
      001075 2A                    4947 	ld	a, (hl+)
      001076 4F                    4948 	ld	c, a
      001077 46                    4949 	ld	b, (hl)
      001078 03                    4950 	inc	bc
      001079 F8 11                 4951 	ldhl	sp,	#17
      00107B 7E                    4952 	ld	a, (hl)
      00107C 02                    4953 	ld	(bc), a
                                   4954 ;main.c:748: crntpjct->oam = (shadow_OAM + oamidx);
      00107D 21r56r00              4955 	ld	hl, #_crntpjct
      001080 2A                    4956 	ld	a, (hl+)
      001081 5F                    4957 	ld	e, a
      001082 46                    4958 	ld	b, (hl)
      001083 7B                    4959 	ld	a, e
      001084 C6 06                 4960 	add	a, #0x06
      001086 4F                    4961 	ld	c, a
      001087 30 01                 4962 	jr	NC, 00146$
      001089 04                    4963 	inc	b
      00108A                       4964 00146$:
      00108A 21r14r00              4965 	ld	hl, #_oamidx
      00108D 6E                    4966 	ld	l, (hl)
      00108E 26 00                 4967 	ld	h, #0x00
      001090 29                    4968 	add	hl, hl
      001091 29                    4969 	add	hl, hl
      001092 11r00r00              4970 	ld	de, #_shadow_OAM
      001095 19                    4971 	add	hl, de
      001096 5D                    4972 	ld	e, l
      001097 54                    4973 	ld	d, h
      001098 7B                    4974 	ld	a, e
      001099 02                    4975 	ld	(bc), a
      00109A 03                    4976 	inc	bc
      00109B 7A                    4977 	ld	a, d
      00109C 02                    4978 	ld	(bc), a
                                   4979 ;main.c:749: crntpjct->oam->x = mch->x + mch->gunoffx;
      00109D 21r57r00              4980 	ld	hl, #_crntpjct + 1
      0010A0 2B                    4981 	dec	hl
      0010A1 2A                    4982 	ld	a, (hl+)
      0010A2 4F                    4983 	ld	c, a
      0010A3 46                    4984 	ld	b, (hl)
      0010A4 21 06 00              4985 	ld	hl, #0x0006
      0010A7 09                    4986 	add	hl, bc
      0010A8 2A                    4987 	ld	a, (hl+)
      0010A9 4F                    4988 	ld	c, a
      0010AA 46                    4989 	ld	b, (hl)
      0010AB 03                    4990 	inc	bc
      0010AC F8 0E                 4991 	ldhl	sp,	#14
      0010AE 2A                    4992 	ld	a, (hl+)
      0010AF 5E                    4993 	ld	e, (hl)
      0010B0 F8 00                 4994 	ldhl	sp,	#0
      0010B2 22                    4995 	ld	(hl+), a
      0010B3 73                    4996 	ld	(hl), e
                                   4997 ;c
      0010B4 D1                    4998 	pop	de
      0010B5 D5                    4999 	push	de
      0010B6 6B                    5000 	ld	l, e
      0010B7 62                    5001 	ld	h, d
      0010B8 23                    5002 	inc	hl
      0010B9 E5                    5003 	push	hl
      0010BA 7D                    5004 	ld	a, l
      0010BB F8 04                 5005 	ldhl	sp,	#4
      0010BD 77                    5006 	ld	(hl), a
      0010BE E1                    5007 	pop	hl
      0010BF 7C                    5008 	ld	a, h
      0010C0 F8 03                 5009 	ldhl	sp,	#3
      0010C2 32                    5010 	ld	(hl-), a
      0010C3 2A                    5011 	ld	a, (hl+)
      0010C4 5F                    5012 	ld	e, a
      0010C5 56                    5013 	ld	d, (hl)
      0010C6 1A                    5014 	ld	a, (de)
      0010C7 F8 0B                 5015 	ldhl	sp,	#11
      0010C9 77                    5016 	ld	(hl), a
                                   5017 ;c
      0010CA D1                    5018 	pop	de
      0010CB D5                    5019 	push	de
      0010CC 21 09 00              5020 	ld	hl, #0x0009
      0010CF 19                    5021 	add	hl, de
      0010D0 5D                    5022 	ld	e, l
      0010D1 54                    5023 	ld	d, h
      0010D2 1A                    5024 	ld	a, (de)
      0010D3 F8 0B                 5025 	ldhl	sp,	#11
      0010D5 5E                    5026 	ld	e, (hl)
      0010D6 83                    5027 	add	a, e
      0010D7 02                    5028 	ld	(bc), a
                                   5029 ;main.c:750: crntpjct->oam->y = mch->y + mch->gunoffy;
      0010D8 21r57r00              5030 	ld	hl, #_crntpjct + 1
      0010DB 2B                    5031 	dec	hl
      0010DC 2A                    5032 	ld	a, (hl+)
      0010DD 4F                    5033 	ld	c, a
      0010DE 46                    5034 	ld	b, (hl)
      0010DF 21 06 00              5035 	ld	hl, #0x0006
      0010E2 09                    5036 	add	hl, bc
      0010E3 2A                    5037 	ld	a, (hl+)
      0010E4 4F                    5038 	ld	c, a
      0010E5 46                    5039 	ld	b, (hl)
      0010E6 E1                    5040 	pop	hl
      0010E7 E5                    5041 	push	hl
      0010E8 23                    5042 	inc	hl
      0010E9 23                    5043 	inc	hl
      0010EA 7E                    5044 	ld	a, (hl)
      0010EB F8 0B                 5045 	ldhl	sp,	#11
      0010ED 77                    5046 	ld	(hl), a
                                   5047 ;c
      0010EE D1                    5048 	pop	de
      0010EF D5                    5049 	push	de
      0010F0 21 0A 00              5050 	ld	hl, #0x000a
      0010F3 19                    5051 	add	hl, de
      0010F4 5D                    5052 	ld	e, l
      0010F5 54                    5053 	ld	d, h
      0010F6 1A                    5054 	ld	a, (de)
      0010F7 F8 0B                 5055 	ldhl	sp,	#11
      0010F9 5E                    5056 	ld	e, (hl)
      0010FA 83                    5057 	add	a, e
      0010FB 02                    5058 	ld	(bc), a
                                   5059 ;main.c:751: if((mch->type == 3 || mch->type == 1) && (crntpjct->oam->x < pl->x || crntpjct->oam->x > (pl->x + pl->width))) {
                                   5060 ;c
      0010FC D1                    5061 	pop	de
      0010FD D5                    5062 	push	de
      0010FE 21 0C 00              5063 	ld	hl, #0x000c
      001101 19                    5064 	add	hl, de
      001102 4D                    5065 	ld	c, l
      001103 44                    5066 	ld	b, h
      001104 0A                    5067 	ld	a, (bc)
      001105 F8 07                 5068 	ldhl	sp,	#7
      001107 77                    5069 	ld	(hl), a
                                   5070 ;main.c:746: crntpjct->speedx = speedx;
      001108 21r56r00              5071 	ld	hl, #_crntpjct
      00110B 2A                    5072 	ld	a, (hl+)
      00110C 5E                    5073 	ld	e, (hl)
      00110D F8 08                 5074 	ldhl	sp,	#8
      00110F 22                    5075 	ld	(hl+), a
                                   5076 ;main.c:753: crntpjct->aimedflg = 1;
                                   5077 ;c
      001110 7B                    5078 	ld	a, e
      001111 32                    5079 	ld	(hl-), a
      001112 2A                    5080 	ld	a, (hl+)
      001113 5F                    5081 	ld	e, a
      001114 56                    5082 	ld	d, (hl)
      001115 21 05 00              5083 	ld	hl, #0x0005
      001118 19                    5084 	add	hl, de
      001119 E5                    5085 	push	hl
      00111A 7D                    5086 	ld	a, l
      00111B F8 0C                 5087 	ldhl	sp,	#12
      00111D 77                    5088 	ld	(hl), a
      00111E E1                    5089 	pop	hl
      00111F 7C                    5090 	ld	a, h
      001120 F8 0B                 5091 	ldhl	sp,	#11
      001122 77                    5092 	ld	(hl), a
                                   5093 ;main.c:751: if((mch->type == 3 || mch->type == 1) && (crntpjct->oam->x < pl->x || crntpjct->oam->x > (pl->x + pl->width))) {
      001123 F8 07                 5094 	ldhl	sp,	#7
      001125 7E                    5095 	ld	a, (hl)
      001126 D6 03                 5096 	sub	a, #0x03
      001128 28 07                 5097 	jr	Z, 00106$
      00112A F8 07                 5098 	ldhl	sp,	#7
      00112C 7E                    5099 	ld	a, (hl)
      00112D 3D                    5100 	dec	a
      00112E C2r24r13              5101 	jp	NZ,00102$
      001131                       5102 00106$:
                                   5103 ;c
      001131 F8 08                 5104 	ldhl	sp,#8
      001133 2A                    5105 	ld	a, (hl+)
      001134 5F                    5106 	ld	e, a
      001135 56                    5107 	ld	d, (hl)
      001136 21 06 00              5108 	ld	hl, #0x0006
      001139 19                    5109 	add	hl, de
      00113A 2A                    5110 	ld	a, (hl+)
      00113B 4F                    5111 	ld	c, a
      00113C 46                    5112 	ld	b, (hl)
      00113D 03                    5113 	inc	bc
      00113E 0A                    5114 	ld	a, (bc)
      00113F 4F                    5115 	ld	c, a
      001140 21rC3r00              5116 	ld	hl, #_pl + 1
      001143 2B                    5117 	dec	hl
      001144 2A                    5118 	ld	a, (hl+)
      001145 5F                    5119 	ld	e, a
      001146 56                    5120 	ld	d, (hl)
      001147 6B                    5121 	ld	l, e
      001148 62                    5122 	ld	h, d
      001149 23                    5123 	inc	hl
      00114A 46                    5124 	ld	b, (hl)
      00114B 79                    5125 	ld	a, c
      00114C 90                    5126 	sub	a, b
      00114D 38 28                 5127 	jr	C, 00101$
      00114F 68                    5128 	ld	l, b
      001150 26 00                 5129 	ld	h, #0x00
      001152 13                    5130 	inc	de
      001153 13                    5131 	inc	de
      001154 13                    5132 	inc	de
      001155 13                    5133 	inc	de
      001156 13                    5134 	inc	de
      001157 1A                    5135 	ld	a, (de)
      001158 16 00                 5136 	ld	d, #0x00
      00115A 5F                    5137 	ld	e, a
      00115B 19                    5138 	add	hl, de
      00115C 06 00                 5139 	ld	b, #0x00
      00115E 58                    5140 	ld	e, b
      00115F 54                    5141 	ld	d, h
      001160 7D                    5142 	ld	a, l
      001161 91                    5143 	sub	a, c
      001162 7C                    5144 	ld	a, h
      001163 98                    5145 	sbc	a, b
      001164 CB 7B                 5146 	bit	7, e
      001166 28 07                 5147 	jr	Z, 00150$
      001168 CB 7A                 5148 	bit	7, d
      00116A 20 08                 5149 	jr	NZ, 00151$
      00116C BF                    5150 	cp	a, a
      00116D 18 05                 5151 	jr	00151$
      00116F                       5152 00150$:
      00116F CB 7A                 5153 	bit	7, d
      001171 28 01                 5154 	jr	Z, 00151$
      001173 37                    5155 	scf
      001174                       5156 00151$:
      001174 D2r24r13              5157 	jp	NC, 00102$
      001177                       5158 00101$:
                                   5159 ;main.c:753: crntpjct->aimedflg = 1;
      001177 F8 0A                 5160 	ldhl	sp,	#10
      001179 2A                    5161 	ld	a, (hl+)
      00117A 66                    5162 	ld	h, (hl)
      00117B 6F                    5163 	ld	l, a
      00117C 36 01                 5164 	ld	(hl), #0x01
                                   5165 ;main.c:751: if((mch->type == 3 || mch->type == 1) && (crntpjct->oam->x < pl->x || crntpjct->oam->x > (pl->x + pl->width))) {
      00117E 21rC2r00              5166 	ld	hl, #_pl
      001181 2A                    5167 	ld	a, (hl+)
      001182 5E                    5168 	ld	e, (hl)
      001183 F8 08                 5169 	ldhl	sp,	#8
      001185 22                    5170 	ld	(hl+), a
                                   5171 ;c
      001186 7B                    5172 	ld	a, e
      001187 32                    5173 	ld	(hl-), a
      001188 2A                    5174 	ld	a, (hl+)
      001189 5F                    5175 	ld	e, a
      00118A 56                    5176 	ld	d, (hl)
      00118B 6B                    5177 	ld	l, e
      00118C 62                    5178 	ld	h, d
      00118D 23                    5179 	inc	hl
      00118E E5                    5180 	push	hl
      00118F 7D                    5181 	ld	a, l
      001190 F8 0C                 5182 	ldhl	sp,	#12
      001192 77                    5183 	ld	(hl), a
      001193 E1                    5184 	pop	hl
      001194 7C                    5185 	ld	a, h
      001195 F8 0B                 5186 	ldhl	sp,	#11
      001197 32                    5187 	ld	(hl-), a
      001198 2A                    5188 	ld	a, (hl+)
      001199 5F                    5189 	ld	e, a
      00119A 56                    5190 	ld	d, (hl)
      00119B 1A                    5191 	ld	a, (de)
      00119C F8 04                 5192 	ldhl	sp,	#4
      00119E 77                    5193 	ld	(hl), a
      00119F AF                    5194 	xor	a, a
      0011A0 23                    5195 	inc	hl
                                   5196 ;main.c:754: precfctr = pl->x + 46 < mch->x || mch->x + mch->width + 30 < pl->x ? 100 : 10;
                                   5197 ;c
      0011A1 32                    5198 	ld	(hl-), a
      0011A2 2A                    5199 	ld	a, (hl+)
      0011A3 5F                    5200 	ld	e, a
      0011A4 56                    5201 	ld	d, (hl)
      0011A5 21 2E 00              5202 	ld	hl, #0x002e
      0011A8 19                    5203 	add	hl, de
      0011A9 E5                    5204 	push	hl
      0011AA 7D                    5205 	ld	a, l
      0011AB F8 08                 5206 	ldhl	sp,	#8
      0011AD 77                    5207 	ld	(hl), a
      0011AE E1                    5208 	pop	hl
      0011AF 7C                    5209 	ld	a, h
      0011B0 F8 07                 5210 	ldhl	sp,	#7
      0011B2 77                    5211 	ld	(hl), a
      0011B3 F8 02                 5212 	ldhl	sp,#2
      0011B5 2A                    5213 	ld	a, (hl+)
      0011B6 5F                    5214 	ld	e, a
      0011B7 56                    5215 	ld	d, (hl)
      0011B8 1A                    5216 	ld	a, (de)
      0011B9 4F                    5217 	ld	c, a
      0011BA 06 00                 5218 	ld	b, #0x00
      0011BC F8 06                 5219 	ldhl	sp,	#6
      0011BE 7E                    5220 	ld	a, (hl)
      0011BF 91                    5221 	sub	a, c
      0011C0 23                    5222 	inc	hl
      0011C1 7E                    5223 	ld	a, (hl)
      0011C2 98                    5224 	sbc	a, b
      0011C3 56                    5225 	ld	d, (hl)
      0011C4 78                    5226 	ld	a, b
      0011C5 CB 7F                 5227 	bit	7,a
      0011C7 28 07                 5228 	jr	Z, 00152$
      0011C9 CB 7A                 5229 	bit	7, d
      0011CB 20 08                 5230 	jr	NZ, 00153$
      0011CD BF                    5231 	cp	a, a
      0011CE 18 05                 5232 	jr	00153$
      0011D0                       5233 00152$:
      0011D0 CB 7A                 5234 	bit	7, d
      0011D2 28 01                 5235 	jr	Z, 00153$
      0011D4 37                    5236 	scf
      0011D5                       5237 00153$:
      0011D5 38 2E                 5238 	jr	C, 00114$
                                   5239 ;c
      0011D7 D1                    5240 	pop	de
      0011D8 D5                    5241 	push	de
      0011D9 21 05 00              5242 	ld	hl, #0x0005
      0011DC 19                    5243 	add	hl, de
      0011DD 5D                    5244 	ld	e, l
      0011DE 54                    5245 	ld	d, h
      0011DF 1A                    5246 	ld	a, (de)
      0011E0 26 00                 5247 	ld	h, #0x00
      0011E2 6F                    5248 	ld	l, a
      0011E3 09                    5249 	add	hl, bc
      0011E4 01 1E 00              5250 	ld	bc, #0x001e
      0011E7 09                    5251 	add	hl,bc
      0011E8 4D                    5252 	ld	c, l
      0011E9 44                    5253 	ld	b, h
      0011EA F8 04                 5254 	ldhl	sp,	#4
      0011EC 79                    5255 	ld	a, c
      0011ED 96                    5256 	sub	a, (hl)
      0011EE 23                    5257 	inc	hl
      0011EF 78                    5258 	ld	a, b
      0011F0 9E                    5259 	sbc	a, (hl)
      0011F1 78                    5260 	ld	a, b
      0011F2 57                    5261 	ld	d, a
      0011F3 CB 7E                 5262 	bit	7, (hl)
      0011F5 28 07                 5263 	jr	Z, 00154$
      0011F7 CB 7A                 5264 	bit	7, d
      0011F9 20 08                 5265 	jr	NZ, 00155$
      0011FB BF                    5266 	cp	a, a
      0011FC 18 05                 5267 	jr	00155$
      0011FE                       5268 00154$:
      0011FE CB 7A                 5269 	bit	7, d
      001200 28 01                 5270 	jr	Z, 00155$
      001202 37                    5271 	scf
      001203                       5272 00155$:
      001203 30 05                 5273 	jr	NC, 00111$
      001205                       5274 00114$:
      001205 01 64 00              5275 	ld	bc, #0x0064
      001208 18 03                 5276 	jr	00112$
      00120A                       5277 00111$:
      00120A 01 0A 00              5278 	ld	bc, #0x000a
      00120D                       5279 00112$:
      00120D 21rD6r00              5280 	ld	hl, #_precfctr
      001210 71                    5281 	ld	(hl), c
                                   5282 ;main.c:746: crntpjct->speedx = speedx;
      001211 21r57r00              5283 	ld	hl, #_crntpjct + 1
      001214 2B                    5284 	dec	hl
      001215 2A                    5285 	ld	a, (hl+)
      001216 4F                    5286 	ld	c, a
      001217 46                    5287 	ld	b, (hl)
                                   5288 ;main.c:751: if((mch->type == 3 || mch->type == 1) && (crntpjct->oam->x < pl->x || crntpjct->oam->x > (pl->x + pl->width))) {
      001218 21 06 00              5289 	ld	hl, #0x0006
      00121B 09                    5290 	add	hl, bc
      00121C 33                    5291 	inc	sp
      00121D 33                    5292 	inc	sp
      00121E 5D                    5293 	ld	e, l
      00121F 54                    5294 	ld	d, h
      001220 D5                    5295 	push	de
      001221 1A                    5296 	ld	a, (de)
      001222 4F                    5297 	ld	c, a
      001223 13                    5298 	inc	de
      001224 1A                    5299 	ld	a, (de)
      001225 47                    5300 	ld	b, a
                                   5301 ;main.c:755: slope = ((crntpjct->oam->y - pl->y) * precfctr) / (crntpjct->oam->x - (pl->x + 8));
      001226 0A                    5302 	ld	a, (bc)
      001227 5F                    5303 	ld	e, a
      001228 16 00                 5304 	ld	d, #0x00
      00122A F8 08                 5305 	ldhl	sp,	#8
      00122C 2A                    5306 	ld	a, (hl+)
      00122D 66                    5307 	ld	h, (hl)
      00122E 6F                    5308 	ld	l, a
      00122F 23                    5309 	inc	hl
      001230 23                    5310 	inc	hl
      001231 6E                    5311 	ld	l, (hl)
      001232 26 00                 5312 	ld	h, #0x00
      001234 7B                    5313 	ld	a, e
      001235 95                    5314 	sub	a, l
      001236 5F                    5315 	ld	e, a
      001237 7A                    5316 	ld	a, d
      001238 9C                    5317 	sbc	a, h
      001239 57                    5318 	ld	d, a
      00123A FArD6r00              5319 	ld	a, (#_precfctr)
      00123D F8 02                 5320 	ldhl	sp,	#2
      00123F 77                    5321 	ld	(hl), a
      001240 AF                    5322 	xor	a, a
      001241 23                    5323 	inc	hl
      001242 77                    5324 	ld	(hl), a
      001243 C5                    5325 	push	bc
      001244 2B                    5326 	dec	hl
      001245 2A                    5327 	ld	a, (hl+)
      001246 66                    5328 	ld	h, (hl)
      001247 6F                    5329 	ld	l, a
      001248 E5                    5330 	push	hl
      001249 D5                    5331 	push	de
      00124A CDr00r00              5332 	call	__mulint
      00124D E8 04                 5333 	add	sp, #4
      00124F E5                    5334 	push	hl
      001250 F8 08                 5335 	ldhl	sp,	#8
      001252 73                    5336 	ld	(hl), e
      001253 F8 09                 5337 	ldhl	sp,	#9
      001255 72                    5338 	ld	(hl), d
      001256 E1                    5339 	pop	hl
      001257 C1                    5340 	pop	bc
      001258 03                    5341 	inc	bc
      001259 0A                    5342 	ld	a, (bc)
      00125A F8 06                 5343 	ldhl	sp,	#6
      00125C 77                    5344 	ld	(hl), a
      00125D AF                    5345 	xor	a, a
      00125E 23                    5346 	inc	hl
      00125F 77                    5347 	ld	(hl), a
      001260 F8 0A                 5348 	ldhl	sp,#10
      001262 2A                    5349 	ld	a, (hl+)
      001263 5F                    5350 	ld	e, a
      001264 56                    5351 	ld	d, (hl)
      001265 1A                    5352 	ld	a, (de)
      001266 16 00                 5353 	ld	d, #0x00
                                   5354 ;c
      001268 5F                    5355 	ld	e, a
      001269 21 08 00              5356 	ld	hl, #0x0008
      00126C 19                    5357 	add	hl, de
      00126D E5                    5358 	push	hl
      00126E 7D                    5359 	ld	a, l
      00126F F8 0A                 5360 	ldhl	sp,	#10
      001271 77                    5361 	ld	(hl), a
      001272 E1                    5362 	pop	hl
      001273 7C                    5363 	ld	a, h
      001274 F8 09                 5364 	ldhl	sp,	#9
      001276 32                    5365 	ld	(hl-), a
      001277 2B                    5366 	dec	hl
      001278 2B                    5367 	dec	hl
      001279 2A                    5368 	ld	a, (hl+)
      00127A 5F                    5369 	ld	e, a
      00127B 2A                    5370 	ld	a, (hl+)
      00127C 57                    5371 	ld	d, a
      00127D 2A                    5372 	ld	a, (hl+)
      00127E 66                    5373 	ld	h, (hl)
      00127F 6F                    5374 	ld	l, a
      001280 7B                    5375 	ld	a, e
      001281 95                    5376 	sub	a, l
      001282 5F                    5377 	ld	e, a
      001283 7A                    5378 	ld	a, d
      001284 9C                    5379 	sbc	a, h
      001285 F8 0B                 5380 	ldhl	sp,	#11
      001287 32                    5381 	ld	(hl-), a
      001288 73                    5382 	ld	(hl), e
      001289 2A                    5383 	ld	a, (hl+)
      00128A 66                    5384 	ld	h, (hl)
      00128B 6F                    5385 	ld	l, a
      00128C E5                    5386 	push	hl
      00128D F8 06                 5387 	ldhl	sp,	#6
      00128F 2A                    5388 	ld	a, (hl+)
      001290 66                    5389 	ld	h, (hl)
      001291 6F                    5390 	ld	l, a
      001292 E5                    5391 	push	hl
      001293 CDr00r00              5392 	call	__divsint
      001296 E8 04                 5393 	add	sp, #4
      001298 E5                    5394 	push	hl
      001299 F8 0C                 5395 	ldhl	sp,	#12
      00129B 73                    5396 	ld	(hl), e
      00129C F8 0D                 5397 	ldhl	sp,	#13
      00129E 72                    5398 	ld	(hl), d
      00129F E1                    5399 	pop	hl
      0012A0 F8 0A                 5400 	ldhl	sp,	#10
      0012A2 2A                    5401 	ld	a, (hl+)
      0012A3 5E                    5402 	ld	e, (hl)
      0012A4 21rD7r00              5403 	ld	hl, #_slope
      0012A7 22                    5404 	ld	(hl+), a
      0012A8 73                    5405 	ld	(hl), e
                                   5406 ;main.c:751: if((mch->type == 3 || mch->type == 1) && (crntpjct->oam->x < pl->x || crntpjct->oam->x > (pl->x + pl->width))) {
      0012A9 D1                    5407 	pop	de
      0012AA D5                    5408 	push	de
      0012AB 1A                    5409 	ld	a, (de)
      0012AC F8 0A                 5410 	ldhl	sp,	#10
      0012AE 22                    5411 	ld	(hl+), a
      0012AF 13                    5412 	inc	de
      0012B0 1A                    5413 	ld	a, (de)
                                   5414 ;main.c:756: gradient = crntpjct->oam->y - ((slope * crntpjct->oam->x) / precfctr );
      0012B1 32                    5415 	ld	(hl-), a
      0012B2 2A                    5416 	ld	a, (hl+)
      0012B3 5F                    5417 	ld	e, a
      0012B4 56                    5418 	ld	d, (hl)
      0012B5 1A                    5419 	ld	a, (de)
      0012B6 2B                    5420 	dec	hl
      0012B7 2B                    5421 	dec	hl
      0012B8 77                    5422 	ld	(hl), a
      0012B9 7E                    5423 	ld	a, (hl)
      0012BA F8 06                 5424 	ldhl	sp,	#6
      0012BC 77                    5425 	ld	(hl), a
      0012BD AF                    5426 	xor	a, a
      0012BE 23                    5427 	inc	hl
      0012BF 77                    5428 	ld	(hl), a
                                   5429 ;c
      0012C0 F8 0A                 5430 	ldhl	sp,#10
      0012C2 2A                    5431 	ld	a, (hl+)
      0012C3 5F                    5432 	ld	e, a
      0012C4 56                    5433 	ld	d, (hl)
      0012C5 6B                    5434 	ld	l, e
      0012C6 62                    5435 	ld	h, d
      0012C7 23                    5436 	inc	hl
      0012C8 E5                    5437 	push	hl
      0012C9 7D                    5438 	ld	a, l
      0012CA F8 0A                 5439 	ldhl	sp,	#10
      0012CC 77                    5440 	ld	(hl), a
      0012CD E1                    5441 	pop	hl
      0012CE 7C                    5442 	ld	a, h
      0012CF F8 09                 5443 	ldhl	sp,	#9
      0012D1 32                    5444 	ld	(hl-), a
      0012D2 2A                    5445 	ld	a, (hl+)
      0012D3 5F                    5446 	ld	e, a
      0012D4 56                    5447 	ld	d, (hl)
      0012D5 1A                    5448 	ld	a, (de)
      0012D6 23                    5449 	inc	hl
      0012D7 23                    5450 	inc	hl
      0012D8 77                    5451 	ld	(hl), a
      0012D9 3A                    5452 	ld	a, (hl-)
      0012DA 77                    5453 	ld	(hl), a
      0012DB AF                    5454 	xor	a, a
      0012DC 23                    5455 	inc	hl
      0012DD 32                    5456 	ld	(hl-), a
      0012DE 2A                    5457 	ld	a, (hl+)
      0012DF 66                    5458 	ld	h, (hl)
      0012E0 6F                    5459 	ld	l, a
      0012E1 E5                    5460 	push	hl
      0012E2 21rD7r00              5461 	ld	hl, #_slope
      0012E5 2A                    5462 	ld	a, (hl+)
      0012E6 66                    5463 	ld	h, (hl)
      0012E7 6F                    5464 	ld	l, a
      0012E8 E5                    5465 	push	hl
      0012E9 CDr00r00              5466 	call	__mulint
      0012EC E8 04                 5467 	add	sp, #4
      0012EE E5                    5468 	push	hl
      0012EF F8 0C                 5469 	ldhl	sp,	#12
      0012F1 73                    5470 	ld	(hl), e
      0012F2 F8 0D                 5471 	ldhl	sp,	#13
      0012F4 72                    5472 	ld	(hl), d
      0012F5 E1                    5473 	pop	hl
      0012F6 C1                    5474 	pop	bc
      0012F7 E1                    5475 	pop	hl
      0012F8 E5                    5476 	push	hl
      0012F9 C5                    5477 	push	bc
      0012FA E5                    5478 	push	hl
      0012FB F8 0C                 5479 	ldhl	sp,	#12
      0012FD 2A                    5480 	ld	a, (hl+)
      0012FE 66                    5481 	ld	h, (hl)
      0012FF 6F                    5482 	ld	l, a
      001300 E5                    5483 	push	hl
      001301 CDr00r00              5484 	call	__divsint
      001304 E8 04                 5485 	add	sp, #4
      001306 E5                    5486 	push	hl
      001307 F8 0C                 5487 	ldhl	sp,	#12
      001309 73                    5488 	ld	(hl), e
      00130A F8 0D                 5489 	ldhl	sp,	#13
      00130C 72                    5490 	ld	(hl), d
      00130D E1                    5491 	pop	hl
      00130E F8 06                 5492 	ldhl	sp,#6
      001310 2A                    5493 	ld	a, (hl+)
      001311 5F                    5494 	ld	e, a
      001312 56                    5495 	ld	d, (hl)
      001313 F8 0A                 5496 	ldhl	sp,	#10
      001315 2A                    5497 	ld	a, (hl+)
      001316 66                    5498 	ld	h, (hl)
      001317 6F                    5499 	ld	l, a
      001318 7B                    5500 	ld	a, e
      001319 95                    5501 	sub	a, l
      00131A 5F                    5502 	ld	e, a
      00131B 7A                    5503 	ld	a, d
      00131C 9C                    5504 	sbc	a, h
      00131D 21rDAr00              5505 	ld	hl, #_gradient + 1
      001320 32                    5506 	ld	(hl-), a
      001321 73                    5507 	ld	(hl), e
      001322 18 07                 5508 	jr	00103$
      001324                       5509 00102$:
                                   5510 ;main.c:758: crntpjct->aimedflg = 0;
      001324 F8 0A                 5511 	ldhl	sp,	#10
      001326 2A                    5512 	ld	a, (hl+)
      001327 66                    5513 	ld	h, (hl)
      001328 6F                    5514 	ld	l, a
      001329 36 00                 5515 	ld	(hl), #0x00
      00132B                       5516 00103$:
                                   5517 ;main.c:760: incr_oam_sprite_tile_idx(1);
      00132B 3E 01                 5518 	ld	a, #0x01
      00132D F5                    5519 	push	af
      00132E 33                    5520 	inc	sp
      00132F CDr39r01              5521 	call	_incr_oam_sprite_tile_idx
      001332 33                    5522 	inc	sp
                                   5523 ;main.c:288: prjcnt += prjcnt == pjctllimit + 1 ? 0 : 1;
      001333 21rC9r00              5524 	ld	hl, #_pjctllimit
      001336 4E                    5525 	ld	c, (hl)
      001337 06 00                 5526 	ld	b, #0x00
      001339 59                    5527 	ld	e, c
      00133A 50                    5528 	ld	d, b
      00133B 13                    5529 	inc	de
      00133C FAr5Ar00              5530 	ld	a, (#_prjcnt)
      00133F F8 0A                 5531 	ldhl	sp,	#10
      001341 77                    5532 	ld	(hl), a
      001342 AF                    5533 	xor	a, a
      001343 23                    5534 	inc	hl
      001344 32                    5535 	ld	(hl-), a
      001345 7E                    5536 	ld	a, (hl)
      001346 93                    5537 	sub	a, e
      001347 20 0A                 5538 	jr	NZ, 00116$
      001349 23                    5539 	inc	hl
      00134A 7E                    5540 	ld	a, (hl)
      00134B 92                    5541 	sub	a, d
      00134C 20 05                 5542 	jr	NZ, 00116$
      00134E 11 00 00              5543 	ld	de, #0x0000
      001351 18 03                 5544 	jr	00117$
      001353                       5545 00116$:
      001353 11 01 00              5546 	ld	de, #0x0001
      001356                       5547 00117$:
      001356 21r5Ar00              5548 	ld	hl, #_prjcnt
      001359 7E                    5549 	ld	a, (hl)
      00135A 83                    5550 	add	a, e
      00135B 77                    5551 	ld	(hl), a
                                   5552 ;main.c:293: crntpjct = crntpjct == projectiles + pjctllimit ? projectiles : crntpjct + 1;
      00135C 11r16r00              5553 	ld	de, #_projectiles+0
      00135F 69                    5554 	ld	l, c
      001360 60                    5555 	ld	h, b
      001361 29                    5556 	add	hl, hl
      001362 29                    5557 	add	hl, hl
      001363 29                    5558 	add	hl, hl
      001364 19                    5559 	add	hl, de
      001365 4D                    5560 	ld	c, l
      001366 44                    5561 	ld	b, h
      001367 21r56r00              5562 	ld	hl, #_crntpjct
      00136A 7E                    5563 	ld	a, (hl)
      00136B 91                    5564 	sub	a, c
      00136C 20 07                 5565 	jr	NZ, 00118$
      00136E 23                    5566 	inc	hl
      00136F 7E                    5567 	ld	a, (hl)
      001370 90                    5568 	sub	a, b
      001371 28 0E                 5569 	jr	Z, 00119$
      001373 18 00                 5570 	jr	00118$
      001375                       5571 00118$:
      001375 21r56r00              5572 	ld	hl, #_crntpjct
      001378 7E                    5573 	ld	a, (hl)
      001379 C6 08                 5574 	add	a, #0x08
      00137B 5F                    5575 	ld	e, a
      00137C 23                    5576 	inc	hl
      00137D 7E                    5577 	ld	a, (hl)
      00137E CE 00                 5578 	adc	a, #0x00
      001380 57                    5579 	ld	d, a
      001381                       5580 00119$:
      001381 21r56r00              5581 	ld	hl, #_crntpjct
      001384 7B                    5582 	ld	a, e
      001385 22                    5583 	ld	(hl+), a
      001386 72                    5584 	ld	(hl), d
                                   5585 ;main.c:762: itr_projectile_ptr();
                                   5586 ;main.c:763: }
      001387 E8 0C                 5587 	add	sp, #12
      001389 C9                    5588 	ret
                                   5589 ;main.c:766: void fire_bullet(Machine * mch, INT8 speedx, INT8 speedy) {
                                   5590 ;	---------------------------------
                                   5591 ; Function fire_bullet
                                   5592 ; ---------------------------------
      00138A                       5593 _fire_bullet::
                                   5594 ;main.c:298: return prjcnt != pjctllimit + 1 && oamidx != 180;
      00138A 21rC9r00              5595 	ld	hl, #_pjctllimit
      00138D 4E                    5596 	ld	c, (hl)
      00138E 06 00                 5597 	ld	b, #0x00
      001390 03                    5598 	inc	bc
      001391 21r5Ar00              5599 	ld	hl, #_prjcnt
      001394 5E                    5600 	ld	e, (hl)
      001395 16 00                 5601 	ld	d, #0x00
      001397 7B                    5602 	ld	a, e
      001398 91                    5603 	sub	a, c
      001399 20 04                 5604 	jr	NZ, 00120$
      00139B 7A                    5605 	ld	a, d
      00139C 90                    5606 	sub	a, b
      00139D 28 07                 5607 	jr	Z, 00107$
      00139F                       5608 00120$:
      00139F FAr14r00              5609 	ld	a, (#_oamidx)
      0013A2 D6 B4                 5610 	sub	a, #0xb4
      0013A4 20 03                 5611 	jr	NZ, 00108$
      0013A6                       5612 00107$:
      0013A6 AF                    5613 	xor	a, a
      0013A7 18 02                 5614 	jr	00109$
      0013A9                       5615 00108$:
      0013A9 3E 01                 5616 	ld	a, #0x01
      0013AB                       5617 00109$:
                                   5618 ;main.c:767: if(found_free_projectile_space()) {  // Set props only if initialization succeeds
      0013AB B7                    5619 	or	a, a
      0013AC C8                    5620 	ret	Z
                                   5621 ;main.c:768: crntpjct->width = 3;
      0013AD 21r57r00              5622 	ld	hl, #_crntpjct + 1
      0013B0 2B                    5623 	dec	hl
      0013B1 2A                    5624 	ld	a, (hl+)
      0013B2 4F                    5625 	ld	c, a
      0013B3 46                    5626 	ld	b, (hl)
      0013B4 03                    5627 	inc	bc
      0013B5 03                    5628 	inc	bc
      0013B6 03                    5629 	inc	bc
      0013B7 78                    5630 	ld	a, b
      0013B8 69                    5631 	ld	l, c
      0013B9 67                    5632 	ld	h, a
      0013BA 36 03                 5633 	ld	(hl), #0x03
                                   5634 ;main.c:769: crntpjct->height = 3;
      0013BC 21r57r00              5635 	ld	hl, #_crntpjct + 1
      0013BF 2B                    5636 	dec	hl
      0013C0 2A                    5637 	ld	a, (hl+)
      0013C1 4F                    5638 	ld	c, a
      0013C2 46                    5639 	ld	b, (hl)
      0013C3 03                    5640 	inc	bc
      0013C4 03                    5641 	inc	bc
      0013C5 78                    5642 	ld	a, b
      0013C6 69                    5643 	ld	l, c
      0013C7 67                    5644 	ld	h, a
      0013C8 36 03                 5645 	ld	(hl), #0x03
                                   5646 ;main.c:770: crntpjct->damage = 1;
      0013CA 21r57r00              5647 	ld	hl, #_crntpjct + 1
      0013CD 2B                    5648 	dec	hl
      0013CE 2A                    5649 	ld	a, (hl+)
      0013CF 4F                    5650 	ld	c, a
      0013D0 46                    5651 	ld	b, (hl)
      0013D1 21 04 00              5652 	ld	hl, #0x0004
      0013D4 09                    5653 	add	hl, bc
      0013D5 36 01                 5654 	ld	(hl), #0x01
                                   5655 ;main.c:771: set_sprite_tile(oamidx, 0x11);
      0013D7 21r14r00              5656 	ld	hl, #_oamidx
      0013DA 5E                    5657 	ld	e, (hl)
                                   5658 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      0013DB 01r00r00              5659 	ld	bc, #_shadow_OAM+0
      0013DE 16 00                 5660 	ld	d, #0x00
      0013E0 6B                    5661 	ld	l, e
      0013E1 62                    5662 	ld	h, d
      0013E2 29                    5663 	add	hl, hl
      0013E3 29                    5664 	add	hl, hl
      0013E4 09                    5665 	add	hl, bc
      0013E5 23                    5666 	inc	hl
      0013E6 23                    5667 	inc	hl
      0013E7 36 11                 5668 	ld	(hl), #0x11
                                   5669 ;main.c:772: set_projctl_comm_prop(mch, speedx, speedy);
      0013E9 F8 05                 5670 	ldhl	sp,	#5
      0013EB 7E                    5671 	ld	a, (hl)
      0013EC F5                    5672 	push	af
      0013ED 33                    5673 	inc	sp
      0013EE 2B                    5674 	dec	hl
      0013EF 7E                    5675 	ld	a, (hl)
      0013F0 F5                    5676 	push	af
      0013F1 33                    5677 	inc	sp
      0013F2 2B                    5678 	dec	hl
      0013F3 2B                    5679 	dec	hl
      0013F4 2A                    5680 	ld	a, (hl+)
      0013F5 66                    5681 	ld	h, (hl)
      0013F6 6F                    5682 	ld	l, a
      0013F7 E5                    5683 	push	hl
      0013F8 CDr64r10              5684 	call	_set_projctl_comm_prop
      0013FB E8 04                 5685 	add	sp, #4
                                   5686 ;main.c:773: se_fire_bullet();
                                   5687 ;main.c:775: }
      0013FD C3rC7r28              5688 	jp  _se_fire_bullet
                                   5689 ;main.c:778: void fire_bigbullet(Machine * mch, INT8 speedx, INT8 speedy) {
                                   5690 ;	---------------------------------
                                   5691 ; Function fire_bigbullet
                                   5692 ; ---------------------------------
      001400                       5693 _fire_bigbullet::
                                   5694 ;main.c:298: return prjcnt != pjctllimit + 1 && oamidx != 180;
      001400 21rC9r00              5695 	ld	hl, #_pjctllimit
      001403 4E                    5696 	ld	c, (hl)
      001404 06 00                 5697 	ld	b, #0x00
      001406 03                    5698 	inc	bc
      001407 21r5Ar00              5699 	ld	hl, #_prjcnt
      00140A 5E                    5700 	ld	e, (hl)
      00140B 16 00                 5701 	ld	d, #0x00
      00140D 7B                    5702 	ld	a, e
      00140E 91                    5703 	sub	a, c
      00140F 20 04                 5704 	jr	NZ, 00120$
      001411 7A                    5705 	ld	a, d
      001412 90                    5706 	sub	a, b
      001413 28 07                 5707 	jr	Z, 00107$
      001415                       5708 00120$:
      001415 FAr14r00              5709 	ld	a, (#_oamidx)
      001418 D6 B4                 5710 	sub	a, #0xb4
      00141A 20 03                 5711 	jr	NZ, 00108$
      00141C                       5712 00107$:
      00141C AF                    5713 	xor	a, a
      00141D 18 02                 5714 	jr	00109$
      00141F                       5715 00108$:
      00141F 3E 01                 5716 	ld	a, #0x01
      001421                       5717 00109$:
                                   5718 ;main.c:779: if(found_free_projectile_space()) {  // Set props only if initialization succeeds
      001421 B7                    5719 	or	a, a
      001422 C8                    5720 	ret	Z
                                   5721 ;main.c:780: crntpjct->width = 4;
      001423 21r57r00              5722 	ld	hl, #_crntpjct + 1
      001426 2B                    5723 	dec	hl
      001427 2A                    5724 	ld	a, (hl+)
      001428 4F                    5725 	ld	c, a
      001429 46                    5726 	ld	b, (hl)
      00142A 03                    5727 	inc	bc
      00142B 03                    5728 	inc	bc
      00142C 03                    5729 	inc	bc
      00142D 78                    5730 	ld	a, b
      00142E 69                    5731 	ld	l, c
      00142F 67                    5732 	ld	h, a
      001430 36 04                 5733 	ld	(hl), #0x04
                                   5734 ;main.c:781: crntpjct->height = 4;
      001432 21r57r00              5735 	ld	hl, #_crntpjct + 1
      001435 2B                    5736 	dec	hl
      001436 2A                    5737 	ld	a, (hl+)
      001437 4F                    5738 	ld	c, a
      001438 46                    5739 	ld	b, (hl)
      001439 03                    5740 	inc	bc
      00143A 03                    5741 	inc	bc
      00143B 78                    5742 	ld	a, b
      00143C 69                    5743 	ld	l, c
      00143D 67                    5744 	ld	h, a
      00143E 36 04                 5745 	ld	(hl), #0x04
                                   5746 ;main.c:782: crntpjct->damage = 2;
      001440 21r57r00              5747 	ld	hl, #_crntpjct + 1
      001443 2B                    5748 	dec	hl
      001444 2A                    5749 	ld	a, (hl+)
      001445 4F                    5750 	ld	c, a
      001446 46                    5751 	ld	b, (hl)
      001447 21 04 00              5752 	ld	hl, #0x0004
      00144A 09                    5753 	add	hl, bc
      00144B 36 02                 5754 	ld	(hl), #0x02
                                   5755 ;main.c:783: set_sprite_tile(oamidx, 0x12);
      00144D 21r14r00              5756 	ld	hl, #_oamidx
      001450 5E                    5757 	ld	e, (hl)
                                   5758 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      001451 01r00r00              5759 	ld	bc, #_shadow_OAM+0
      001454 16 00                 5760 	ld	d, #0x00
      001456 6B                    5761 	ld	l, e
      001457 62                    5762 	ld	h, d
      001458 29                    5763 	add	hl, hl
      001459 29                    5764 	add	hl, hl
      00145A 09                    5765 	add	hl, bc
      00145B 23                    5766 	inc	hl
      00145C 23                    5767 	inc	hl
      00145D 36 12                 5768 	ld	(hl), #0x12
                                   5769 ;main.c:784: set_projctl_comm_prop(mch, speedx, speedy);
      00145F F8 05                 5770 	ldhl	sp,	#5
      001461 7E                    5771 	ld	a, (hl)
      001462 F5                    5772 	push	af
      001463 33                    5773 	inc	sp
      001464 2B                    5774 	dec	hl
      001465 7E                    5775 	ld	a, (hl)
      001466 F5                    5776 	push	af
      001467 33                    5777 	inc	sp
      001468 2B                    5778 	dec	hl
      001469 2B                    5779 	dec	hl
      00146A 2A                    5780 	ld	a, (hl+)
      00146B 66                    5781 	ld	h, (hl)
      00146C 6F                    5782 	ld	l, a
      00146D E5                    5783 	push	hl
      00146E CDr64r10              5784 	call	_set_projctl_comm_prop
      001471 E8 04                 5785 	add	sp, #4
                                   5786 ;main.c:785: se_fire_bullet();
                                   5787 ;main.c:787: }
      001473 C3rC7r28              5788 	jp  _se_fire_bullet
                                   5789 ;main.c:790: void fire_laser(Machine * mch, INT8 speedx, INT8 speedy) {
                                   5790 ;	---------------------------------
                                   5791 ; Function fire_laser
                                   5792 ; ---------------------------------
      001476                       5793 _fire_laser::
                                   5794 ;main.c:298: return prjcnt != pjctllimit + 1 && oamidx != 180;
      001476 21rC9r00              5795 	ld	hl, #_pjctllimit
      001479 4E                    5796 	ld	c, (hl)
      00147A 06 00                 5797 	ld	b, #0x00
      00147C 03                    5798 	inc	bc
      00147D 21r5Ar00              5799 	ld	hl, #_prjcnt
      001480 5E                    5800 	ld	e, (hl)
      001481 16 00                 5801 	ld	d, #0x00
      001483 7B                    5802 	ld	a, e
      001484 91                    5803 	sub	a, c
      001485 20 04                 5804 	jr	NZ, 00120$
      001487 7A                    5805 	ld	a, d
      001488 90                    5806 	sub	a, b
      001489 28 07                 5807 	jr	Z, 00107$
      00148B                       5808 00120$:
      00148B FAr14r00              5809 	ld	a, (#_oamidx)
      00148E D6 B4                 5810 	sub	a, #0xb4
      001490 20 03                 5811 	jr	NZ, 00108$
      001492                       5812 00107$:
      001492 AF                    5813 	xor	a, a
      001493 18 02                 5814 	jr	00109$
      001495                       5815 00108$:
      001495 3E 01                 5816 	ld	a, #0x01
      001497                       5817 00109$:
                                   5818 ;main.c:791: if(found_free_projectile_space()) {  // Set props only if initialization succeeds
      001497 B7                    5819 	or	a, a
      001498 C8                    5820 	ret	Z
                                   5821 ;main.c:792: crntpjct->width = 8;
      001499 21r57r00              5822 	ld	hl, #_crntpjct + 1
      00149C 2B                    5823 	dec	hl
      00149D 2A                    5824 	ld	a, (hl+)
      00149E 4F                    5825 	ld	c, a
      00149F 46                    5826 	ld	b, (hl)
      0014A0 03                    5827 	inc	bc
      0014A1 03                    5828 	inc	bc
      0014A2 03                    5829 	inc	bc
      0014A3 78                    5830 	ld	a, b
      0014A4 69                    5831 	ld	l, c
      0014A5 67                    5832 	ld	h, a
      0014A6 36 08                 5833 	ld	(hl), #0x08
                                   5834 ;main.c:793: crntpjct->height = 3;
      0014A8 21r57r00              5835 	ld	hl, #_crntpjct + 1
      0014AB 2B                    5836 	dec	hl
      0014AC 2A                    5837 	ld	a, (hl+)
      0014AD 4F                    5838 	ld	c, a
      0014AE 46                    5839 	ld	b, (hl)
      0014AF 03                    5840 	inc	bc
      0014B0 03                    5841 	inc	bc
      0014B1 78                    5842 	ld	a, b
      0014B2 69                    5843 	ld	l, c
      0014B3 67                    5844 	ld	h, a
      0014B4 36 03                 5845 	ld	(hl), #0x03
                                   5846 ;main.c:794: crntpjct->damage = 3;
      0014B6 21r57r00              5847 	ld	hl, #_crntpjct + 1
      0014B9 2B                    5848 	dec	hl
      0014BA 2A                    5849 	ld	a, (hl+)
      0014BB 4F                    5850 	ld	c, a
      0014BC 46                    5851 	ld	b, (hl)
      0014BD 21 04 00              5852 	ld	hl, #0x0004
      0014C0 09                    5853 	add	hl, bc
      0014C1 36 03                 5854 	ld	(hl), #0x03
                                   5855 ;main.c:795: set_sprite_tile(oamidx, 0x13);
      0014C3 21r14r00              5856 	ld	hl, #_oamidx
      0014C6 5E                    5857 	ld	e, (hl)
                                   5858 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      0014C7 01r00r00              5859 	ld	bc, #_shadow_OAM+0
      0014CA 16 00                 5860 	ld	d, #0x00
      0014CC 6B                    5861 	ld	l, e
      0014CD 62                    5862 	ld	h, d
      0014CE 29                    5863 	add	hl, hl
      0014CF 29                    5864 	add	hl, hl
      0014D0 09                    5865 	add	hl, bc
      0014D1 23                    5866 	inc	hl
      0014D2 23                    5867 	inc	hl
      0014D3 36 13                 5868 	ld	(hl), #0x13
                                   5869 ;main.c:796: set_projctl_comm_prop(mch, speedx, speedy);
      0014D5 F8 05                 5870 	ldhl	sp,	#5
      0014D7 7E                    5871 	ld	a, (hl)
      0014D8 F5                    5872 	push	af
      0014D9 33                    5873 	inc	sp
      0014DA 2B                    5874 	dec	hl
      0014DB 7E                    5875 	ld	a, (hl)
      0014DC F5                    5876 	push	af
      0014DD 33                    5877 	inc	sp
      0014DE 2B                    5878 	dec	hl
      0014DF 2B                    5879 	dec	hl
      0014E0 2A                    5880 	ld	a, (hl+)
      0014E1 66                    5881 	ld	h, (hl)
      0014E2 6F                    5882 	ld	l, a
      0014E3 E5                    5883 	push	hl
      0014E4 CDr64r10              5884 	call	_set_projctl_comm_prop
      0014E7 E8 04                 5885 	add	sp, #4
                                   5886 ;main.c:797: se_fire_laser();
                                   5887 ;main.c:799: }
      0014E9 C3rE0r28              5888 	jp  _se_fire_laser
                                   5889 ;main.c:802: void drop_bomb(Machine * mch) {
                                   5890 ;	---------------------------------
                                   5891 ; Function drop_bomb
                                   5892 ; ---------------------------------
      0014EC                       5893 _drop_bomb::
                                   5894 ;main.c:298: return prjcnt != pjctllimit + 1 && oamidx != 180;
      0014EC 21rC9r00              5895 	ld	hl, #_pjctllimit
      0014EF 4E                    5896 	ld	c, (hl)
      0014F0 06 00                 5897 	ld	b, #0x00
      0014F2 03                    5898 	inc	bc
      0014F3 21r5Ar00              5899 	ld	hl, #_prjcnt
      0014F6 5E                    5900 	ld	e, (hl)
      0014F7 16 00                 5901 	ld	d, #0x00
      0014F9 7B                    5902 	ld	a, e
      0014FA 91                    5903 	sub	a, c
      0014FB 20 04                 5904 	jr	NZ, 00120$
      0014FD 7A                    5905 	ld	a, d
      0014FE 90                    5906 	sub	a, b
      0014FF 28 07                 5907 	jr	Z, 00107$
      001501                       5908 00120$:
      001501 FAr14r00              5909 	ld	a, (#_oamidx)
      001504 D6 B4                 5910 	sub	a, #0xb4
      001506 20 03                 5911 	jr	NZ, 00108$
      001508                       5912 00107$:
      001508 AF                    5913 	xor	a, a
      001509 18 02                 5914 	jr	00109$
      00150B                       5915 00108$:
      00150B 3E 01                 5916 	ld	a, #0x01
      00150D                       5917 00109$:
                                   5918 ;main.c:803: if(found_free_projectile_space()) {  // Set props only if initialization succeeds
      00150D B7                    5919 	or	a, a
      00150E C8                    5920 	ret	Z
                                   5921 ;main.c:804: crntpjct->width = 8;
      00150F 21r57r00              5922 	ld	hl, #_crntpjct + 1
      001512 2B                    5923 	dec	hl
      001513 2A                    5924 	ld	a, (hl+)
      001514 4F                    5925 	ld	c, a
      001515 46                    5926 	ld	b, (hl)
      001516 03                    5927 	inc	bc
      001517 03                    5928 	inc	bc
      001518 03                    5929 	inc	bc
      001519 78                    5930 	ld	a, b
      00151A 69                    5931 	ld	l, c
      00151B 67                    5932 	ld	h, a
      00151C 36 08                 5933 	ld	(hl), #0x08
                                   5934 ;main.c:805: crntpjct->height = 8;
      00151E 21r57r00              5935 	ld	hl, #_crntpjct + 1
      001521 2B                    5936 	dec	hl
      001522 2A                    5937 	ld	a, (hl+)
      001523 4F                    5938 	ld	c, a
      001524 46                    5939 	ld	b, (hl)
      001525 03                    5940 	inc	bc
      001526 03                    5941 	inc	bc
      001527 78                    5942 	ld	a, b
      001528 69                    5943 	ld	l, c
      001529 67                    5944 	ld	h, a
      00152A 36 08                 5945 	ld	(hl), #0x08
                                   5946 ;main.c:806: crntpjct->damage = 4;
      00152C 21r57r00              5947 	ld	hl, #_crntpjct + 1
      00152F 2B                    5948 	dec	hl
      001530 2A                    5949 	ld	a, (hl+)
      001531 4F                    5950 	ld	c, a
      001532 46                    5951 	ld	b, (hl)
      001533 21 04 00              5952 	ld	hl, #0x0004
      001536 09                    5953 	add	hl, bc
      001537 36 04                 5954 	ld	(hl), #0x04
                                   5955 ;main.c:807: set_sprite_tile(oamidx, 0x14);
      001539 21r14r00              5956 	ld	hl, #_oamidx
      00153C 5E                    5957 	ld	e, (hl)
                                   5958 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      00153D 01r00r00              5959 	ld	bc, #_shadow_OAM+0
      001540 16 00                 5960 	ld	d, #0x00
      001542 6B                    5961 	ld	l, e
      001543 62                    5962 	ld	h, d
      001544 29                    5963 	add	hl, hl
      001545 29                    5964 	add	hl, hl
      001546 09                    5965 	add	hl, bc
      001547 23                    5966 	inc	hl
      001548 23                    5967 	inc	hl
      001549 36 14                 5968 	ld	(hl), #0x14
                                   5969 ;main.c:808: set_projctl_comm_prop(mch, 0, 2);
      00154B 3E 02                 5970 	ld	a, #0x02
      00154D F5                    5971 	push	af
      00154E 33                    5972 	inc	sp
      00154F AF                    5973 	xor	a, a
      001550 F5                    5974 	push	af
      001551 33                    5975 	inc	sp
      001552 F8 04                 5976 	ldhl	sp,	#4
      001554 2A                    5977 	ld	a, (hl+)
      001555 66                    5978 	ld	h, (hl)
      001556 6F                    5979 	ld	l, a
      001557 E5                    5980 	push	hl
      001558 CDr64r10              5981 	call	_set_projctl_comm_prop
      00155B E8 04                 5982 	add	sp, #4
                                   5983 ;main.c:809: se_drop_bomb();
                                   5984 ;main.c:811: }
      00155D C3rFCr28              5985 	jp  _se_drop_bomb
                                   5986 ;main.c:814: inline INT8 get_prjctl_x_aimed(Projectile * prjct) { // Returns projectile's y position based on player's position
                                   5987 ;	---------------------------------
                                   5988 ; Function get_prjctl_x_aimed
                                   5989 ; ---------------------------------
      001560                       5990 _get_prjctl_x_aimed::
                                   5991 ;main.c:815: return ((prjct->oam->y - gradient) * precfctr) / slope;
      001560 C1                    5992 	pop	bc
      001561 D1                    5993 	pop	de
      001562 D5                    5994 	push	de
      001563 C5                    5995 	push	bc
      001564 21 06 00              5996 	ld	hl, #0x0006
      001567 19                    5997 	add	hl, de
      001568 2A                    5998 	ld	a, (hl+)
      001569 66                    5999 	ld	h, (hl)
      00156A 6F                    6000 	ld	l, a
      00156B 4E                    6001 	ld	c, (hl)
      00156C 06 00                 6002 	ld	b, #0x00
      00156E 79                    6003 	ld	a, c
      00156F 21rD9r00              6004 	ld	hl, #_gradient
      001572 96                    6005 	sub	a, (hl)
      001573 4F                    6006 	ld	c, a
      001574 78                    6007 	ld	a, b
      001575 23                    6008 	inc	hl
      001576 9E                    6009 	sbc	a, (hl)
      001577 47                    6010 	ld	b, a
      001578 21rD6r00              6011 	ld	hl, #_precfctr
      00157B 5E                    6012 	ld	e, (hl)
      00157C 16 00                 6013 	ld	d, #0x00
      00157E D5                    6014 	push	de
      00157F C5                    6015 	push	bc
      001580 CDr00r00              6016 	call	__mulint
      001583 E8 04                 6017 	add	sp, #4
      001585 21rD7r00              6018 	ld	hl, #_slope
      001588 2A                    6019 	ld	a, (hl+)
      001589 66                    6020 	ld	h, (hl)
      00158A 6F                    6021 	ld	l, a
      00158B E5                    6022 	push	hl
      00158C D5                    6023 	push	de
      00158D CDr00r00              6024 	call	__divsint
      001590 E8 04                 6025 	add	sp, #4
                                   6026 ;main.c:816: }
      001592 C9                    6027 	ret
                                   6028 ;main.c:819: inline INT8 get_prjctl_y_aimed(Projectile * prjct) { // Returns projectile's y position based on player's position
                                   6029 ;	---------------------------------
                                   6030 ; Function get_prjctl_y_aimed
                                   6031 ; ---------------------------------
      001593                       6032 _get_prjctl_y_aimed::
                                   6033 ;main.c:820: return slope * prjct->oam->x + gradient;
      001593 C1                    6034 	pop	bc
      001594 D1                    6035 	pop	de
      001595 D5                    6036 	push	de
      001596 C5                    6037 	push	bc
      001597 21 06 00              6038 	ld	hl, #0x0006
      00159A 19                    6039 	add	hl, de
      00159B 2A                    6040 	ld	a, (hl+)
      00159C 4F                    6041 	ld	c, a
      00159D 46                    6042 	ld	b, (hl)
      00159E 03                    6043 	inc	bc
      00159F 0A                    6044 	ld	a, (bc)
      0015A0 21rD7r00              6045 	ld	hl, #_slope
      0015A3 46                    6046 	ld	b, (hl)
      0015A4 F5                    6047 	push	af
      0015A5 33                    6048 	inc	sp
      0015A6 C5                    6049 	push	bc
      0015A7 33                    6050 	inc	sp
      0015A8 CDr00r00              6051 	call	__mulschar
      0015AB E8 02                 6052 	add	sp, #2
      0015AD FArD9r00              6053 	ld	a, (#_gradient)
      0015B0 83                    6054 	add	a, e
      0015B1 5F                    6055 	ld	e, a
                                   6056 ;main.c:821: }
      0015B2 C9                    6057 	ret
                                   6058 ;main.c:824: inline UBYTE is_obj_inside_screen(UINT8 x, UINT8 y, UINT8 width, UINT8 height) {
                                   6059 ;	---------------------------------
                                   6060 ; Function is_obj_inside_screen
                                   6061 ; ---------------------------------
      0015B3                       6062 _is_obj_inside_screen::
                                   6063 ;main.c:825: return (x < screenmaxx && screenminx < x + width) &&
      0015B3 21rCCr00              6064 	ld	hl, #_screenmaxx
      0015B6 4E                    6065 	ld	c, (hl)
      0015B7 F8 02                 6066 	ldhl	sp,	#2
      0015B9 7E                    6067 	ld	a,(hl)
      0015BA B9                    6068 	cp	a,c
      0015BB 30 5E                 6069 	jr	NC, 00103$
      0015BD 06 00                 6070 	ld	b, #0x00
      0015BF 23                    6071 	inc	hl
      0015C0 23                    6072 	inc	hl
      0015C1 5E                    6073 	ld	e, (hl)
      0015C2 16 00                 6074 	ld	d, #0x00
      0015C4 83                    6075 	add	a, e
      0015C5 4F                    6076 	ld	c, a
      0015C6 78                    6077 	ld	a, b
      0015C7 8A                    6078 	adc	a, d
      0015C8 47                    6079 	ld	b, a
      0015C9 21rCAr00              6080 	ld	hl, #_screenminx
      0015CC 6E                    6081 	ld	l, (hl)
      0015CD 26 00                 6082 	ld	h, #0x00
      0015CF 58                    6083 	ld	e, b
      0015D0 54                    6084 	ld	d, h
      0015D1 7D                    6085 	ld	a, l
      0015D2 91                    6086 	sub	a, c
      0015D3 7C                    6087 	ld	a, h
      0015D4 98                    6088 	sbc	a, b
      0015D5 CB 7B                 6089 	bit	7, e
      0015D7 28 07                 6090 	jr	Z, 00126$
      0015D9 CB 7A                 6091 	bit	7, d
      0015DB 20 08                 6092 	jr	NZ, 00127$
      0015DD BF                    6093 	cp	a, a
      0015DE 18 05                 6094 	jr	00127$
      0015E0                       6095 00126$:
      0015E0 CB 7A                 6096 	bit	7, d
      0015E2 28 01                 6097 	jr	Z, 00127$
      0015E4 37                    6098 	scf
      0015E5                       6099 00127$:
      0015E5 30 34                 6100 	jr	NC, 00103$
                                   6101 ;main.c:826: (y < screenmaxy && screenminy < y + height);
      0015E7 21rCDr00              6102 	ld	hl, #_screenmaxy
      0015EA 4E                    6103 	ld	c, (hl)
      0015EB F8 03                 6104 	ldhl	sp,	#3
      0015ED 7E                    6105 	ld	a,(hl)
      0015EE B9                    6106 	cp	a,c
      0015EF 30 2A                 6107 	jr	NC, 00103$
      0015F1 06 00                 6108 	ld	b, #0x00
      0015F3 23                    6109 	inc	hl
      0015F4 23                    6110 	inc	hl
      0015F5 5E                    6111 	ld	e, (hl)
      0015F6 16 00                 6112 	ld	d, #0x00
      0015F8 83                    6113 	add	a, e
      0015F9 4F                    6114 	ld	c, a
      0015FA 78                    6115 	ld	a, b
      0015FB 8A                    6116 	adc	a, d
      0015FC 47                    6117 	ld	b, a
      0015FD 21rCBr00              6118 	ld	hl, #_screenminy
      001600 6E                    6119 	ld	l, (hl)
      001601 26 00                 6120 	ld	h, #0x00
      001603 58                    6121 	ld	e, b
      001604 54                    6122 	ld	d, h
      001605 7D                    6123 	ld	a, l
      001606 91                    6124 	sub	a, c
      001607 7C                    6125 	ld	a, h
      001608 98                    6126 	sbc	a, b
      001609 CB 7B                 6127 	bit	7, e
      00160B 28 07                 6128 	jr	Z, 00128$
      00160D CB 7A                 6129 	bit	7, d
      00160F 20 08                 6130 	jr	NZ, 00129$
      001611 BF                    6131 	cp	a, a
      001612 18 05                 6132 	jr	00129$
      001614                       6133 00128$:
      001614 CB 7A                 6134 	bit	7, d
      001616 28 01                 6135 	jr	Z, 00129$
      001618 37                    6136 	scf
      001619                       6137 00129$:
      001619 38 03                 6138 	jr	C, 00104$
      00161B                       6139 00103$:
      00161B 1E 00                 6140 	ld	e, #0x00
      00161D C9                    6141 	ret
      00161E                       6142 00104$:
      00161E 1E 01                 6143 	ld	e, #0x01
                                   6144 ;main.c:827: }
      001620 C9                    6145 	ret
                                   6146 ;main.c:830: inline UBYTE is_alive(Machine * mch) {
                                   6147 ;	---------------------------------
                                   6148 ; Function is_alive
                                   6149 ; ---------------------------------
      001621                       6150 _is_alive::
                                   6151 ;main.c:831: return mch->shield > 0;
      001621 C1                    6152 	pop	bc
      001622 D1                    6153 	pop	de
      001623 D5                    6154 	push	de
      001624 C5                    6155 	push	bc
      001625 21 0B 00              6156 	ld	hl, #0x000b
      001628 19                    6157 	add	hl, de
      001629 4E                    6158 	ld	c, (hl)
      00162A 59                    6159 	ld	e, c
      00162B 16 00                 6160 	ld	d, #0x00
      00162D AF                    6161 	xor	a, a
      00162E 91                    6162 	sub	a, c
      00162F CB 7B                 6163 	bit	7, e
      001631 28 07                 6164 	jr	Z, 00103$
      001633 CB 7A                 6165 	bit	7, d
      001635 20 08                 6166 	jr	NZ, 00104$
      001637 BF                    6167 	cp	a, a
      001638 18 05                 6168 	jr	00104$
      00163A                       6169 00103$:
      00163A CB 7A                 6170 	bit	7, d
      00163C 28 01                 6171 	jr	Z, 00104$
      00163E 37                    6172 	scf
      00163F                       6173 00104$:
      00163F 3E 00                 6174 	ld	a, #0x00
      001641 17                    6175 	rla
      001642 5F                    6176 	ld	e, a
                                   6177 ;main.c:832: }
      001643 C9                    6178 	ret
                                   6179 ;main.c:835: void destroy_projectile(Projectile * pr) {
                                   6180 ;	---------------------------------
                                   6181 ; Function destroy_projectile
                                   6182 ; ---------------------------------
      001644                       6183 _destroy_projectile::
                                   6184 ;main.c:836: pr->oam->x = 0;
      001644 C1                    6185 	pop	bc
      001645 D1                    6186 	pop	de
      001646 D5                    6187 	push	de
      001647 C5                    6188 	push	bc
      001648 21 06 00              6189 	ld	hl, #0x0006
      00164B 19                    6190 	add	hl, de
      00164C 4D                    6191 	ld	c,l
      00164D 44                    6192 	ld	b,h
      00164E 2A                    6193 	ld	a, (hl+)
      00164F 66                    6194 	ld	h, (hl)
      001650 6F                    6195 	ld	l, a
      001651 23                    6196 	inc	hl
      001652 36 00                 6197 	ld	(hl), #0x00
                                   6198 ;main.c:837: pr->oam->y = 0;
      001654 69                    6199 	ld	l, c
      001655 60                    6200 	ld	h, b
      001656 2A                    6201 	ld	a, (hl+)
      001657 66                    6202 	ld	h, (hl)
      001658 6F                    6203 	ld	l, a
      001659 36 00                 6204 	ld	(hl), #0x00
                                   6205 ;main.c:838: pr->oam->tile = 0;
      00165B 69                    6206 	ld	l, c
      00165C 60                    6207 	ld	h, b
      00165D 2A                    6208 	ld	a, (hl+)
      00165E 66                    6209 	ld	h, (hl)
      00165F 6F                    6210 	ld	l, a
      001660 23                    6211 	inc	hl
      001661 23                    6212 	inc	hl
      001662 36 00                 6213 	ld	(hl), #0x00
                                   6214 ;main.c:839: pr->oam = NULL;
      001664 AF                    6215 	xor	a, a
      001665 02                    6216 	ld	(bc), a
      001666 03                    6217 	inc	bc
      001667 02                    6218 	ld	(bc), a
                                   6219 ;main.c:840: prjcnt--;
      001668 21r5Ar00              6220 	ld	hl, #_prjcnt
      00166B 35                    6221 	dec	(hl)
                                   6222 ;main.c:841: }
      00166C C9                    6223 	ret
                                   6224 ;main.c:844: void init_explosion(Machine * mch) {
                                   6225 ;	---------------------------------
                                   6226 ; Function init_explosion
                                   6227 ; ---------------------------------
      00166D                       6228 _init_explosion::
      00166D E8 F9                 6229 	add	sp, #-7
                                   6230 ;main.c:845: mch->explcount = 1;
      00166F F8 09                 6231 	ldhl	sp,#9
      001671 2A                    6232 	ld	a, (hl+)
      001672 4F                    6233 	ld	c, a
      001673 46                    6234 	ld	b, (hl)
      001674 21 07 00              6235 	ld	hl, #0x0007
      001677 09                    6236 	add	hl, bc
      001678 36 01                 6237 	ld	(hl), #0x01
                                   6238 ;main.c:846: mch->hboffx = -(mch->x + mch->width);   // x + offx + width == 0
      00167A 21 03 00              6239 	ld	hl, #0x0003
      00167D 09                    6240 	add	hl, bc
      00167E E5                    6241 	push	hl
      00167F 7D                    6242 	ld	a, l
      001680 F8 06                 6243 	ldhl	sp,	#6
      001682 77                    6244 	ld	(hl), a
      001683 E1                    6245 	pop	hl
      001684 7C                    6246 	ld	a, h
      001685 F8 05                 6247 	ldhl	sp,	#5
      001687 77                    6248 	ld	(hl), a
      001688 59                    6249 	ld	e, c
      001689 50                    6250 	ld	d, b
      00168A 13                    6251 	inc	de
      00168B 1A                    6252 	ld	a, (de)
      00168C 23                    6253 	inc	hl
      00168D 77                    6254 	ld	(hl), a
      00168E 21 05 00              6255 	ld	hl, #0x0005
      001691 09                    6256 	add	hl, bc
      001692 33                    6257 	inc	sp
      001693 33                    6258 	inc	sp
      001694 5D                    6259 	ld	e, l
      001695 54                    6260 	ld	d, h
      001696 D5                    6261 	push	de
      001697 1A                    6262 	ld	a, (de)
      001698 F8 06                 6263 	ldhl	sp,	#6
      00169A 86                    6264 	add	a, (hl)
      00169B 5F                    6265 	ld	e, a
      00169C AF                    6266 	xor	a, a
      00169D 93                    6267 	sub	a, e
      00169E 32                    6268 	ld	(hl-), a
      00169F 2B                    6269 	dec	hl
      0016A0 2A                    6270 	ld	a, (hl+)
      0016A1 5F                    6271 	ld	e, a
      0016A2 2A                    6272 	ld	a, (hl+)
      0016A3 57                    6273 	ld	d, a
      0016A4 7E                    6274 	ld	a, (hl)
      0016A5 12                    6275 	ld	(de), a
                                   6276 ;main.c:847: mch->hboffy = -(mch->y + mch->height);   // Avoiding damage dealing to player while exploding
      0016A6 21 04 00              6277 	ld	hl, #0x0004
      0016A9 09                    6278 	add	hl, bc
      0016AA E5                    6279 	push	hl
      0016AB 7D                    6280 	ld	a, l
      0016AC F8 04                 6281 	ldhl	sp,	#4
      0016AE 77                    6282 	ld	(hl), a
      0016AF E1                    6283 	pop	hl
      0016B0 7C                    6284 	ld	a, h
      0016B1 F8 03                 6285 	ldhl	sp,	#3
      0016B3 77                    6286 	ld	(hl), a
      0016B4 59                    6287 	ld	e, c
      0016B5 50                    6288 	ld	d, b
      0016B6 13                    6289 	inc	de
      0016B7 13                    6290 	inc	de
      0016B8 1A                    6291 	ld	a, (de)
      0016B9 F8 06                 6292 	ldhl	sp,	#6
      0016BB 77                    6293 	ld	(hl), a
      0016BC 21 06 00              6294 	ld	hl, #0x0006
      0016BF 09                    6295 	add	hl, bc
      0016C0 E5                    6296 	push	hl
      0016C1 7D                    6297 	ld	a, l
      0016C2 F8 06                 6298 	ldhl	sp,	#6
      0016C4 77                    6299 	ld	(hl), a
      0016C5 E1                    6300 	pop	hl
      0016C6 7C                    6301 	ld	a, h
      0016C7 F8 05                 6302 	ldhl	sp,	#5
      0016C9 32                    6303 	ld	(hl-), a
      0016CA 2A                    6304 	ld	a, (hl+)
      0016CB 5F                    6305 	ld	e, a
      0016CC 56                    6306 	ld	d, (hl)
      0016CD 1A                    6307 	ld	a, (de)
      0016CE 23                    6308 	inc	hl
      0016CF 86                    6309 	add	a, (hl)
      0016D0 5F                    6310 	ld	e, a
      0016D1 AF                    6311 	xor	a, a
      0016D2 93                    6312 	sub	a, e
      0016D3 77                    6313 	ld	(hl), a
      0016D4 F8 02                 6314 	ldhl	sp,#2
      0016D6 2A                    6315 	ld	a, (hl+)
      0016D7 5F                    6316 	ld	e, a
      0016D8 56                    6317 	ld	d, (hl)
      0016D9 F8 06                 6318 	ldhl	sp,	#6
      0016DB 7E                    6319 	ld	a, (hl)
      0016DC 12                    6320 	ld	(de), a
                                   6321 ;main.c:848: if(mch->width < 9) {
      0016DD D1                    6322 	pop	de
      0016DE D5                    6323 	push	de
      0016DF 1A                    6324 	ld	a, (de)
      0016E0 D6 09                 6325 	sub	a, #0x09
      0016E2 30 0B                 6326 	jr	NC, 00102$
                                   6327 ;main.c:849: move_enemy(mch, -4, 0);
      0016E4 AF                    6328 	xor	a, a
      0016E5 57                    6329 	ld	d,a
      0016E6 1E FC                 6330 	ld	e,#0xfc
      0016E8 D5                    6331 	push	de
      0016E9 C5                    6332 	push	bc
      0016EA CDr3Fr0A              6333 	call	_move_enemy
      0016ED E8 04                 6334 	add	sp, #4
      0016EF                       6335 00102$:
                                   6336 ;main.c:851: if(mch->height < 9) {
      0016EF F8 04                 6337 	ldhl	sp,#4
      0016F1 2A                    6338 	ld	a, (hl+)
      0016F2 5F                    6339 	ld	e, a
      0016F3 56                    6340 	ld	d, (hl)
      0016F4 1A                    6341 	ld	a, (de)
      0016F5 D6 09                 6342 	sub	a, #0x09
      0016F7 30 12                 6343 	jr	NC, 00104$
                                   6344 ;main.c:852: move_enemy(mch, 0, -4);
      0016F9 3E FC                 6345 	ld	a, #0xfc
      0016FB F5                    6346 	push	af
      0016FC 33                    6347 	inc	sp
      0016FD AF                    6348 	xor	a, a
      0016FE F5                    6349 	push	af
      0016FF 33                    6350 	inc	sp
      001700 F8 0B                 6351 	ldhl	sp,	#11
      001702 2A                    6352 	ld	a, (hl+)
      001703 66                    6353 	ld	h, (hl)
      001704 6F                    6354 	ld	l, a
      001705 E5                    6355 	push	hl
      001706 CDr3Fr0A              6356 	call	_move_enemy
      001709 E8 04                 6357 	add	sp, #4
      00170B                       6358 00104$:
                                   6359 ;main.c:854: se_explode();
      00170B CDr18r29              6360 	call	_se_explode
                                   6361 ;main.c:855: }
      00170E E8 07                 6362 	add	sp, #7
      001710 C9                    6363 	ret
                                   6364 ;main.c:858: void move_projectile(Projectile * pr) {
                                   6365 ;	---------------------------------
                                   6366 ; Function move_projectile
                                   6367 ; ---------------------------------
      001711                       6368 _move_projectile::
      001711 E8 F5                 6369 	add	sp, #-11
                                   6370 ;main.c:859: if(pr->oam != NULL && is_obj_inside_screen(pr->oam->x, pr->oam->y, pr->width, pr->height)) {
      001713 F8 0D                 6371 	ldhl	sp,	#13
      001715 2A                    6372 	ld	a, (hl+)
      001716 5E                    6373 	ld	e, (hl)
      001717 F8 00                 6374 	ldhl	sp,	#0
      001719 22                    6375 	ld	(hl+), a
      00171A 73                    6376 	ld	(hl), e
                                   6377 ;c
      00171B D1                    6378 	pop	de
      00171C D5                    6379 	push	de
      00171D 21 06 00              6380 	ld	hl, #0x0006
      001720 19                    6381 	add	hl, de
      001721 E5                    6382 	push	hl
      001722 7D                    6383 	ld	a, l
      001723 F8 04                 6384 	ldhl	sp,	#4
      001725 77                    6385 	ld	(hl), a
      001726 E1                    6386 	pop	hl
      001727 7C                    6387 	ld	a, h
      001728 F8 03                 6388 	ldhl	sp,	#3
      00172A 32                    6389 	ld	(hl-), a
      00172B 2A                    6390 	ld	a, (hl+)
      00172C 5F                    6391 	ld	e, a
      00172D 56                    6392 	ld	d, (hl)
      00172E 1A                    6393 	ld	a, (de)
      00172F 4F                    6394 	ld	c, a
      001730 13                    6395 	inc	de
      001731 1A                    6396 	ld	a, (de)
      001732 47                    6397 	ld	b, a
      001733 B1                    6398 	or	a, c
      001734 CAr7Cr18              6399 	jp	Z, 00102$
      001737 E1                    6400 	pop	hl
      001738 E5                    6401 	push	hl
      001739 23                    6402 	inc	hl
      00173A 23                    6403 	inc	hl
      00173B 7E                    6404 	ld	a, (hl)
      00173C F8 04                 6405 	ldhl	sp,	#4
      00173E 77                    6406 	ld	(hl), a
      00173F E1                    6407 	pop	hl
      001740 E5                    6408 	push	hl
      001741 23                    6409 	inc	hl
      001742 23                    6410 	inc	hl
      001743 23                    6411 	inc	hl
      001744 5E                    6412 	ld	e, (hl)
      001745 0A                    6413 	ld	a, (bc)
      001746 F8 05                 6414 	ldhl	sp,	#5
      001748 77                    6415 	ld	(hl), a
      001749 2A                    6416 	ld	a, (hl+)
      00174A 77                    6417 	ld	(hl), a
      00174B 69                    6418 	ld	l, c
      00174C 60                    6419 	ld	h, b
      00174D 23                    6420 	inc	hl
      00174E 56                    6421 	ld	d, (hl)
                                   6422 ;main.c:825: return (x < screenmaxx && screenminx < x + width) &&
      00174F FArCCr00              6423 	ld	a, (#_screenmaxx)
      001752 F8 0A                 6424 	ldhl	sp,	#10
      001754 77                    6425 	ld	(hl), a
      001755 7A                    6426 	ld	a, d
      001756 96                    6427 	sub	a, (hl)
      001757 D2rE7r17              6428 	jp	NC, 00109$
      00175A 2B                    6429 	dec	hl
      00175B 72                    6430 	ld	(hl), d
      00175C AF                    6431 	xor	a, a
      00175D 23                    6432 	inc	hl
      00175E 77                    6433 	ld	(hl), a
      00175F 16 00                 6434 	ld	d, #0x00
                                   6435 ;c
      001761 2B                    6436 	dec	hl
      001762 2A                    6437 	ld	a, (hl+)
      001763 66                    6438 	ld	h, (hl)
      001764 6F                    6439 	ld	l, a
      001765 19                    6440 	add	hl, de
      001766 E5                    6441 	push	hl
      001767 7D                    6442 	ld	a, l
      001768 F8 09                 6443 	ldhl	sp,	#9
      00176A 77                    6444 	ld	(hl), a
      00176B E1                    6445 	pop	hl
      00176C 7C                    6446 	ld	a, h
      00176D F8 08                 6447 	ldhl	sp,	#8
      00176F 77                    6448 	ld	(hl), a
      001770 FArCAr00              6449 	ld	a, (#_screenminx)
      001773 F8 09                 6450 	ldhl	sp,	#9
      001775 77                    6451 	ld	(hl), a
      001776 AF                    6452 	xor	a, a
      001777 23                    6453 	inc	hl
      001778 77                    6454 	ld	(hl), a
      001779 F8 09                 6455 	ldhl	sp,	#9
      00177B 5D                    6456 	ld	e, l
      00177C 54                    6457 	ld	d, h
      00177D F8 07                 6458 	ldhl	sp,	#7
      00177F 1A                    6459 	ld	a, (de)
      001780 96                    6460 	sub	a, (hl)
      001781 23                    6461 	inc	hl
      001782 13                    6462 	inc	de
      001783 1A                    6463 	ld	a, (de)
      001784 9E                    6464 	sbc	a, (hl)
      001785 1A                    6465 	ld	a, (de)
      001786 57                    6466 	ld	d, a
      001787 CB 7E                 6467 	bit	7, (hl)
      001789 28 07                 6468 	jr	Z, 00149$
      00178B CB 7A                 6469 	bit	7, d
      00178D 20 08                 6470 	jr	NZ, 00150$
      00178F BF                    6471 	cp	a, a
      001790 18 05                 6472 	jr	00150$
      001792                       6473 00149$:
      001792 CB 7A                 6474 	bit	7, d
      001794 28 01                 6475 	jr	Z, 00150$
      001796 37                    6476 	scf
      001797                       6477 00150$:
      001797 30 4E                 6478 	jr	NC, 00109$
                                   6479 ;main.c:826: (y < screenmaxy && screenminy < y + height);
      001799 21rCDr00              6480 	ld	hl, #_screenmaxy
      00179C 5E                    6481 	ld	e, (hl)
      00179D F8 06                 6482 	ldhl	sp,	#6
      00179F 7E                    6483 	ld	a,(hl)
      0017A0 BB                    6484 	cp	a,e
      0017A1 30 44                 6485 	jr	NC, 00109$
      0017A3 F8 09                 6486 	ldhl	sp,	#9
      0017A5 77                    6487 	ld	(hl), a
      0017A6 AF                    6488 	xor	a, a
      0017A7 23                    6489 	inc	hl
      0017A8 77                    6490 	ld	(hl), a
      0017A9 F8 04                 6491 	ldhl	sp,	#4
      0017AB 5E                    6492 	ld	e, (hl)
      0017AC 16 00                 6493 	ld	d, #0x00
                                   6494 ;c
      0017AE F8 09                 6495 	ldhl	sp,	#9
      0017B0 2A                    6496 	ld	a, (hl+)
      0017B1 66                    6497 	ld	h, (hl)
      0017B2 6F                    6498 	ld	l, a
      0017B3 19                    6499 	add	hl, de
      0017B4 E5                    6500 	push	hl
      0017B5 7D                    6501 	ld	a, l
      0017B6 F8 09                 6502 	ldhl	sp,	#9
      0017B8 77                    6503 	ld	(hl), a
      0017B9 E1                    6504 	pop	hl
      0017BA 7C                    6505 	ld	a, h
      0017BB F8 08                 6506 	ldhl	sp,	#8
      0017BD 77                    6507 	ld	(hl), a
      0017BE FArCBr00              6508 	ld	a, (#_screenminy)
      0017C1 F8 09                 6509 	ldhl	sp,	#9
      0017C3 77                    6510 	ld	(hl), a
      0017C4 AF                    6511 	xor	a, a
      0017C5 23                    6512 	inc	hl
      0017C6 77                    6513 	ld	(hl), a
      0017C7 F8 09                 6514 	ldhl	sp,	#9
      0017C9 5D                    6515 	ld	e, l
      0017CA 54                    6516 	ld	d, h
      0017CB F8 07                 6517 	ldhl	sp,	#7
      0017CD 1A                    6518 	ld	a, (de)
      0017CE 96                    6519 	sub	a, (hl)
      0017CF 23                    6520 	inc	hl
      0017D0 13                    6521 	inc	de
      0017D1 1A                    6522 	ld	a, (de)
      0017D2 9E                    6523 	sbc	a, (hl)
      0017D3 1A                    6524 	ld	a, (de)
      0017D4 57                    6525 	ld	d, a
      0017D5 CB 7E                 6526 	bit	7, (hl)
      0017D7 28 07                 6527 	jr	Z, 00151$
      0017D9 CB 7A                 6528 	bit	7, d
      0017DB 20 08                 6529 	jr	NZ, 00152$
      0017DD BF                    6530 	cp	a, a
      0017DE 18 05                 6531 	jr	00152$
      0017E0                       6532 00151$:
      0017E0 CB 7A                 6533 	bit	7, d
      0017E2 28 01                 6534 	jr	Z, 00152$
      0017E4 37                    6535 	scf
      0017E5                       6536 00152$:
      0017E5 38 03                 6537 	jr	C, 00110$
      0017E7                       6538 00109$:
      0017E7 AF                    6539 	xor	a, a
      0017E8 18 02                 6540 	jr	00111$
      0017EA                       6541 00110$:
      0017EA 3E 01                 6542 	ld	a, #0x01
      0017EC                       6543 00111$:
                                   6544 ;main.c:859: if(pr->oam != NULL && is_obj_inside_screen(pr->oam->x, pr->oam->y, pr->width, pr->height)) {
      0017EC B7                    6545 	or	a, a
      0017ED CAr7Cr18              6546 	jp	Z, 00102$
                                   6547 ;main.c:860: pr->oam->y += pr->speedy;
      0017F0 E1                    6548 	pop	hl
      0017F1 E5                    6549 	push	hl
      0017F2 23                    6550 	inc	hl
      0017F3 7E                    6551 	ld	a, (hl)
      0017F4 F8 05                 6552 	ldhl	sp,	#5
      0017F6 86                    6553 	add	a, (hl)
      0017F7 02                    6554 	ld	(bc), a
                                   6555 ;main.c:861: pr->oam->x = pr->aimedflg == 1 ? get_prjctl_x_aimed(pr) : pr->oam->x + pr->speedx;
      0017F8 2B                    6556 	dec	hl
      0017F9 2B                    6557 	dec	hl
      0017FA 2B                    6558 	dec	hl
      0017FB 2A                    6559 	ld	a, (hl+)
      0017FC 5F                    6560 	ld	e, a
      0017FD 56                    6561 	ld	d, (hl)
      0017FE 1A                    6562 	ld	a, (de)
      0017FF 4F                    6563 	ld	c, a
      001800 13                    6564 	inc	de
      001801 1A                    6565 	ld	a, (de)
      001802 47                    6566 	ld	b, a
      001803 03                    6567 	inc	bc
      001804 F8 07                 6568 	ldhl	sp,	#7
      001806 79                    6569 	ld	a, c
      001807 22                    6570 	ld	(hl+), a
      001808 70                    6571 	ld	(hl), b
                                   6572 ;c
      001809 D1                    6573 	pop	de
      00180A D5                    6574 	push	de
      00180B 21 05 00              6575 	ld	hl, #0x0005
      00180E 19                    6576 	add	hl, de
      00180F 4D                    6577 	ld	c, l
      001810 44                    6578 	ld	b, h
      001811 0A                    6579 	ld	a, (bc)
      001812 3D                    6580 	dec	a
      001813 20 52                 6581 	jr	NZ, 00118$
      001815 F8 00                 6582 	ldhl	sp,	#0
      001817 2A                    6583 	ld	a, (hl+)
      001818 5E                    6584 	ld	e, (hl)
      001819 F8 09                 6585 	ldhl	sp,	#9
      00181B 22                    6586 	ld	(hl+), a
                                   6587 ;main.c:815: return ((prjct->oam->y - gradient) * precfctr) / slope;
                                   6588 ;c
      00181C 7B                    6589 	ld	a, e
      00181D 32                    6590 	ld	(hl-), a
      00181E 2A                    6591 	ld	a, (hl+)
      00181F 5F                    6592 	ld	e, a
      001820 56                    6593 	ld	d, (hl)
      001821 21 06 00              6594 	ld	hl, #0x0006
      001824 19                    6595 	add	hl, de
      001825 E5                    6596 	push	hl
      001826 7D                    6597 	ld	a, l
      001827 F8 07                 6598 	ldhl	sp,	#7
      001829 77                    6599 	ld	(hl), a
      00182A E1                    6600 	pop	hl
      00182B 7C                    6601 	ld	a, h
      00182C F8 06                 6602 	ldhl	sp,	#6
      00182E 32                    6603 	ld	(hl-), a
      00182F 2A                    6604 	ld	a, (hl+)
      001830 5F                    6605 	ld	e, a
      001831 56                    6606 	ld	d, (hl)
      001832 1A                    6607 	ld	a, (de)
      001833 F8 09                 6608 	ldhl	sp,	#9
      001835 22                    6609 	ld	(hl+), a
      001836 13                    6610 	inc	de
      001837 1A                    6611 	ld	a, (de)
      001838 32                    6612 	ld	(hl-), a
      001839 2A                    6613 	ld	a, (hl+)
      00183A 5F                    6614 	ld	e, a
      00183B 56                    6615 	ld	d, (hl)
      00183C 1A                    6616 	ld	a, (de)
      00183D 4F                    6617 	ld	c, a
      00183E 06 00                 6618 	ld	b, #0x00
      001840 79                    6619 	ld	a, c
      001841 21rD9r00              6620 	ld	hl, #_gradient
      001844 96                    6621 	sub	a, (hl)
      001845 4F                    6622 	ld	c, a
      001846 78                    6623 	ld	a, b
      001847 23                    6624 	inc	hl
      001848 9E                    6625 	sbc	a, (hl)
      001849 47                    6626 	ld	b, a
      00184A 21rD6r00              6627 	ld	hl, #_precfctr
      00184D 5E                    6628 	ld	e, (hl)
      00184E 16 00                 6629 	ld	d, #0x00
      001850 D5                    6630 	push	de
      001851 C5                    6631 	push	bc
      001852 CDr00r00              6632 	call	__mulint
      001855 E8 04                 6633 	add	sp, #4
      001857 21rD7r00              6634 	ld	hl, #_slope
      00185A 2A                    6635 	ld	a, (hl+)
      00185B 66                    6636 	ld	h, (hl)
      00185C 6F                    6637 	ld	l, a
      00185D E5                    6638 	push	hl
      00185E D5                    6639 	push	de
      00185F CDr00r00              6640 	call	__divsint
      001862 E8 04                 6641 	add	sp, #4
      001864 7B                    6642 	ld	a, e
                                   6643 ;main.c:861: pr->oam->x = pr->aimedflg == 1 ? get_prjctl_x_aimed(pr) : pr->oam->x + pr->speedx;
      001865 18 0B                 6644 	jr	00119$
      001867                       6645 00118$:
      001867 F8 07                 6646 	ldhl	sp,#7
      001869 2A                    6647 	ld	a, (hl+)
      00186A 5F                    6648 	ld	e, a
      00186B 56                    6649 	ld	d, (hl)
      00186C 1A                    6650 	ld	a, (de)
      00186D 4F                    6651 	ld	c, a
      00186E D1                    6652 	pop	de
      00186F D5                    6653 	push	de
      001870 1A                    6654 	ld	a, (de)
      001871 81                    6655 	add	a, c
      001872                       6656 00119$:
      001872 F8 07                 6657 	ldhl	sp,	#7
      001874 F5                    6658 	push	af
      001875 2A                    6659 	ld	a, (hl+)
      001876 66                    6660 	ld	h, (hl)
      001877 6F                    6661 	ld	l, a
      001878 F1                    6662 	pop	af
      001879 77                    6663 	ld	(hl), a
      00187A 18 08                 6664 	jr	00107$
      00187C                       6665 00102$:
                                   6666 ;main.c:863: destroy_projectile(pr);
      00187C E1                    6667 	pop	hl
      00187D E5                    6668 	push	hl
      00187E E5                    6669 	push	hl
      00187F CDr44r16              6670 	call	_destroy_projectile
      001882 E8 02                 6671 	add	sp, #2
      001884                       6672 00107$:
                                   6673 ;main.c:865: }
      001884 E8 0B                 6674 	add	sp, #11
      001886 C9                    6675 	ret
                                   6676 ;main.c:868: void explode_machine(Machine * mch) {
                                   6677 ;	---------------------------------
                                   6678 ; Function explode_machine
                                   6679 ; ---------------------------------
      001887                       6680 _explode_machine::
                                   6681 ;main.c:869: if(mch->explcount % 4 == 0) {
      001887 C1                    6682 	pop	bc
      001888 D1                    6683 	pop	de
      001889 D5                    6684 	push	de
      00188A C5                    6685 	push	bc
      00188B 21 07 00              6686 	ld	hl, #0x0007
      00188E 19                    6687 	add	hl, de
      00188F 4D                    6688 	ld	c, l
      001890 44                    6689 	ld	b, h
      001891 0A                    6690 	ld	a, (bc)
      001892 E6 03                 6691 	and	a, #0x03
      001894 20 31                 6692 	jr	NZ, 00105$
                                   6693 ;main.c:870: if(shadow_OAM[mch->oamtilenums[0]].tile != 5) {
      001896 21 0D 00              6694 	ld	hl, #0x000d
      001899 19                    6695 	add	hl, de
      00189A 7E                    6696 	ld	a, (hl)
      00189B 26 00                 6697 	ld	h, #0x00
      00189D 6F                    6698 	ld	l, a
      00189E 29                    6699 	add	hl, hl
      00189F 29                    6700 	add	hl, hl
      0018A0 D5                    6701 	push	de
      0018A1 11r00r00              6702 	ld	de, #_shadow_OAM
      0018A4 19                    6703 	add	hl, de
      0018A5 D1                    6704 	pop	de
      0018A6 23                    6705 	inc	hl
      0018A7 23                    6706 	inc	hl
      0018A8 7E                    6707 	ld	a, (hl)
      0018A9 D6 05                 6708 	sub	a, #0x05
      0018AB 28 0E                 6709 	jr	Z, 00102$
                                   6710 ;main.c:871: set_machine_sprite_tiles(mch, 5);
      0018AD C5                    6711 	push	bc
      0018AE 3E 05                 6712 	ld	a, #0x05
      0018B0 F5                    6713 	push	af
      0018B1 33                    6714 	inc	sp
      0018B2 D5                    6715 	push	de
      0018B3 CDr74r02              6716 	call	_set_machine_sprite_tiles
      0018B6 E8 03                 6717 	add	sp, #3
      0018B8 C1                    6718 	pop	bc
      0018B9 18 0C                 6719 	jr	00105$
      0018BB                       6720 00102$:
                                   6721 ;main.c:873: set_machine_sprite_tiles(mch, 9);
      0018BB C5                    6722 	push	bc
      0018BC 3E 09                 6723 	ld	a, #0x09
      0018BE F5                    6724 	push	af
      0018BF 33                    6725 	inc	sp
      0018C0 D5                    6726 	push	de
      0018C1 CDr74r02              6727 	call	_set_machine_sprite_tiles
      0018C4 E8 03                 6728 	add	sp, #3
      0018C6 C1                    6729 	pop	bc
      0018C7                       6730 00105$:
                                   6731 ;main.c:876: mch->explcount++;
      0018C7 0A                    6732 	ld	a, (bc)
      0018C8 5F                    6733 	ld	e, a
      0018C9 1C                    6734 	inc	e
      0018CA 7B                    6735 	ld	a, e
      0018CB 02                    6736 	ld	(bc), a
                                   6737 ;main.c:877: if(mch->explcount == expldur) {
      0018CC FArD1r00              6738 	ld	a, (#_expldur)
      0018CF 93                    6739 	sub	a, e
      0018D0 C0                    6740 	ret	NZ
                                   6741 ;main.c:878: destroy_machine(mch);
      0018D1 C1                    6742 	pop	bc
      0018D2 E1                    6743 	pop	hl
      0018D3 E5                    6744 	push	hl
      0018D4 C5                    6745 	push	bc
      0018D5 E5                    6746 	push	hl
      0018D6 CDr49r1A              6747 	call	_destroy_machine
      0018D9 E8 02                 6748 	add	sp, #2
                                   6749 ;main.c:880: }
      0018DB C9                    6750 	ret
                                   6751 ;main.c:883: void anim_explode_boss(UINT8 x, UINT8 y, UINT8 width, UINT8 height) {
                                   6752 ;	---------------------------------
                                   6753 ; Function anim_explode_boss
                                   6754 ; ---------------------------------
      0018DC                       6755 _anim_explode_boss::
      0018DC E8 FB                 6756 	add	sp, #-5
                                   6757 ;main.c:884: UINT8 stepx = width / 8; // Horizontal step
      0018DE F8 09                 6758 	ldhl	sp,	#9
      0018E0 4E                    6759 	ld	c, (hl)
      0018E1 06 00                 6760 	ld	b, #0x00
      0018E3 69                    6761 	ld	l, c
      0018E4 60                    6762 	ld	h, b
      0018E5 CB 78                 6763 	bit	7, b
      0018E7 28 04                 6764 	jr	Z, 00124$
      0018E9 21 07 00              6765 	ld	hl, #0x0007
      0018EC 09                    6766 	add	hl, bc
      0018ED                       6767 00124$:
      0018ED 4D                    6768 	ld	c, l
      0018EE 44                    6769 	ld	b, h
      0018EF CB 28                 6770 	sra	b
      0018F1 CB 19                 6771 	rr	c
      0018F3 CB 28                 6772 	sra	b
      0018F5 CB 19                 6773 	rr	c
      0018F7 CB 28                 6774 	sra	b
      0018F9 CB 19                 6775 	rr	c
      0018FB F8 00                 6776 	ldhl	sp,	#0
      0018FD 71                    6777 	ld	(hl), c
                                   6778 ;main.c:885: UINT8 stepy = height / 8; // Vertical step
      0018FE F8 0A                 6779 	ldhl	sp,	#10
      001900 4E                    6780 	ld	c, (hl)
      001901 06 00                 6781 	ld	b, #0x00
      001903 69                    6782 	ld	l, c
      001904 60                    6783 	ld	h, b
      001905 CB 78                 6784 	bit	7, b
      001907 28 04                 6785 	jr	Z, 00125$
      001909 21 07 00              6786 	ld	hl, #0x0007
      00190C 09                    6787 	add	hl, bc
      00190D                       6788 00125$:
      00190D 4D                    6789 	ld	c, l
      00190E 44                    6790 	ld	b, h
      00190F CB 28                 6791 	sra	b
      001911 CB 19                 6792 	rr	c
      001913 CB 28                 6793 	sra	b
      001915 CB 19                 6794 	rr	c
      001917 CB 28                 6795 	sra	b
      001919 CB 19                 6796 	rr	c
      00191B F8 01                 6797 	ldhl	sp,	#1
      00191D 71                    6798 	ld	(hl), c
                                   6799 ;main.c:887: for(i = 0; i < 5; i++) {
      00191E 21r0Dr00              6800 	ld	hl, #_i
      001921 36 00                 6801 	ld	(hl), #0x00
      001923                       6802 00120$:
                                   6803 ;main.c:888: explcord[i][0] = x + (genexplcord[i][0] * stepx);
      001923 21r0Dr00              6804 	ld	hl, #_i
      001926 6E                    6805 	ld	l, (hl)
      001927 26 00                 6806 	ld	h, #0x00
      001929 29                    6807 	add	hl, hl
      00192A 7D                    6808 	ld	a, l
      00192B C6rDD                 6809 	add	a, #<(_explcord)
      00192D 4F                    6810 	ld	c, a
      00192E 7C                    6811 	ld	a, h
      00192F CEs00                 6812 	adc	a, #>(_explcord)
      001931 47                    6813 	ld	b, a
      001932 11rD5r00              6814 	ld	de, #_genexplcord
      001935 19                    6815 	add	hl, de
      001936 7E                    6816 	ld	a, (hl)
      001937 C5                    6817 	push	bc
      001938 F8 02                 6818 	ldhl	sp,	#2
      00193A 66                    6819 	ld	h, (hl)
      00193B E5                    6820 	push	hl
      00193C 33                    6821 	inc	sp
      00193D F5                    6822 	push	af
      00193E 33                    6823 	inc	sp
      00193F CDr00r00              6824 	call	__muluchar
      001942 E8 02                 6825 	add	sp, #2
      001944 7B                    6826 	ld	a, e
      001945 C1                    6827 	pop	bc
      001946 F8 07                 6828 	ldhl	sp,	#7
      001948 86                    6829 	add	a, (hl)
      001949 02                    6830 	ld	(bc), a
                                   6831 ;main.c:889: explcord[i][1] = y + (genexplcord[i][1] * stepy);
      00194A 21r0Dr00              6832 	ld	hl, #_i
      00194D 5E                    6833 	ld	e, (hl)
      00194E 16 00                 6834 	ld	d, #0x00
      001950 CB 23                 6835 	sla	e
      001952 CB 12                 6836 	rl	d
      001954 21rDEr00              6837 	ld	hl,#_explcord+1
      001957 19                    6838 	add	hl,de
      001958 4D                    6839 	ld	c, l
      001959 44                    6840 	ld	b, h
      00195A 21rD6r00              6841 	ld	hl,#_genexplcord+1
      00195D 19                    6842 	add	hl,de
      00195E 7E                    6843 	ld	a, (hl)
      00195F C5                    6844 	push	bc
      001960 F8 03                 6845 	ldhl	sp,	#3
      001962 66                    6846 	ld	h, (hl)
      001963 E5                    6847 	push	hl
      001964 33                    6848 	inc	sp
      001965 F5                    6849 	push	af
      001966 33                    6850 	inc	sp
      001967 CDr00r00              6851 	call	__muluchar
      00196A E8 02                 6852 	add	sp, #2
      00196C 7B                    6853 	ld	a, e
      00196D C1                    6854 	pop	bc
      00196E F8 08                 6855 	ldhl	sp,	#8
      001970 86                    6856 	add	a, (hl)
      001971 02                    6857 	ld	(bc), a
                                   6858 ;main.c:890: move_sprite(4, explcord[i][0], explcord[i][1]);
      001972 21r0Dr00              6859 	ld	hl, #_i
      001975 6E                    6860 	ld	l, (hl)
      001976 26 00                 6861 	ld	h, #0x00
      001978 29                    6862 	add	hl, hl
      001979 11rDDr00              6863 	ld	de, #_explcord
      00197C 19                    6864 	add	hl, de
      00197D 4D                    6865 	ld	c, l
      00197E 44                    6866 	ld	b, h
      00197F 03                    6867 	inc	bc
      001980 0A                    6868 	ld	a, (bc)
      001981 47                    6869 	ld	b, a
      001982 4E                    6870 	ld	c, (hl)
                                   6871 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      001983 21r10r00              6872 	ld	hl, #(_shadow_OAM + 0x0010)
                                   6873 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      001986 78                    6874 	ld	a, b
      001987 22                    6875 	ld	(hl+), a
      001988 71                    6876 	ld	(hl), c
                                   6877 ;main.c:891: move_sprite(5, explcord[i][0] + 8, explcord[i][1]);
      001989 21r0Dr00              6878 	ld	hl, #_i
      00198C 6E                    6879 	ld	l, (hl)
      00198D 26 00                 6880 	ld	h, #0x00
      00198F 29                    6881 	add	hl, hl
      001990 11rDDr00              6882 	ld	de, #_explcord
      001993 19                    6883 	add	hl, de
      001994 4D                    6884 	ld	c, l
      001995 44                    6885 	ld	b, h
      001996 03                    6886 	inc	bc
      001997 0A                    6887 	ld	a, (bc)
      001998 47                    6888 	ld	b, a
      001999 7E                    6889 	ld	a, (hl)
      00199A C6 08                 6890 	add	a, #0x08
      00199C 4F                    6891 	ld	c, a
                                   6892 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      00199D 21r14r00              6893 	ld	hl, #(_shadow_OAM + 0x0014)
                                   6894 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      0019A0 78                    6895 	ld	a, b
      0019A1 22                    6896 	ld	(hl+), a
      0019A2 71                    6897 	ld	(hl), c
                                   6898 ;main.c:892: move_sprite(6, explcord[i][0], explcord[i][1] + 8);
      0019A3 21r0Dr00              6899 	ld	hl, #_i
      0019A6 6E                    6900 	ld	l, (hl)
      0019A7 26 00                 6901 	ld	h, #0x00
      0019A9 29                    6902 	add	hl, hl
      0019AA 11rDDr00              6903 	ld	de, #_explcord
      0019AD 19                    6904 	add	hl, de
      0019AE 4D                    6905 	ld	c, l
      0019AF 44                    6906 	ld	b, h
      0019B0 03                    6907 	inc	bc
      0019B1 0A                    6908 	ld	a, (bc)
      0019B2 C6 08                 6909 	add	a, #0x08
      0019B4 47                    6910 	ld	b, a
      0019B5 4E                    6911 	ld	c, (hl)
                                   6912 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      0019B6 21r18r00              6913 	ld	hl, #(_shadow_OAM + 0x0018)
                                   6914 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      0019B9 78                    6915 	ld	a, b
      0019BA 22                    6916 	ld	(hl+), a
      0019BB 71                    6917 	ld	(hl), c
                                   6918 ;main.c:893: move_sprite(7, explcord[i][0] + 8, explcord[i][1] + 8);
      0019BC 21r0Dr00              6919 	ld	hl, #_i
      0019BF 6E                    6920 	ld	l, (hl)
      0019C0 26 00                 6921 	ld	h, #0x00
      0019C2 29                    6922 	add	hl, hl
      0019C3 11rDDr00              6923 	ld	de, #_explcord
      0019C6 19                    6924 	add	hl, de
      0019C7 4D                    6925 	ld	c, l
      0019C8 44                    6926 	ld	b, h
      0019C9 03                    6927 	inc	bc
      0019CA 0A                    6928 	ld	a, (bc)
      0019CB C6 08                 6929 	add	a, #0x08
      0019CD 47                    6930 	ld	b, a
      0019CE 7E                    6931 	ld	a, (hl)
      0019CF C6 08                 6932 	add	a, #0x08
      0019D1 4F                    6933 	ld	c, a
                                   6934 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      0019D2 21r1Cr00              6935 	ld	hl, #(_shadow_OAM + 0x001c)
                                   6936 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      0019D5 78                    6937 	ld	a, b
      0019D6 22                    6938 	ld	(hl+), a
      0019D7 71                    6939 	ld	(hl), c
                                   6940 ;main.c:895: se_explode();
      0019D8 CDr18r29              6941 	call	_se_explode
                                   6942 ;main.c:896: for(explcyc = 0; explcyc < expldur; explcyc++) {
      0019DB AF                    6943 	xor	a, a
      0019DC F8 04                 6944 	ldhl	sp,	#4
      0019DE 77                    6945 	ld	(hl), a
      0019DF                       6946 00118$:
      0019DF 21rD1r00              6947 	ld	hl, #_expldur
      0019E2 4E                    6948 	ld	c, (hl)
      0019E3 F8 04                 6949 	ldhl	sp,	#4
      0019E5 7E                    6950 	ld	a, (hl)
      0019E6 91                    6951 	sub	a, c
      0019E7 30 3F                 6952 	jr	NC, 00121$
                                   6953 ;main.c:897: if(explcyc % 4 == 0) {  // Change explosion tiles every 4 cycles for animation
      0019E9 7E                    6954 	ld	a, (hl)
      0019EA E6 03                 6955 	and	a, #0x03
      0019EC 20 32                 6956 	jr	NZ, 00102$
                                   6957 ;main.c:898: fstexpltile = shadow_OAM[4].tile == 5 ? 9 : 5;  // Alternating between explosion tiles
      0019EE FAr12r00              6958 	ld	a, (#(_shadow_OAM + 0x0012) + 0)
      0019F1 D6 05                 6959 	sub	a, #0x05
      0019F3 20 09                 6960 	jr	NZ, 00126$
      0019F5 F8 02                 6961 	ldhl	sp,	#2
      0019F7 36 09                 6962 	ld	(hl), #0x09
      0019F9 AF                    6963 	xor	a, a
      0019FA 23                    6964 	inc	hl
      0019FB 77                    6965 	ld	(hl), a
      0019FC 18 07                 6966 	jr	00127$
      0019FE                       6967 00126$:
      0019FE F8 02                 6968 	ldhl	sp,	#2
      001A00 36 05                 6969 	ld	(hl), #0x05
      001A02 AF                    6970 	xor	a, a
      001A03 23                    6971 	inc	hl
      001A04 77                    6972 	ld	(hl), a
      001A05                       6973 00127$:
      001A05 F8 02                 6974 	ldhl	sp,	#2
      001A07 4E                    6975 	ld	c, (hl)
                                   6976 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      001A08 21r12r00              6977 	ld	hl, #(_shadow_OAM + 0x0012)
      001A0B 71                    6978 	ld	(hl), c
                                   6979 ;main.c:900: set_sprite_tile(5, fstexpltile + 2);
      001A0C 41                    6980 	ld	b, c
      001A0D 04                    6981 	inc	b
      001A0E 04                    6982 	inc	b
                                   6983 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      001A0F 21r16r00              6984 	ld	hl, #(_shadow_OAM + 0x0016)
      001A12 70                    6985 	ld	(hl), b
                                   6986 ;main.c:901: set_sprite_tile(6, fstexpltile + 1);
      001A13 41                    6987 	ld	b, c
      001A14 04                    6988 	inc	b
                                   6989 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      001A15 21r1Ar00              6990 	ld	hl, #(_shadow_OAM + 0x001a)
      001A18 70                    6991 	ld	(hl), b
                                   6992 ;main.c:902: set_sprite_tile(7, fstexpltile + 3);
      001A19 0C                    6993 	inc	c
      001A1A 0C                    6994 	inc	c
      001A1B 0C                    6995 	inc	c
                                   6996 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      001A1C 21r1Er00              6997 	ld	hl, #(_shadow_OAM + 0x001e)
      001A1F 71                    6998 	ld	(hl), c
                                   6999 ;main.c:902: set_sprite_tile(7, fstexpltile + 3);
      001A20                       7000 00102$:
                                   7001 ;main.c:904: wait_vbl_done();
      001A20 CDr00r00              7002 	call	_wait_vbl_done
                                   7003 ;main.c:896: for(explcyc = 0; explcyc < expldur; explcyc++) {
      001A23 F8 04                 7004 	ldhl	sp,	#4
      001A25 34                    7005 	inc	(hl)
      001A26 18 B7                 7006 	jr	00118$
      001A28                       7007 00121$:
                                   7008 ;main.c:887: for(i = 0; i < 5; i++) {
      001A28 21r0Dr00              7009 	ld	hl, #_i
      001A2B 34                    7010 	inc	(hl)
      001A2C 7E                    7011 	ld	a, (hl)
      001A2D D6 05                 7012 	sub	a, #0x05
      001A2F DAr23r19              7013 	jp	C, 00120$
                                   7014 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1145: shadow_OAM[nb].tile=tile;
      001A32 21r12r00              7015 	ld	hl, #(_shadow_OAM + 0x0012)
      001A35 36 00                 7016 	ld	(hl), #0x00
      001A37 21r16r00              7017 	ld	hl, #(_shadow_OAM + 0x0016)
      001A3A 36 00                 7018 	ld	(hl), #0x00
      001A3C 21r1Ar00              7019 	ld	hl, #(_shadow_OAM + 0x001a)
      001A3F 36 00                 7020 	ld	(hl), #0x00
      001A41 21r1Er00              7021 	ld	hl, #(_shadow_OAM + 0x001e)
      001A44 36 00                 7022 	ld	(hl), #0x00
                                   7023 ;main.c:910: set_sprite_tile(7, 0);
                                   7024 ;main.c:911: }
      001A46 E8 05                 7025 	add	sp, #5
      001A48 C9                    7026 	ret
                                   7027 ;main.c:914: void destroy_machine(Machine * mch) {
                                   7028 ;	---------------------------------
                                   7029 ; Function destroy_machine
                                   7030 ; ---------------------------------
      001A49                       7031 _destroy_machine::
      001A49 E8 FE                 7032 	add	sp, #-2
                                   7033 ;main.c:915: set_machine_tile(mch, 0);
      001A4B AF                    7034 	xor	a, a
      001A4C F5                    7035 	push	af
      001A4D 33                    7036 	inc	sp
      001A4E F8 05                 7037 	ldhl	sp,	#5
      001A50 2A                    7038 	ld	a, (hl+)
      001A51 66                    7039 	ld	h, (hl)
      001A52 6F                    7040 	ld	l, a
      001A53 E5                    7041 	push	hl
      001A54 CDr22r02              7042 	call	_set_machine_tile
      001A57 E8 03                 7043 	add	sp, #3
                                   7044 ;main.c:916: move_sprite(mch->oamtilenums[0], 0, 0);
      001A59 F8 04                 7045 	ldhl	sp,#4
      001A5B 2A                    7046 	ld	a, (hl+)
      001A5C 4F                    7047 	ld	c, a
      001A5D 46                    7048 	ld	b, (hl)
      001A5E 21 0D 00              7049 	ld	hl, #0x000d
      001A61 09                    7050 	add	hl, bc
                                   7051 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      001A62 7E                    7052 	ld	a, (hl)
      001A63 26 00                 7053 	ld	h, #0x00
      001A65 6F                    7054 	ld	l, a
      001A66 29                    7055 	add	hl, hl
      001A67 29                    7056 	add	hl, hl
      001A68 11r00r00              7057 	ld	de, #_shadow_OAM
      001A6B 19                    7058 	add	hl, de
                                   7059 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      001A6C 3E 00                 7060 	ld	a, #0x00
      001A6E 22                    7061 	ld	(hl+), a
      001A6F 36 00                 7062 	ld	(hl), #0x00
                                   7063 ;main.c:917: move_sprite(mch->oamtilenums[1], 0, 0);
      001A71 21 0E 00              7064 	ld	hl, #0x000e
      001A74 09                    7065 	add	hl, bc
                                   7066 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      001A75 7E                    7067 	ld	a, (hl)
      001A76 26 00                 7068 	ld	h, #0x00
      001A78 6F                    7069 	ld	l, a
      001A79 29                    7070 	add	hl, hl
      001A7A 29                    7071 	add	hl, hl
      001A7B 11r00r00              7072 	ld	de, #_shadow_OAM
      001A7E 19                    7073 	add	hl, de
                                   7074 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      001A7F 3E 00                 7075 	ld	a, #0x00
      001A81 22                    7076 	ld	(hl+), a
      001A82 36 00                 7077 	ld	(hl), #0x00
                                   7078 ;main.c:918: move_sprite(mch->oamtilenums[2], 0, 0);
      001A84 21 0F 00              7079 	ld	hl, #0x000f
      001A87 09                    7080 	add	hl, bc
      001A88 5E                    7081 	ld	e, (hl)
                                   7082 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      001A89 26 00                 7083 	ld	h, #0x00
      001A8B 6B                    7084 	ld	l, e
      001A8C 29                    7085 	add	hl, hl
      001A8D 29                    7086 	add	hl, hl
      001A8E 11r00r00              7087 	ld	de, #_shadow_OAM
      001A91 19                    7088 	add	hl, de
                                   7089 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      001A92 3E 00                 7090 	ld	a, #0x00
      001A94 22                    7091 	ld	(hl+), a
      001A95 36 00                 7092 	ld	(hl), #0x00
                                   7093 ;main.c:919: move_sprite(mch->oamtilenums[3], 0, 0);
      001A97 21 10 00              7094 	ld	hl, #0x0010
      001A9A 09                    7095 	add	hl, bc
      001A9B 5E                    7096 	ld	e, (hl)
                                   7097 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1218: OAM_item_t * itm = &shadow_OAM[nb];
      001A9C 26 00                 7098 	ld	h, #0x00
      001A9E 6B                    7099 	ld	l, e
      001A9F 29                    7100 	add	hl, hl
      001AA0 29                    7101 	add	hl, hl
      001AA1 11r00r00              7102 	ld	de, #_shadow_OAM
      001AA4 19                    7103 	add	hl, de
                                   7104 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1219: itm->y=y, itm->x=x;
      001AA5 3E 00                 7105 	ld	a, #0x00
      001AA7 22                    7106 	ld	(hl+), a
      001AA8 36 00                 7107 	ld	(hl), #0x00
                                   7108 ;main.c:920: mch->explcount = mch->x = mch->y = 0;
      001AAA 21 07 00              7109 	ld	hl, #0x0007
      001AAD 09                    7110 	add	hl, bc
      001AAE 33                    7111 	inc	sp
      001AAF 33                    7112 	inc	sp
      001AB0 E5                    7113 	push	hl
      001AB1 59                    7114 	ld	e, c
      001AB2 50                    7115 	ld	d, b
      001AB3 13                    7116 	inc	de
      001AB4 03                    7117 	inc	bc
      001AB5 03                    7118 	inc	bc
      001AB6 AF                    7119 	xor	a, a
      001AB7 02                    7120 	ld	(bc), a
      001AB8 AF                    7121 	xor	a, a
      001AB9 12                    7122 	ld	(de), a
      001ABA E1                    7123 	pop	hl
      001ABB E5                    7124 	push	hl
      001ABC 36 00                 7125 	ld	(hl), #0x00
                                   7126 ;main.c:921: }
      001ABE E8 02                 7127 	add	sp, #2
      001AC0 C9                    7128 	ret
                                   7129 ;main.c:924: void take_damage(Machine * mch, UINT8 dmgamt) {
                                   7130 ;	---------------------------------
                                   7131 ; Function take_damage
                                   7132 ; ---------------------------------
      001AC1                       7133 _take_damage::
      001AC1 3B                    7134 	dec	sp
                                   7135 ;main.c:925: mch->shield -= dmgamt;
      001AC2 F8 03                 7136 	ldhl	sp,#3
      001AC4 2A                    7137 	ld	a, (hl+)
      001AC5 4F                    7138 	ld	c, a
      001AC6 46                    7139 	ld	b, (hl)
      001AC7 21 0B 00              7140 	ld	hl, #0x000b
      001ACA 09                    7141 	add	hl, bc
      001ACB 5D                    7142 	ld	e, l
      001ACC 54                    7143 	ld	d, h
      001ACD 1A                    7144 	ld	a, (de)
      001ACE F5                    7145 	push	af
      001ACF F8 07                 7146 	ldhl	sp,	#7
      001AD1 7E                    7147 	ld	a, (hl)
      001AD2 F8 02                 7148 	ldhl	sp,	#2
      001AD4 77                    7149 	ld	(hl), a
      001AD5 F1                    7150 	pop	af
      001AD6 96                    7151 	sub	a, (hl)
      001AD7 12                    7152 	ld	(de), a
                                   7153 ;main.c:926: if(pl == mch) {
      001AD8 21rC2r00              7154 	ld	hl, #_pl
      001ADB 7E                    7155 	ld	a, (hl)
      001ADC 91                    7156 	sub	a, c
      001ADD 20 76                 7157 	jr	NZ, 00107$
      001ADF 23                    7158 	inc	hl
      001AE0 7E                    7159 	ld	a, (hl)
      001AE1 90                    7160 	sub	a, b
      001AE2 20 71                 7161 	jr	NZ, 00107$
                                   7162 ;main.c:927: hud_upd_shield(pl->shield + dmgamt, pl->shield);
      001AE4 21rC3r00              7163 	ld	hl, #_pl + 1
      001AE7 2B                    7164 	dec	hl
      001AE8 2A                    7165 	ld	a, (hl+)
      001AE9 5F                    7166 	ld	e, a
      001AEA 56                    7167 	ld	d, (hl)
      001AEB 21 0B 00              7168 	ld	hl, #0x000b
      001AEE 19                    7169 	add	hl, de
      001AEF 56                    7170 	ld	d, (hl)
      001AF0 7A                    7171 	ld	a, d
      001AF1 F8 00                 7172 	ldhl	sp,	#0
      001AF3 86                    7173 	add	a, (hl)
      001AF4 C5                    7174 	push	bc
      001AF5 D5                    7175 	push	de
      001AF6 33                    7176 	inc	sp
      001AF7 F5                    7177 	push	af
      001AF8 33                    7178 	inc	sp
      001AF9 CDr0Dr23              7179 	call	_hud_upd_shield
      001AFC E8 02                 7180 	add	sp, #2
      001AFE C1                    7181 	pop	bc
                                   7182 ;main.c:928: if(is_alive(pl)) {
      001AFF 21rC3r00              7183 	ld	hl, #_pl + 1
      001B02 2B                    7184 	dec	hl
      001B03 2A                    7185 	ld	a, (hl+)
      001B04 5F                    7186 	ld	e, a
      001B05 56                    7187 	ld	d, (hl)
                                   7188 ;main.c:831: return mch->shield > 0;
      001B06 21 0B 00              7189 	ld	hl, #0x000b
      001B09 19                    7190 	add	hl, de
      001B0A 6E                    7191 	ld	l, (hl)
      001B0B 5D                    7192 	ld	e, l
      001B0C 16 00                 7193 	ld	d, #0x00
      001B0E AF                    7194 	xor	a, a
      001B0F 95                    7195 	sub	a, l
      001B10 CB 7B                 7196 	bit	7, e
      001B12 28 07                 7197 	jr	Z, 00164$
      001B14 CB 7A                 7198 	bit	7, d
      001B16 20 08                 7199 	jr	NZ, 00165$
      001B18 BF                    7200 	cp	a, a
      001B19 18 05                 7201 	jr	00165$
      001B1B                       7202 00164$:
      001B1B CB 7A                 7203 	bit	7, d
      001B1D 28 01                 7204 	jr	Z, 00165$
      001B1F 37                    7205 	scf
      001B20                       7206 00165$:
      001B20 30 18                 7207 	jr	NC, 00104$
                                   7208 ;main.c:928: if(is_alive(pl)) {
                                   7209 ;main.c:929: iframeflg = 1; // Starting iframe period
      001B22 21rCBr00              7210 	ld	hl, #_iframeflg
      001B25 36 01                 7211 	ld	(hl), #0x01
                                   7212 ;main.c:930: if(plgun == 2) {
      001B27 FArDBr00              7213 	ld	a, (#_plgun)
      001B2A D6 02                 7214 	sub	a, #0x02
      001B2C 20 27                 7215 	jr	NZ, 00107$
                                   7216 ;main.c:931: plgun = 1;  // Reverting to second gun when less than full health
      001B2E 21rDBr00              7217 	ld	hl, #_plgun
      001B31 36 01                 7218 	ld	(hl), #0x01
                                   7219 ;main.c:932: hud_draw_gun();
      001B33 C5                    7220 	push	bc
      001B34 CDr08r24              7221 	call	_hud_draw_gun
      001B37 C1                    7222 	pop	bc
      001B38 18 1B                 7223 	jr	00107$
      001B3A                       7224 00104$:
                                   7225 ;main.c:935: lockmvmnt = 3;
      001B3A 21rC9r00              7226 	ld	hl, #_lockmvmnt
      001B3D 36 03                 7227 	ld	(hl), #0x03
                                   7228 ;main.c:936: pllives--;
      001B3F 21rC8r00              7229 	ld	hl, #_pllives
      001B42 35                    7230 	dec	(hl)
                                   7231 ;main.c:937: plgun = numkills = 0;  // Back to regular gun on death
      001B43 21rDCr00              7232 	ld	hl, #_numkills
      001B46 36 00                 7233 	ld	(hl), #0x00
      001B48 21rDBr00              7234 	ld	hl, #_plgun
      001B4B 36 00                 7235 	ld	(hl), #0x00
                                   7236 ;main.c:938: hud_upd_lives();
      001B4D C5                    7237 	push	bc
      001B4E CDr70r23              7238 	call	_hud_upd_lives
      001B51 CDr08r24              7239 	call	_hud_draw_gun
      001B54 C1                    7240 	pop	bc
      001B55                       7241 00107$:
                                   7242 ;main.c:942: if(!is_alive(mch)) {
      001B55 59                    7243 	ld	e, c
      001B56 50                    7244 	ld	d, b
                                   7245 ;main.c:831: return mch->shield > 0;
      001B57 21 0B 00              7246 	ld	hl, #0x000b
      001B5A 19                    7247 	add	hl, de
      001B5B 6E                    7248 	ld	l, (hl)
      001B5C 5D                    7249 	ld	e, l
      001B5D 16 00                 7250 	ld	d, #0x00
      001B5F AF                    7251 	xor	a, a
      001B60 95                    7252 	sub	a, l
      001B61 CB 7B                 7253 	bit	7, e
      001B63 28 07                 7254 	jr	Z, 00168$
      001B65 CB 7A                 7255 	bit	7, d
      001B67 20 08                 7256 	jr	NZ, 00169$
      001B69 BF                    7257 	cp	a, a
      001B6A 18 05                 7258 	jr	00169$
      001B6C                       7259 00168$:
      001B6C CB 7A                 7260 	bit	7, d
      001B6E 28 01                 7261 	jr	Z, 00169$
      001B70 37                    7262 	scf
      001B71                       7263 00169$:
      001B71 38 47                 7264 	jr	C, 00114$
                                   7265 ;main.c:942: if(!is_alive(mch)) {
                                   7266 ;main.c:943: if(mch != pl) {
      001B73 21rC2r00              7267 	ld	hl, #_pl
      001B76 7E                    7268 	ld	a, (hl)
      001B77 91                    7269 	sub	a, c
      001B78 20 05                 7270 	jr	NZ, 00170$
      001B7A 23                    7271 	inc	hl
      001B7B 7E                    7272 	ld	a, (hl)
      001B7C 90                    7273 	sub	a, b
      001B7D 28 33                 7274 	jr	Z, 00112$
      001B7F                       7275 00170$:
                                   7276 ;main.c:944: numkills++;
      001B7F 21rDCr00              7277 	ld	hl, #_numkills
      001B82 34                    7278 	inc	(hl)
                                   7279 ;main.c:945: if(numkills == 10 && plgun == 0) {
      001B83 7E                    7280 	ld	a, (hl)
      001B84 D6 0A                 7281 	sub	a, #0x0a
      001B86 20 2A                 7282 	jr	NZ, 00112$
      001B88 FArDBr00              7283 	ld	a, (#_plgun)
      001B8B B7                    7284 	or	a, a
      001B8C 20 24                 7285 	jr	NZ, 00112$
                                   7286 ;main.c:946: plgun = pl->shield == 4 ? 2 : 1; // On 10 kills upgrade gun depending on health
      001B8E 21rC3r00              7287 	ld	hl, #_pl + 1
      001B91 2B                    7288 	dec	hl
      001B92 2A                    7289 	ld	a, (hl+)
      001B93 5F                    7290 	ld	e, a
      001B94 56                    7291 	ld	d, (hl)
      001B95 21 0B 00              7292 	ld	hl, #0x000b
      001B98 19                    7293 	add	hl, de
      001B99 7E                    7294 	ld	a, (hl)
      001B9A D6 04                 7295 	sub	a, #0x04
      001B9C 20 05                 7296 	jr	NZ, 00120$
      001B9E 11 02 00              7297 	ld	de, #0x0002
      001BA1 18 03                 7298 	jr	00121$
      001BA3                       7299 00120$:
      001BA3 11 01 00              7300 	ld	de, #0x0001
      001BA6                       7301 00121$:
      001BA6 21rDBr00              7302 	ld	hl, #_plgun
      001BA9 73                    7303 	ld	(hl), e
                                   7304 ;main.c:947: hud_draw_gun();
      001BAA C5                    7305 	push	bc
      001BAB CDr08r24              7306 	call	_hud_draw_gun
      001BAE CDr7Br29              7307 	call	_se_wpn_upgrd
      001BB1 C1                    7308 	pop	bc
      001BB2                       7309 00112$:
                                   7310 ;main.c:951: init_explosion(mch);
      001BB2 C5                    7311 	push	bc
      001BB3 CDr6Dr16              7312 	call	_init_explosion
      001BB6 E8 02                 7313 	add	sp, #2
      001BB8 18 03                 7314 	jr	00118$
      001BBA                       7315 00114$:
                                   7316 ;main.c:953: se_get_hit();
      001BBA CDr31r29              7317 	call	_se_get_hit
      001BBD                       7318 00118$:
                                   7319 ;main.c:955: }
      001BBD 33                    7320 	inc	sp
      001BBE C9                    7321 	ret
                                   7322 ;main.c:958: void add_to_player_shield(UINT8 amt) {  // Used for increasing player shield value
                                   7323 ;	---------------------------------
                                   7324 ; Function add_to_player_shield
                                   7325 ; ---------------------------------
      001BBF                       7326 _add_to_player_shield::
                                   7327 ;main.c:959: if(pl->shield + amt > 4) {
      001BBF 21rC3r00              7328 	ld	hl, #_pl + 1
      001BC2 2B                    7329 	dec	hl
      001BC3 2A                    7330 	ld	a, (hl+)
      001BC4 4F                    7331 	ld	c, a
      001BC5 46                    7332 	ld	b, (hl)
      001BC6 21 0B 00              7333 	ld	hl, #0x000b
      001BC9 09                    7334 	add	hl, bc
      001BCA 4E                    7335 	ld	c, (hl)
      001BCB 79                    7336 	ld	a, c
      001BCC 5F                    7337 	ld	e, a
      001BCD 17                    7338 	rla
      001BCE 9F                    7339 	sbc	a, a
      001BCF 57                    7340 	ld	d, a
      001BD0 F8 02                 7341 	ldhl	sp,	#2
      001BD2 6E                    7342 	ld	l, (hl)
      001BD3 26 00                 7343 	ld	h, #0x00
      001BD5 19                    7344 	add	hl, de
      001BD6 5C                    7345 	ld	e, h
      001BD7 16 00                 7346 	ld	d, #0x00
      001BD9 3E 04                 7347 	ld	a, #0x04
      001BDB BD                    7348 	cp	a, l
      001BDC 3E 00                 7349 	ld	a, #0x00
      001BDE 9C                    7350 	sbc	a, h
      001BDF CB 7B                 7351 	bit	7, e
      001BE1 28 07                 7352 	jr	Z, 00111$
      001BE3 CB 7A                 7353 	bit	7, d
      001BE5 20 08                 7354 	jr	NZ, 00112$
      001BE7 BF                    7355 	cp	a, a
      001BE8 18 05                 7356 	jr	00112$
      001BEA                       7357 00111$:
      001BEA CB 7A                 7358 	bit	7, d
      001BEC 28 01                 7359 	jr	Z, 00112$
      001BEE 37                    7360 	scf
      001BEF                       7361 00112$:
      001BEF 30 16                 7362 	jr	NC, 00102$
                                   7363 ;main.c:960: hud_upd_shield(pl->shield, 4);
      001BF1 06 04                 7364 	ld	b, #0x04
      001BF3 C5                    7365 	push	bc
      001BF4 CDr0Dr23              7366 	call	_hud_upd_shield
      001BF7 E8 02                 7367 	add	sp, #2
                                   7368 ;main.c:961: pl->shield = 4; // Shield max capacity is always 4
      001BF9 21rC3r00              7369 	ld	hl, #_pl + 1
      001BFC 2B                    7370 	dec	hl
      001BFD 2A                    7371 	ld	a, (hl+)
      001BFE 4F                    7372 	ld	c, a
      001BFF 46                    7373 	ld	b, (hl)
      001C00 21 0B 00              7374 	ld	hl, #0x000b
      001C03 09                    7375 	add	hl, bc
      001C04 36 04                 7376 	ld	(hl), #0x04
      001C06 C9                    7377 	ret
      001C07                       7378 00102$:
                                   7379 ;main.c:963: hud_upd_shield(pl->shield, pl->shield + amt);
      001C07 F8 02                 7380 	ldhl	sp,	#2
      001C09 5E                    7381 	ld	e, (hl)
      001C0A 79                    7382 	ld	a, c
      001C0B 83                    7383 	add	a, e
      001C0C D5                    7384 	push	de
      001C0D 47                    7385 	ld	b, a
      001C0E C5                    7386 	push	bc
      001C0F CDr0Dr23              7387 	call	_hud_upd_shield
      001C12 E8 02                 7388 	add	sp, #2
      001C14 D1                    7389 	pop	de
                                   7390 ;main.c:959: if(pl->shield + amt > 4) {
      001C15 21rC3r00              7391 	ld	hl, #_pl + 1
      001C18 2B                    7392 	dec	hl
      001C19 2A                    7393 	ld	a, (hl+)
      001C1A 4F                    7394 	ld	c, a
      001C1B 46                    7395 	ld	b, (hl)
      001C1C 21 0B 00              7396 	ld	hl, #0x000b
      001C1F 09                    7397 	add	hl, bc
                                   7398 ;main.c:964: pl->shield += amt;
      001C20 7E                    7399 	ld	a, (hl)
      001C21 83                    7400 	add	a, e
      001C22 77                    7401 	ld	(hl), a
                                   7402 ;main.c:966: }
      001C23 C9                    7403 	ret
                                   7404 ;main.c:969: void check_iframes() {  // Animate blinking during iframe period
                                   7405 ;	---------------------------------
                                   7406 ; Function check_iframes
                                   7407 ; ---------------------------------
      001C24                       7408 _check_iframes::
                                   7409 ;main.c:970: if(iframecnt == pliframeprd) {  // Iframe period has ended
      001C24 21rD0r00              7410 	ld	hl, #_pliframeprd
      001C27 4E                    7411 	ld	c, (hl)
      001C28 FArCAr00              7412 	ld	a, (#_iframecnt)
      001C2B 91                    7413 	sub	a, c
      001C2C 20 2D                 7414 	jr	NZ, 00105$
                                   7415 ;main.c:971: iframecnt = iframeflg = 0;
      001C2E 21rCBr00              7416 	ld	hl, #_iframeflg
      001C31 36 00                 7417 	ld	(hl), #0x00
      001C33 21rCAr00              7418 	ld	hl, #_iframecnt
      001C36 36 00                 7419 	ld	(hl), #0x00
                                   7420 ;main.c:972: set_machine_sprite_tiles(pl, pl->groundflg == 1 ? 1 : 13);
      001C38 21rC3r00              7421 	ld	hl, #_pl + 1
      001C3B 2B                    7422 	dec	hl
      001C3C 2A                    7423 	ld	a, (hl+)
      001C3D 4F                    7424 	ld	c, a
      001C3E 46                    7425 	ld	b, (hl)
      001C3F 0A                    7426 	ld	a, (bc)
      001C40 3D                    7427 	dec	a
      001C41 20 05                 7428 	jr	NZ, 00109$
      001C43 01 01 00              7429 	ld	bc, #0x0001
      001C46 18 03                 7430 	jr	00110$
      001C48                       7431 00109$:
      001C48 01 0D 00              7432 	ld	bc, #0x000d
      001C4B                       7433 00110$:
      001C4B 79                    7434 	ld	a, c
      001C4C F5                    7435 	push	af
      001C4D 33                    7436 	inc	sp
      001C4E 21rC2r00              7437 	ld	hl, #_pl
      001C51 2A                    7438 	ld	a, (hl+)
      001C52 66                    7439 	ld	h, (hl)
      001C53 6F                    7440 	ld	l, a
      001C54 E5                    7441 	push	hl
      001C55 CDr74r02              7442 	call	_set_machine_sprite_tiles
      001C58 E8 03                 7443 	add	sp, #3
      001C5A C9                    7444 	ret
      001C5B                       7445 00105$:
                                   7446 ;main.c:974: iframecnt++;
      001C5B 21rCAr00              7447 	ld	hl, #_iframecnt
      001C5E 34                    7448 	inc	(hl)
                                   7449 ;main.c:975: if(shadow_OAM[0].tile == 0) {   // Swap player sprite and empty tiles
      001C5F FAr02r00              7450 	ld	a, (#(_shadow_OAM + 0x0002) + 0)
      001C62 B7                    7451 	or	a, a
      001C63 20 23                 7452 	jr	NZ, 00102$
                                   7453 ;main.c:976: set_machine_sprite_tiles(pl, pl->groundflg == 1 ? 1 : 13);
      001C65 21rC3r00              7454 	ld	hl, #_pl + 1
      001C68 2B                    7455 	dec	hl
      001C69 2A                    7456 	ld	a, (hl+)
      001C6A 4F                    7457 	ld	c, a
      001C6B 46                    7458 	ld	b, (hl)
      001C6C 0A                    7459 	ld	a, (bc)
      001C6D 3D                    7460 	dec	a
      001C6E 20 05                 7461 	jr	NZ, 00111$
      001C70 01 01 00              7462 	ld	bc, #0x0001
      001C73 18 03                 7463 	jr	00112$
      001C75                       7464 00111$:
      001C75 01 0D 00              7465 	ld	bc, #0x000d
      001C78                       7466 00112$:
      001C78 79                    7467 	ld	a, c
      001C79 F5                    7468 	push	af
      001C7A 33                    7469 	inc	sp
      001C7B 21rC2r00              7470 	ld	hl, #_pl
      001C7E 2A                    7471 	ld	a, (hl+)
      001C7F 66                    7472 	ld	h, (hl)
      001C80 6F                    7473 	ld	l, a
      001C81 E5                    7474 	push	hl
      001C82 CDr74r02              7475 	call	_set_machine_sprite_tiles
      001C85 E8 03                 7476 	add	sp, #3
      001C87 C9                    7477 	ret
      001C88                       7478 00102$:
                                   7479 ;main.c:978: set_machine_tile(pl, 0);
      001C88 AF                    7480 	xor	a, a
      001C89 F5                    7481 	push	af
      001C8A 33                    7482 	inc	sp
      001C8B 21rC2r00              7483 	ld	hl, #_pl
      001C8E 2A                    7484 	ld	a, (hl+)
      001C8F 66                    7485 	ld	h, (hl)
      001C90 6F                    7486 	ld	l, a
      001C91 E5                    7487 	push	hl
      001C92 CDr22r02              7488 	call	_set_machine_tile
      001C95 E8 03                 7489 	add	sp, #3
                                   7490 ;main.c:981: }
      001C97 C9                    7491 	ret
                                   7492 ;main.c:984: void check_projectile_collsn(Machine * mch, Projectile * prj) {
                                   7493 ;	---------------------------------
                                   7494 ; Function check_projectile_collsn
                                   7495 ; ---------------------------------
      001C98                       7496 _check_projectile_collsn::
      001C98 E8 F4                 7497 	add	sp, #-12
                                   7498 ;main.c:985: if ((mch->x + mch->hboffx < prj->oam->x + prj->width && mch->y + mch->hboffy < prj->oam->y + prj->height) 
      001C9A F8 0E                 7499 	ldhl	sp,	#14
      001C9C 2A                    7500 	ld	a, (hl+)
      001C9D 5E                    7501 	ld	e, (hl)
      001C9E F8 00                 7502 	ldhl	sp,	#0
      001CA0 22                    7503 	ld	(hl+), a
      001CA1 73                    7504 	ld	(hl), e
      001CA2 E1                    7505 	pop	hl
      001CA3 E5                    7506 	push	hl
      001CA4 23                    7507 	inc	hl
      001CA5 4E                    7508 	ld	c, (hl)
      001CA6 06 00                 7509 	ld	b, #0x00
      001CA8 E1                    7510 	pop	hl
      001CA9 E5                    7511 	push	hl
      001CAA 23                    7512 	inc	hl
      001CAB 23                    7513 	inc	hl
      001CAC 23                    7514 	inc	hl
      001CAD 5E                    7515 	ld	e, (hl)
      001CAE 16 00                 7516 	ld	d, #0x00
      001CB0 6B                    7517 	ld	l, e
      001CB1 62                    7518 	ld	h, d
      001CB2 09                    7519 	add	hl, bc
      001CB3 E5                    7520 	push	hl
      001CB4 7D                    7521 	ld	a, l
      001CB5 F8 04                 7522 	ldhl	sp,	#4
      001CB7 77                    7523 	ld	(hl), a
      001CB8 E1                    7524 	pop	hl
      001CB9 7C                    7525 	ld	a, h
      001CBA F8 03                 7526 	ldhl	sp,	#3
      001CBC 77                    7527 	ld	(hl), a
      001CBD F8 10                 7528 	ldhl	sp,	#16
      001CBF 2A                    7529 	ld	a, (hl+)
      001CC0 5E                    7530 	ld	e, (hl)
      001CC1 F8 04                 7531 	ldhl	sp,	#4
      001CC3 22                    7532 	ld	(hl+), a
                                   7533 ;c
      001CC4 7B                    7534 	ld	a, e
      001CC5 32                    7535 	ld	(hl-), a
      001CC6 2A                    7536 	ld	a, (hl+)
      001CC7 5F                    7537 	ld	e, a
      001CC8 56                    7538 	ld	d, (hl)
      001CC9 21 06 00              7539 	ld	hl, #0x0006
      001CCC 19                    7540 	add	hl, de
      001CCD 4D                    7541 	ld	c, l
      001CCE 44                    7542 	ld	b, h
      001CCF 59                    7543 	ld	e, c
      001CD0 50                    7544 	ld	d, b
      001CD1 1A                    7545 	ld	a, (de)
      001CD2 F8 0A                 7546 	ldhl	sp,	#10
      001CD4 22                    7547 	ld	(hl+), a
      001CD5 13                    7548 	inc	de
      001CD6 1A                    7549 	ld	a, (de)
      001CD7 32                    7550 	ld	(hl-), a
      001CD8 2A                    7551 	ld	a, (hl+)
      001CD9 66                    7552 	ld	h, (hl)
      001CDA 6F                    7553 	ld	l, a
      001CDB 23                    7554 	inc	hl
      001CDC 7E                    7555 	ld	a, (hl)
      001CDD F8 06                 7556 	ldhl	sp,	#6
      001CDF 77                    7557 	ld	(hl), a
      001CE0 AF                    7558 	xor	a, a
      001CE1 23                    7559 	inc	hl
      001CE2 77                    7560 	ld	(hl), a
      001CE3 F8 04                 7561 	ldhl	sp,	#4
      001CE5 2A                    7562 	ld	a, (hl+)
      001CE6 66                    7563 	ld	h, (hl)
      001CE7 6F                    7564 	ld	l, a
      001CE8 23                    7565 	inc	hl
      001CE9 23                    7566 	inc	hl
      001CEA 23                    7567 	inc	hl
      001CEB 4E                    7568 	ld	c, (hl)
      001CEC 06 00                 7569 	ld	b, #0x00
      001CEE F8 06                 7570 	ldhl	sp,	#6
      001CF0 2A                    7571 	ld	a, (hl+)
      001CF1 66                    7572 	ld	h, (hl)
      001CF2 6F                    7573 	ld	l, a
      001CF3 09                    7574 	add	hl, bc
      001CF4 4D                    7575 	ld	c, l
      001CF5 44                    7576 	ld	b, h
      001CF6 F8 02                 7577 	ldhl	sp,	#2
      001CF8 7E                    7578 	ld	a, (hl)
      001CF9 91                    7579 	sub	a, c
      001CFA 23                    7580 	inc	hl
      001CFB 7E                    7581 	ld	a, (hl)
      001CFC 98                    7582 	sbc	a, b
      001CFD 56                    7583 	ld	d, (hl)
      001CFE 78                    7584 	ld	a, b
      001CFF 5F                    7585 	ld	e, a
      001D00 CB 7B                 7586 	bit	7, e
      001D02 28 07                 7587 	jr	Z, 00128$
      001D04 CB 7A                 7588 	bit	7, d
      001D06 20 08                 7589 	jr	NZ, 00129$
      001D08 BF                    7590 	cp	a, a
      001D09 18 05                 7591 	jr	00129$
      001D0B                       7592 00128$:
      001D0B CB 7A                 7593 	bit	7, d
      001D0D 28 01                 7594 	jr	Z, 00129$
      001D0F 37                    7595 	scf
      001D10                       7596 00129$:
      001D10 D2rEEr1D              7597 	jp	NC, 00106$
      001D13 E1                    7598 	pop	hl
      001D14 E5                    7599 	push	hl
      001D15 23                    7600 	inc	hl
      001D16 23                    7601 	inc	hl
      001D17 4E                    7602 	ld	c, (hl)
      001D18 06 00                 7603 	ld	b, #0x00
                                   7604 ;c
      001D1A D1                    7605 	pop	de
      001D1B D5                    7606 	push	de
      001D1C 21 04 00              7607 	ld	hl, #0x0004
      001D1F 19                    7608 	add	hl, de
      001D20 5D                    7609 	ld	e, l
      001D21 54                    7610 	ld	d, h
      001D22 1A                    7611 	ld	a, (de)
      001D23 1E 00                 7612 	ld	e, #0x00
      001D25 6F                    7613 	ld	l, a
      001D26 63                    7614 	ld	h, e
      001D27 09                    7615 	add	hl, bc
      001D28 E5                    7616 	push	hl
      001D29 7D                    7617 	ld	a, l
      001D2A F8 0A                 7618 	ldhl	sp,	#10
      001D2C 77                    7619 	ld	(hl), a
      001D2D E1                    7620 	pop	hl
      001D2E 7C                    7621 	ld	a, h
      001D2F F8 09                 7622 	ldhl	sp,	#9
      001D31 22                    7623 	ld	(hl+), a
      001D32 2A                    7624 	ld	a, (hl+)
      001D33 5F                    7625 	ld	e, a
      001D34 56                    7626 	ld	d, (hl)
      001D35 1A                    7627 	ld	a, (de)
      001D36 2B                    7628 	dec	hl
      001D37 77                    7629 	ld	(hl), a
      001D38 AF                    7630 	xor	a, a
      001D39 23                    7631 	inc	hl
      001D3A 77                    7632 	ld	(hl), a
      001D3B F8 04                 7633 	ldhl	sp,	#4
      001D3D 2A                    7634 	ld	a, (hl+)
      001D3E 66                    7635 	ld	h, (hl)
      001D3F 6F                    7636 	ld	l, a
      001D40 23                    7637 	inc	hl
      001D41 23                    7638 	inc	hl
      001D42 4E                    7639 	ld	c, (hl)
      001D43 06 00                 7640 	ld	b, #0x00
      001D45 F8 0A                 7641 	ldhl	sp,	#10
      001D47 2A                    7642 	ld	a, (hl+)
      001D48 66                    7643 	ld	h, (hl)
      001D49 6F                    7644 	ld	l, a
      001D4A 09                    7645 	add	hl, bc
      001D4B 4D                    7646 	ld	c, l
      001D4C 44                    7647 	ld	b, h
      001D4D F8 08                 7648 	ldhl	sp,	#8
      001D4F 7E                    7649 	ld	a, (hl)
      001D50 91                    7650 	sub	a, c
      001D51 23                    7651 	inc	hl
      001D52 7E                    7652 	ld	a, (hl)
      001D53 98                    7653 	sbc	a, b
      001D54 56                    7654 	ld	d, (hl)
      001D55 78                    7655 	ld	a, b
      001D56 5F                    7656 	ld	e, a
      001D57 CB 7B                 7657 	bit	7, e
      001D59 28 07                 7658 	jr	Z, 00130$
      001D5B CB 7A                 7659 	bit	7, d
      001D5D 20 08                 7660 	jr	NZ, 00131$
      001D5F BF                    7661 	cp	a, a
      001D60 18 05                 7662 	jr	00131$
      001D62                       7663 00130$:
      001D62 CB 7A                 7664 	bit	7, d
      001D64 28 01                 7665 	jr	Z, 00131$
      001D66 37                    7666 	scf
      001D67                       7667 00131$:
      001D67 D2rEEr1D              7668 	jp	NC, 00106$
                                   7669 ;main.c:986: && (prj->oam->x <  mch->x + mch->hboffx + mch->width && prj->oam->y <  mch->y + mch->hboffy + mch->height)) {
                                   7670 ;c
      001D6A D1                    7671 	pop	de
      001D6B D5                    7672 	push	de
      001D6C 21 05 00              7673 	ld	hl, #0x0005
      001D6F 19                    7674 	add	hl, de
      001D70 4D                    7675 	ld	c, l
      001D71 44                    7676 	ld	b, h
      001D72 0A                    7677 	ld	a, (bc)
      001D73 16 00                 7678 	ld	d, #0x00
                                   7679 ;c
      001D75 5F                    7680 	ld	e, a
      001D76 F8 02                 7681 	ldhl	sp,	#2
      001D78 2A                    7682 	ld	a, (hl+)
      001D79 66                    7683 	ld	h, (hl)
      001D7A 6F                    7684 	ld	l, a
      001D7B 19                    7685 	add	hl, de
      001D7C 4D                    7686 	ld	c, l
      001D7D 44                    7687 	ld	b, h
      001D7E F8 06                 7688 	ldhl	sp,	#6
      001D80 7E                    7689 	ld	a, (hl)
      001D81 91                    7690 	sub	a, c
      001D82 23                    7691 	inc	hl
      001D83 7E                    7692 	ld	a, (hl)
      001D84 98                    7693 	sbc	a, b
      001D85 56                    7694 	ld	d, (hl)
      001D86 78                    7695 	ld	a, b
      001D87 5F                    7696 	ld	e, a
      001D88 CB 7B                 7697 	bit	7, e
      001D8A 28 07                 7698 	jr	Z, 00132$
      001D8C CB 7A                 7699 	bit	7, d
      001D8E 20 08                 7700 	jr	NZ, 00133$
      001D90 BF                    7701 	cp	a, a
      001D91 18 05                 7702 	jr	00133$
      001D93                       7703 00132$:
      001D93 CB 7A                 7704 	bit	7, d
      001D95 28 01                 7705 	jr	Z, 00133$
      001D97 37                    7706 	scf
      001D98                       7707 00133$:
      001D98 30 54                 7708 	jr	NC, 00106$
                                   7709 ;c
      001D9A D1                    7710 	pop	de
      001D9B D5                    7711 	push	de
      001D9C 21 06 00              7712 	ld	hl, #0x0006
      001D9F 19                    7713 	add	hl, de
      001DA0 4D                    7714 	ld	c, l
      001DA1 44                    7715 	ld	b, h
      001DA2 0A                    7716 	ld	a, (bc)
      001DA3 16 00                 7717 	ld	d, #0x00
                                   7718 ;c
      001DA5 5F                    7719 	ld	e, a
      001DA6 F8 08                 7720 	ldhl	sp,	#8
      001DA8 2A                    7721 	ld	a, (hl+)
      001DA9 66                    7722 	ld	h, (hl)
      001DAA 6F                    7723 	ld	l, a
      001DAB 19                    7724 	add	hl, de
      001DAC 4D                    7725 	ld	c, l
      001DAD 44                    7726 	ld	b, h
      001DAE F8 0A                 7727 	ldhl	sp,	#10
      001DB0 7E                    7728 	ld	a, (hl)
      001DB1 91                    7729 	sub	a, c
      001DB2 23                    7730 	inc	hl
      001DB3 7E                    7731 	ld	a, (hl)
      001DB4 98                    7732 	sbc	a, b
      001DB5 56                    7733 	ld	d, (hl)
      001DB6 78                    7734 	ld	a, b
      001DB7 5F                    7735 	ld	e, a
      001DB8 CB 7B                 7736 	bit	7, e
      001DBA 28 07                 7737 	jr	Z, 00134$
      001DBC CB 7A                 7738 	bit	7, d
      001DBE 20 08                 7739 	jr	NZ, 00135$
      001DC0 BF                    7740 	cp	a, a
      001DC1 18 05                 7741 	jr	00135$
      001DC3                       7742 00134$:
      001DC3 CB 7A                 7743 	bit	7, d
      001DC5 28 01                 7744 	jr	Z, 00135$
      001DC7 37                    7745 	scf
      001DC8                       7746 00135$:
      001DC8 30 24                 7747 	jr	NC, 00106$
                                   7748 ;main.c:987: take_damage(mch, prj->damage);
                                   7749 ;c
      001DCA F8 04                 7750 	ldhl	sp,#4
      001DCC 2A                    7751 	ld	a, (hl+)
      001DCD 5F                    7752 	ld	e, a
      001DCE 56                    7753 	ld	d, (hl)
      001DCF 21 04 00              7754 	ld	hl, #0x0004
      001DD2 19                    7755 	add	hl, de
      001DD3 4D                    7756 	ld	c, l
      001DD4 44                    7757 	ld	b, h
      001DD5 0A                    7758 	ld	a, (bc)
      001DD6 F5                    7759 	push	af
      001DD7 33                    7760 	inc	sp
      001DD8 F8 01                 7761 	ldhl	sp,	#1
      001DDA 2A                    7762 	ld	a, (hl+)
      001DDB 66                    7763 	ld	h, (hl)
      001DDC 6F                    7764 	ld	l, a
      001DDD E5                    7765 	push	hl
      001DDE CDrC1r1A              7766 	call	_take_damage
      001DE1 E8 03                 7767 	add	sp, #3
                                   7768 ;main.c:988: destroy_projectile(prj);
      001DE3 F8 04                 7769 	ldhl	sp,	#4
      001DE5 2A                    7770 	ld	a, (hl+)
      001DE6 66                    7771 	ld	h, (hl)
      001DE7 6F                    7772 	ld	l, a
      001DE8 E5                    7773 	push	hl
      001DE9 CDr44r16              7774 	call	_destroy_projectile
      001DEC E8 02                 7775 	add	sp, #2
      001DEE                       7776 00106$:
                                   7777 ;main.c:990: }
      001DEE E8 0C                 7778 	add	sp, #12
      001DF0 C9                    7779 	ret
                                   7780 ;main.c:993: void check_player_machine_collsn(Machine * mch) {
                                   7781 ;	---------------------------------
                                   7782 ; Function check_player_machine_collsn
                                   7783 ; ---------------------------------
      001DF1                       7784 _check_player_machine_collsn::
      001DF1 E8 F4                 7785 	add	sp, #-12
                                   7786 ;main.c:994: if ((mch->x + mch->hboffx < pl->x + pl->hboffx + pl->width && mch->y + mch->hboffy < pl->y + pl->hboffy + pl->height) 
      001DF3 F8 0E                 7787 	ldhl	sp,	#14
      001DF5 2A                    7788 	ld	a, (hl+)
      001DF6 5E                    7789 	ld	e, (hl)
      001DF7 F8 00                 7790 	ldhl	sp,	#0
      001DF9 22                    7791 	ld	(hl+), a
      001DFA 73                    7792 	ld	(hl), e
      001DFB E1                    7793 	pop	hl
      001DFC E5                    7794 	push	hl
      001DFD 23                    7795 	inc	hl
      001DFE 4E                    7796 	ld	c, (hl)
      001DFF 06 00                 7797 	ld	b, #0x00
      001E01 E1                    7798 	pop	hl
      001E02 E5                    7799 	push	hl
      001E03 23                    7800 	inc	hl
      001E04 23                    7801 	inc	hl
      001E05 23                    7802 	inc	hl
      001E06 5E                    7803 	ld	e, (hl)
      001E07 16 00                 7804 	ld	d, #0x00
      001E09 6B                    7805 	ld	l, e
      001E0A 62                    7806 	ld	h, d
      001E0B 09                    7807 	add	hl, bc
      001E0C E5                    7808 	push	hl
      001E0D 7D                    7809 	ld	a, l
      001E0E F8 04                 7810 	ldhl	sp,	#4
      001E10 77                    7811 	ld	(hl), a
      001E11 E1                    7812 	pop	hl
      001E12 7C                    7813 	ld	a, h
      001E13 F8 03                 7814 	ldhl	sp,	#3
      001E15 77                    7815 	ld	(hl), a
      001E16 21rC2r00              7816 	ld	hl, #_pl
      001E19 2A                    7817 	ld	a, (hl+)
      001E1A 5E                    7818 	ld	e, (hl)
      001E1B F8 04                 7819 	ldhl	sp,	#4
      001E1D 22                    7820 	ld	(hl+), a
      001E1E 7B                    7821 	ld	a, e
      001E1F 32                    7822 	ld	(hl-), a
      001E20 2A                    7823 	ld	a, (hl+)
      001E21 66                    7824 	ld	h, (hl)
      001E22 6F                    7825 	ld	l, a
      001E23 23                    7826 	inc	hl
      001E24 4E                    7827 	ld	c, (hl)
      001E25 06 00                 7828 	ld	b, #0x00
      001E27 F8 04                 7829 	ldhl	sp,	#4
      001E29 2A                    7830 	ld	a, (hl+)
      001E2A 66                    7831 	ld	h, (hl)
      001E2B 6F                    7832 	ld	l, a
      001E2C 23                    7833 	inc	hl
      001E2D 23                    7834 	inc	hl
      001E2E 23                    7835 	inc	hl
      001E2F 5E                    7836 	ld	e, (hl)
      001E30 16 00                 7837 	ld	d, #0x00
      001E32 6B                    7838 	ld	l, e
      001E33 62                    7839 	ld	h, d
      001E34 09                    7840 	add	hl, bc
      001E35 E5                    7841 	push	hl
      001E36 7D                    7842 	ld	a, l
      001E37 F8 08                 7843 	ldhl	sp,	#8
      001E39 77                    7844 	ld	(hl), a
      001E3A E1                    7845 	pop	hl
      001E3B 7C                    7846 	ld	a, h
      001E3C F8 07                 7847 	ldhl	sp,	#7
                                   7848 ;c
      001E3E 32                    7849 	ld	(hl-), a
      001E3F 2B                    7850 	dec	hl
      001E40 2B                    7851 	dec	hl
      001E41 2A                    7852 	ld	a, (hl+)
      001E42 5F                    7853 	ld	e, a
      001E43 56                    7854 	ld	d, (hl)
      001E44 21 05 00              7855 	ld	hl, #0x0005
      001E47 19                    7856 	add	hl, de
      001E48 4D                    7857 	ld	c, l
      001E49 44                    7858 	ld	b, h
      001E4A 0A                    7859 	ld	a, (bc)
      001E4B 4F                    7860 	ld	c, a
      001E4C 06 00                 7861 	ld	b, #0x00
      001E4E F8 06                 7862 	ldhl	sp,	#6
      001E50 2A                    7863 	ld	a, (hl+)
      001E51 66                    7864 	ld	h, (hl)
      001E52 6F                    7865 	ld	l, a
      001E53 09                    7866 	add	hl, bc
      001E54 4D                    7867 	ld	c, l
      001E55 44                    7868 	ld	b, h
      001E56 F8 02                 7869 	ldhl	sp,	#2
      001E58 7E                    7870 	ld	a, (hl)
      001E59 91                    7871 	sub	a, c
      001E5A 23                    7872 	inc	hl
      001E5B 7E                    7873 	ld	a, (hl)
      001E5C 98                    7874 	sbc	a, b
      001E5D 56                    7875 	ld	d, (hl)
      001E5E 78                    7876 	ld	a, b
      001E5F 5F                    7877 	ld	e, a
      001E60 CB 7B                 7878 	bit	7, e
      001E62 28 07                 7879 	jr	Z, 00135$
      001E64 CB 7A                 7880 	bit	7, d
      001E66 20 08                 7881 	jr	NZ, 00136$
      001E68 BF                    7882 	cp	a, a
      001E69 18 05                 7883 	jr	00136$
      001E6B                       7884 00135$:
      001E6B CB 7A                 7885 	bit	7, d
      001E6D 28 01                 7886 	jr	Z, 00136$
      001E6F 37                    7887 	scf
      001E70                       7888 00136$:
      001E70 D2r7Ar1F              7889 	jp	NC, 00108$
      001E73 E1                    7890 	pop	hl
      001E74 E5                    7891 	push	hl
      001E75 23                    7892 	inc	hl
      001E76 23                    7893 	inc	hl
      001E77 4E                    7894 	ld	c, (hl)
      001E78 06 00                 7895 	ld	b, #0x00
                                   7896 ;c
      001E7A D1                    7897 	pop	de
      001E7B D5                    7898 	push	de
      001E7C 21 04 00              7899 	ld	hl, #0x0004
      001E7F 19                    7900 	add	hl, de
      001E80 5D                    7901 	ld	e, l
      001E81 54                    7902 	ld	d, h
      001E82 1A                    7903 	ld	a, (de)
      001E83 1E 00                 7904 	ld	e, #0x00
      001E85 6F                    7905 	ld	l, a
      001E86 63                    7906 	ld	h, e
      001E87 09                    7907 	add	hl, bc
      001E88 E5                    7908 	push	hl
      001E89 7D                    7909 	ld	a, l
      001E8A F8 0A                 7910 	ldhl	sp,	#10
      001E8C 77                    7911 	ld	(hl), a
      001E8D E1                    7912 	pop	hl
      001E8E 7C                    7913 	ld	a, h
      001E8F F8 09                 7914 	ldhl	sp,	#9
      001E91 77                    7915 	ld	(hl), a
      001E92 F8 04                 7916 	ldhl	sp,	#4
      001E94 2A                    7917 	ld	a, (hl+)
      001E95 66                    7918 	ld	h, (hl)
      001E96 6F                    7919 	ld	l, a
      001E97 23                    7920 	inc	hl
      001E98 23                    7921 	inc	hl
      001E99 4E                    7922 	ld	c, (hl)
      001E9A 06 00                 7923 	ld	b, #0x00
                                   7924 ;c
      001E9C F8 04                 7925 	ldhl	sp,#4
      001E9E 2A                    7926 	ld	a, (hl+)
      001E9F 5F                    7927 	ld	e, a
      001EA0 56                    7928 	ld	d, (hl)
      001EA1 21 04 00              7929 	ld	hl, #0x0004
      001EA4 19                    7930 	add	hl, de
      001EA5 5D                    7931 	ld	e, l
      001EA6 54                    7932 	ld	d, h
      001EA7 1A                    7933 	ld	a, (de)
      001EA8 1E 00                 7934 	ld	e, #0x00
      001EAA 6F                    7935 	ld	l, a
      001EAB 63                    7936 	ld	h, e
      001EAC 09                    7937 	add	hl, bc
      001EAD E5                    7938 	push	hl
      001EAE 7D                    7939 	ld	a, l
      001EAF F8 0C                 7940 	ldhl	sp,	#12
      001EB1 77                    7941 	ld	(hl), a
      001EB2 E1                    7942 	pop	hl
      001EB3 7C                    7943 	ld	a, h
      001EB4 F8 0B                 7944 	ldhl	sp,	#11
      001EB6 77                    7945 	ld	(hl), a
                                   7946 ;c
      001EB7 F8 04                 7947 	ldhl	sp,#4
      001EB9 2A                    7948 	ld	a, (hl+)
      001EBA 5F                    7949 	ld	e, a
      001EBB 56                    7950 	ld	d, (hl)
      001EBC 21 06 00              7951 	ld	hl, #0x0006
      001EBF 19                    7952 	add	hl, de
      001EC0 4D                    7953 	ld	c, l
      001EC1 44                    7954 	ld	b, h
      001EC2 0A                    7955 	ld	a, (bc)
      001EC3 4F                    7956 	ld	c, a
      001EC4 06 00                 7957 	ld	b, #0x00
      001EC6 F8 0A                 7958 	ldhl	sp,	#10
      001EC8 2A                    7959 	ld	a, (hl+)
      001EC9 66                    7960 	ld	h, (hl)
      001ECA 6F                    7961 	ld	l, a
      001ECB 09                    7962 	add	hl, bc
      001ECC 4D                    7963 	ld	c, l
      001ECD 44                    7964 	ld	b, h
      001ECE F8 08                 7965 	ldhl	sp,	#8
      001ED0 7E                    7966 	ld	a, (hl)
      001ED1 91                    7967 	sub	a, c
      001ED2 23                    7968 	inc	hl
      001ED3 7E                    7969 	ld	a, (hl)
      001ED4 98                    7970 	sbc	a, b
      001ED5 56                    7971 	ld	d, (hl)
      001ED6 78                    7972 	ld	a, b
      001ED7 5F                    7973 	ld	e, a
      001ED8 CB 7B                 7974 	bit	7, e
      001EDA 28 07                 7975 	jr	Z, 00137$
      001EDC CB 7A                 7976 	bit	7, d
      001EDE 20 08                 7977 	jr	NZ, 00138$
      001EE0 BF                    7978 	cp	a, a
      001EE1 18 05                 7979 	jr	00138$
      001EE3                       7980 00137$:
      001EE3 CB 7A                 7981 	bit	7, d
      001EE5 28 01                 7982 	jr	Z, 00138$
      001EE7 37                    7983 	scf
      001EE8                       7984 00138$:
      001EE8 D2r7Ar1F              7985 	jp	NC, 00108$
                                   7986 ;main.c:995: && (pl->x + pl->hboffx <  mch->x + mch->hboffx + mch->width && pl->y + pl->hboffy <  mch->y + mch->hboffy + mch->height)) {
                                   7987 ;c
      001EEB D1                    7988 	pop	de
      001EEC D5                    7989 	push	de
      001EED 21 05 00              7990 	ld	hl, #0x0005
      001EF0 19                    7991 	add	hl, de
      001EF1 4D                    7992 	ld	c, l
      001EF2 44                    7993 	ld	b, h
      001EF3 0A                    7994 	ld	a, (bc)
      001EF4 16 00                 7995 	ld	d, #0x00
                                   7996 ;c
      001EF6 5F                    7997 	ld	e, a
      001EF7 F8 02                 7998 	ldhl	sp,	#2
      001EF9 2A                    7999 	ld	a, (hl+)
      001EFA 66                    8000 	ld	h, (hl)
      001EFB 6F                    8001 	ld	l, a
      001EFC 19                    8002 	add	hl, de
      001EFD 4D                    8003 	ld	c, l
      001EFE 44                    8004 	ld	b, h
      001EFF F8 06                 8005 	ldhl	sp,	#6
      001F01 7E                    8006 	ld	a, (hl)
      001F02 91                    8007 	sub	a, c
      001F03 23                    8008 	inc	hl
      001F04 7E                    8009 	ld	a, (hl)
      001F05 98                    8010 	sbc	a, b
      001F06 56                    8011 	ld	d, (hl)
      001F07 78                    8012 	ld	a, b
      001F08 5F                    8013 	ld	e, a
      001F09 CB 7B                 8014 	bit	7, e
      001F0B 28 07                 8015 	jr	Z, 00139$
      001F0D CB 7A                 8016 	bit	7, d
      001F0F 20 08                 8017 	jr	NZ, 00140$
      001F11 BF                    8018 	cp	a, a
      001F12 18 05                 8019 	jr	00140$
      001F14                       8020 00139$:
      001F14 CB 7A                 8021 	bit	7, d
      001F16 28 01                 8022 	jr	Z, 00140$
      001F18 37                    8023 	scf
      001F19                       8024 00140$:
      001F19 30 5F                 8025 	jr	NC, 00108$
                                   8026 ;c
      001F1B D1                    8027 	pop	de
      001F1C D5                    8028 	push	de
      001F1D 21 06 00              8029 	ld	hl, #0x0006
      001F20 19                    8030 	add	hl, de
      001F21 4D                    8031 	ld	c, l
      001F22 44                    8032 	ld	b, h
      001F23 0A                    8033 	ld	a, (bc)
      001F24 16 00                 8034 	ld	d, #0x00
                                   8035 ;c
      001F26 5F                    8036 	ld	e, a
      001F27 F8 08                 8037 	ldhl	sp,	#8
      001F29 2A                    8038 	ld	a, (hl+)
      001F2A 66                    8039 	ld	h, (hl)
      001F2B 6F                    8040 	ld	l, a
      001F2C 19                    8041 	add	hl, de
      001F2D 4D                    8042 	ld	c, l
      001F2E 44                    8043 	ld	b, h
      001F2F F8 0A                 8044 	ldhl	sp,	#10
      001F31 7E                    8045 	ld	a, (hl)
      001F32 91                    8046 	sub	a, c
      001F33 23                    8047 	inc	hl
      001F34 7E                    8048 	ld	a, (hl)
      001F35 98                    8049 	sbc	a, b
      001F36 56                    8050 	ld	d, (hl)
      001F37 78                    8051 	ld	a, b
      001F38 5F                    8052 	ld	e, a
      001F39 CB 7B                 8053 	bit	7, e
      001F3B 28 07                 8054 	jr	Z, 00141$
      001F3D CB 7A                 8055 	bit	7, d
      001F3F 20 08                 8056 	jr	NZ, 00142$
      001F41 BF                    8057 	cp	a, a
      001F42 18 05                 8058 	jr	00142$
      001F44                       8059 00141$:
      001F44 CB 7A                 8060 	bit	7, d
      001F46 28 01                 8061 	jr	Z, 00142$
      001F48 37                    8062 	scf
      001F49                       8063 00142$:
      001F49 30 2F                 8064 	jr	NC, 00108$
                                   8065 ;main.c:996: take_damage(pl, pl->shield);    // Take all health away
                                   8066 ;c
      001F4B F8 04                 8067 	ldhl	sp,#4
      001F4D 2A                    8068 	ld	a, (hl+)
      001F4E 5F                    8069 	ld	e, a
      001F4F 56                    8070 	ld	d, (hl)
      001F50 21 0B 00              8071 	ld	hl, #0x000b
      001F53 19                    8072 	add	hl, de
      001F54 4D                    8073 	ld	c, l
      001F55 44                    8074 	ld	b, h
      001F56 0A                    8075 	ld	a, (bc)
      001F57 F5                    8076 	push	af
      001F58 33                    8077 	inc	sp
      001F59 21rC2r00              8078 	ld	hl, #_pl
      001F5C 2A                    8079 	ld	a, (hl+)
      001F5D 66                    8080 	ld	h, (hl)
      001F5E 6F                    8081 	ld	l, a
      001F5F E5                    8082 	push	hl
      001F60 CDrC1r1A              8083 	call	_take_damage
      001F63 E8 03                 8084 	add	sp, #3
                                   8085 ;main.c:997: if(mch->type != 6) {
                                   8086 ;c
      001F65 D1                    8087 	pop	de
      001F66 D5                    8088 	push	de
      001F67 21 0C 00              8089 	ld	hl, #0x000c
      001F6A 19                    8090 	add	hl, de
      001F6B 4D                    8091 	ld	c, l
      001F6C 44                    8092 	ld	b, h
      001F6D 0A                    8093 	ld	a, (bc)
      001F6E D6 06                 8094 	sub	a, #0x06
      001F70 28 08                 8095 	jr	Z, 00108$
                                   8096 ;main.c:998: init_explosion(mch);
      001F72 E1                    8097 	pop	hl
      001F73 E5                    8098 	push	hl
      001F74 E5                    8099 	push	hl
      001F75 CDr6Dr16              8100 	call	_init_explosion
      001F78 E8 02                 8101 	add	sp, #2
      001F7A                       8102 00108$:
                                   8103 ;main.c:1001: }
      001F7A E8 0C                 8104 	add	sp, #12
      001F7C C9                    8105 	ret
                                   8106 ;main.c:1004: void anim_jump() {
                                   8107 ;	---------------------------------
                                   8108 ; Function anim_jump
                                   8109 ; ---------------------------------
      001F7D                       8110 _anim_jump::
      001F7D E8 F6                 8111 	add	sp, #-10
                                   8112 ;main.c:1007: move_machine(pl, 0, pl->y > jumpstarty - jumphalflimy ? -jumpspeed : -jumpspeed + 1);
      001F7F FArB4r00              8113 	ld	a, (#_jumpspeed)
      001F82 F8 00                 8114 	ldhl	sp,	#0
      001F84 77                    8115 	ld	(hl), a
                                   8116 ;main.c:1005: if(ascendflg) {
      001F85 FArCDr00              8117 	ld	a, (#_ascendflg)
      001F88 B7                    8118 	or	a, a
      001F89 CAr68r20              8119 	jp	Z, 00110$
                                   8120 ;main.c:1006: if(pl->y > jumpstarty - jumplimity) {    // Ascending
      001F8C 21rC2r00              8121 	ld	hl, #_pl
      001F8F 2A                    8122 	ld	a, (hl+)
      001F90 5E                    8123 	ld	e, (hl)
      001F91 F8 01                 8124 	ldhl	sp,	#1
      001F93 22                    8125 	ld	(hl+), a
                                   8126 ;c
      001F94 7B                    8127 	ld	a, e
      001F95 32                    8128 	ld	(hl-), a
      001F96 2A                    8129 	ld	a, (hl+)
      001F97 5F                    8130 	ld	e, a
      001F98 56                    8131 	ld	d, (hl)
      001F99 21 02 00              8132 	ld	hl, #0x0002
      001F9C 19                    8133 	add	hl, de
      001F9D E5                    8134 	push	hl
      001F9E 7D                    8135 	ld	a, l
      001F9F F8 0A                 8136 	ldhl	sp,	#10
      001FA1 77                    8137 	ld	(hl), a
      001FA2 E1                    8138 	pop	hl
      001FA3 7C                    8139 	ld	a, h
      001FA4 F8 09                 8140 	ldhl	sp,	#9
      001FA6 32                    8141 	ld	(hl-), a
      001FA7 2A                    8142 	ld	a, (hl+)
      001FA8 5F                    8143 	ld	e, a
      001FA9 56                    8144 	ld	d, (hl)
      001FAA 1A                    8145 	ld	a, (de)
      001FAB F8 03                 8146 	ldhl	sp,	#3
      001FAD 77                    8147 	ld	(hl), a
      001FAE FArCEr00              8148 	ld	a, (#_jumpstarty)
      001FB1 F8 04                 8149 	ldhl	sp,	#4
      001FB3 77                    8150 	ld	(hl), a
      001FB4 AF                    8151 	xor	a, a
      001FB5 23                    8152 	inc	hl
      001FB6 77                    8153 	ld	(hl), a
      001FB7 FArD2r00              8154 	ld	a, (#_jumplimity)
      001FBA F8 09                 8155 	ldhl	sp,	#9
      001FBC 77                    8156 	ld	(hl), a
      001FBD F8 06                 8157 	ldhl	sp,	#6
      001FBF 77                    8158 	ld	(hl), a
      001FC0 AF                    8159 	xor	a, a
      001FC1 23                    8160 	inc	hl
      001FC2 32                    8161 	ld	(hl-), a
      001FC3 2B                    8162 	dec	hl
      001FC4 2B                    8163 	dec	hl
      001FC5 2A                    8164 	ld	a, (hl+)
      001FC6 5F                    8165 	ld	e, a
      001FC7 2A                    8166 	ld	a, (hl+)
      001FC8 57                    8167 	ld	d, a
      001FC9 2A                    8168 	ld	a, (hl+)
      001FCA 66                    8169 	ld	h, (hl)
      001FCB 6F                    8170 	ld	l, a
      001FCC 7B                    8171 	ld	a, e
      001FCD 95                    8172 	sub	a, l
      001FCE 5F                    8173 	ld	e, a
      001FCF 7A                    8174 	ld	a, d
      001FD0 9C                    8175 	sbc	a, h
      001FD1 F8 09                 8176 	ldhl	sp,	#9
      001FD3 32                    8177 	ld	(hl-), a
      001FD4 73                    8178 	ld	(hl), e
      001FD5 F8 03                 8179 	ldhl	sp,	#3
      001FD7 4E                    8180 	ld	c, (hl)
      001FD8 06 00                 8181 	ld	b, #0x00
      001FDA F8 08                 8182 	ldhl	sp,	#8
      001FDC 7E                    8183 	ld	a, (hl)
      001FDD 91                    8184 	sub	a, c
      001FDE 23                    8185 	inc	hl
      001FDF 7E                    8186 	ld	a, (hl)
      001FE0 98                    8187 	sbc	a, b
      001FE1 56                    8188 	ld	d, (hl)
      001FE2 78                    8189 	ld	a, b
      001FE3 5F                    8190 	ld	e, a
      001FE4 CB 7B                 8191 	bit	7, e
      001FE6 28 07                 8192 	jr	Z, 00146$
      001FE8 CB 7A                 8193 	bit	7, d
      001FEA 20 08                 8194 	jr	NZ, 00147$
      001FEC BF                    8195 	cp	a, a
      001FED 18 05                 8196 	jr	00147$
      001FEF                       8197 00146$:
      001FEF CB 7A                 8198 	bit	7, d
      001FF1 28 01                 8199 	jr	Z, 00147$
      001FF3 37                    8200 	scf
      001FF4                       8201 00147$:
      001FF4 30 57                 8202 	jr	NC, 00105$
                                   8203 ;main.c:1007: move_machine(pl, 0, pl->y > jumpstarty - jumphalflimy ? -jumpspeed : -jumpspeed + 1);
      001FF6 FArD3r00              8204 	ld	a, (#_jumphalflimy)
      001FF9 F8 06                 8205 	ldhl	sp,	#6
      001FFB 77                    8206 	ld	(hl), a
      001FFC AF                    8207 	xor	a, a
      001FFD 23                    8208 	inc	hl
      001FFE 32                    8209 	ld	(hl-), a
      001FFF 2B                    8210 	dec	hl
      002000 2B                    8211 	dec	hl
      002001 2A                    8212 	ld	a, (hl+)
      002002 5F                    8213 	ld	e, a
      002003 2A                    8214 	ld	a, (hl+)
      002004 57                    8215 	ld	d, a
      002005 2A                    8216 	ld	a, (hl+)
      002006 66                    8217 	ld	h, (hl)
      002007 6F                    8218 	ld	l, a
      002008 7B                    8219 	ld	a, e
      002009 95                    8220 	sub	a, l
      00200A 5F                    8221 	ld	e, a
      00200B 7A                    8222 	ld	a, d
      00200C 9C                    8223 	sbc	a, h
      00200D F8 09                 8224 	ldhl	sp,	#9
      00200F 32                    8225 	ld	(hl-), a
      002010 73                    8226 	ld	(hl), e
      002011 AF                    8227 	xor	a, a
      002012 F8 00                 8228 	ldhl	sp,	#0
      002014 96                    8229 	sub	a, (hl)
      002015 F8 07                 8230 	ldhl	sp,	#7
      002017 22                    8231 	ld	(hl+), a
      002018 7E                    8232 	ld	a, (hl)
      002019 91                    8233 	sub	a, c
      00201A 23                    8234 	inc	hl
      00201B 7E                    8235 	ld	a, (hl)
      00201C 98                    8236 	sbc	a, b
      00201D 56                    8237 	ld	d, (hl)
      00201E 78                    8238 	ld	a, b
      00201F CB 7F                 8239 	bit	7,a
      002021 28 07                 8240 	jr	Z, 00148$
      002023 CB 7A                 8241 	bit	7, d
      002025 20 08                 8242 	jr	NZ, 00149$
      002027 BF                    8243 	cp	a, a
      002028 18 05                 8244 	jr	00149$
      00202A                       8245 00148$:
      00202A CB 7A                 8246 	bit	7, d
      00202C 28 01                 8247 	jr	Z, 00149$
      00202E 37                    8248 	scf
      00202F                       8249 00149$:
      00202F 30 05                 8250 	jr	NC, 00114$
      002031 F8 07                 8251 	ldhl	sp,	#7
      002033 7E                    8252 	ld	a, (hl)
      002034 18 04                 8253 	jr	00115$
      002036                       8254 00114$:
      002036 F8 07                 8255 	ldhl	sp,	#7
      002038 7E                    8256 	ld	a, (hl)
      002039 3C                    8257 	inc	a
      00203A                       8258 00115$:
      00203A F5                    8259 	push	af
      00203B 33                    8260 	inc	sp
      00203C AF                    8261 	xor	a, a
      00203D F5                    8262 	push	af
      00203E 33                    8263 	inc	sp
      00203F 21rC2r00              8264 	ld	hl, #_pl
      002042 2A                    8265 	ld	a, (hl+)
      002043 66                    8266 	ld	h, (hl)
      002044 6F                    8267 	ld	l, a
      002045 E5                    8268 	push	hl
      002046 CDrF3r08              8269 	call	_move_machine
      002049 E8 04                 8270 	add	sp, #4
      00204B 18 5E                 8271 	jr	00112$
      00204D                       8272 00105$:
                                   8273 ;main.c:1009: if(pl->x < holestartx && pl->x > holeendx) {  // Above solid ground
      00204D F8 01                 8274 	ldhl	sp,	#1
      00204F 2A                    8275 	ld	a, (hl+)
      002050 66                    8276 	ld	h, (hl)
      002051 6F                    8277 	ld	l, a
      002052 23                    8278 	inc	hl
      002053 4E                    8279 	ld	c, (hl)
      002054 79                    8280 	ld	a, c
      002055 21rCFr00              8281 	ld	hl, #_holestartx
      002058 96                    8282 	sub	a, (hl)
      002059 30 50                 8283 	jr	NC, 00112$
      00205B FArD0r00              8284 	ld	a, (#_holeendx)
      00205E 91                    8285 	sub	a, c
      00205F 30 4A                 8286 	jr	NC, 00112$
                                   8287 ;main.c:1010: ascendflg = 0; // Start of descend
      002061 21rCDr00              8288 	ld	hl, #_ascendflg
      002064 36 00                 8289 	ld	(hl), #0x00
      002066 18 43                 8290 	jr	00112$
      002068                       8291 00110$:
                                   8292 ;main.c:1014: move_machine(pl, 0, jumpspeed);
      002068 F8 00                 8293 	ldhl	sp,	#0
      00206A 7E                    8294 	ld	a, (hl)
      00206B F5                    8295 	push	af
      00206C 33                    8296 	inc	sp
      00206D AF                    8297 	xor	a, a
      00206E F5                    8298 	push	af
      00206F 33                    8299 	inc	sp
      002070 21rC2r00              8300 	ld	hl, #_pl
      002073 2A                    8301 	ld	a, (hl+)
      002074 66                    8302 	ld	h, (hl)
      002075 6F                    8303 	ld	l, a
      002076 E5                    8304 	push	hl
      002077 CDrF3r08              8305 	call	_move_machine
      00207A E8 04                 8306 	add	sp, #4
                                   8307 ;main.c:1006: if(pl->y > jumpstarty - jumplimity) {    // Ascending
      00207C 21rC3r00              8308 	ld	hl, #_pl + 1
      00207F 2B                    8309 	dec	hl
      002080 2A                    8310 	ld	a, (hl+)
      002081 4F                    8311 	ld	c, a
      002082 46                    8312 	ld	b, (hl)
                                   8313 ;main.c:1015: if(pl->y >= jumpstarty) {    // Back on ground / stop jump animmation
      002083 69                    8314 	ld	l, c
      002084 60                    8315 	ld	h, b
      002085 23                    8316 	inc	hl
      002086 23                    8317 	inc	hl
      002087 5E                    8318 	ld	e, (hl)
      002088 7B                    8319 	ld	a, e
      002089 21rCEr00              8320 	ld	hl, #_jumpstarty
      00208C 96                    8321 	sub	a, (hl)
      00208D 38 1C                 8322 	jr	C, 00112$
                                   8323 ;main.c:1016: pl->groundflg = 1;
      00208F 3E 01                 8324 	ld	a, #0x01
      002091 02                    8325 	ld	(bc), a
                                   8326 ;main.c:1017: ascendflg = 1;  // Reverting flag for next jump
      002092 21rCDr00              8327 	ld	hl, #_ascendflg
                                   8328 ;main.c:1018: set_machine_sprite_tiles(pl, 1);
      002095 3E 01                 8329 	ld	a,#0x01
      002097 77                    8330 	ld	(hl),a
      002098 F5                    8331 	push	af
      002099 33                    8332 	inc	sp
      00209A 21rC2r00              8333 	ld	hl, #_pl
      00209D 2A                    8334 	ld	a, (hl+)
      00209E 66                    8335 	ld	h, (hl)
      00209F 6F                    8336 	ld	l, a
      0020A0 E5                    8337 	push	hl
      0020A1 CDr74r02              8338 	call	_set_machine_sprite_tiles
      0020A4 E8 03                 8339 	add	sp, #3
                                   8340 ;main.c:1019: lockmvmnt = 0;  // Allowing free movement
      0020A6 21rC9r00              8341 	ld	hl, #_lockmvmnt
      0020A9 36 00                 8342 	ld	(hl), #0x00
      0020AB                       8343 00112$:
                                   8344 ;main.c:1022: }
      0020AB E8 0A                 8345 	add	sp, #10
      0020AD C9                    8346 	ret
                                   8347 ;main.c:1028: void exec_enemy_pattern(Machine * mch) {
                                   8348 ;	---------------------------------
                                   8349 ; Function exec_enemy_pattern
                                   8350 ; ---------------------------------
      0020AE                       8351 _exec_enemy_pattern::
                                   8352 ;main.c:1029: switch(mch->type) {
      0020AE C1                    8353 	pop	bc
      0020AF D1                    8354 	pop	de
      0020B0 D5                    8355 	push	de
      0020B1 C5                    8356 	push	bc
      0020B2 21 0C 00              8357 	ld	hl, #0x000c
      0020B5 19                    8358 	add	hl, de
      0020B6 7E                    8359 	ld	a, (hl)
      0020B7 B7                    8360 	or	a, a
      0020B8 28 15                 8361 	jr	Z, 00101$
      0020BA FE 01                 8362 	cp	a, #0x01
      0020BC 28 18                 8363 	jr	Z, 00102$
      0020BE FE 02                 8364 	cp	a, #0x02
      0020C0 28 1B                 8365 	jr	Z, 00103$
      0020C2 FE 03                 8366 	cp	a, #0x03
      0020C4 28 1E                 8367 	jr	Z, 00104$
      0020C6 FE 04                 8368 	cp	a, #0x04
      0020C8 28 21                 8369 	jr	Z, 00105$
      0020CA D6 05                 8370 	sub	a, #0x05
      0020CC 28 24                 8371 	jr	Z, 00106$
      0020CE C9                    8372 	ret
                                   8373 ;main.c:1030: case 0:
      0020CF                       8374 00101$:
                                   8375 ;main.c:1031: exec_rider_pattern(mch);
      0020CF D5                    8376 	push	de
      0020D0 CDrF9r20              8377 	call	_exec_rider_pattern
      0020D3 E8 02                 8378 	add	sp, #2
                                   8379 ;main.c:1032: break;
      0020D5 C9                    8380 	ret
                                   8381 ;main.c:1033: case 1:
      0020D6                       8382 00102$:
                                   8383 ;main.c:1034: exec_drone_pattern(mch);
      0020D6 D5                    8384 	push	de
      0020D7 CDr5Fr21              8385 	call	_exec_drone_pattern
      0020DA E8 02                 8386 	add	sp, #2
                                   8387 ;main.c:1035: break;
      0020DC C9                    8388 	ret
                                   8389 ;main.c:1036: case 2:
      0020DD                       8390 00103$:
                                   8391 ;main.c:1037: exec_missile_pattern(mch);
      0020DD D5                    8392 	push	de
      0020DE CDrDDr21              8393 	call	_exec_missile_pattern
      0020E1 E8 02                 8394 	add	sp, #2
                                   8395 ;main.c:1038: break;
      0020E3 C9                    8396 	ret
                                   8397 ;main.c:1039: case 3:
      0020E4                       8398 00104$:
                                   8399 ;main.c:1040: exec_turret_pattern(mch);
      0020E4 D5                    8400 	push	de
      0020E5 CDrEEr21              8401 	call	_exec_turret_pattern
      0020E8 E8 02                 8402 	add	sp, #2
                                   8403 ;main.c:1041: break;
      0020EA C9                    8404 	ret
                                   8405 ;main.c:1042: case 4:
      0020EB                       8406 00105$:
                                   8407 ;main.c:1043: exec_bomber_pattern(mch);
      0020EB D5                    8408 	push	de
      0020EC CDr17r22              8409 	call	_exec_bomber_pattern
      0020EF E8 02                 8410 	add	sp, #2
                                   8411 ;main.c:1044: break;
      0020F1 C9                    8412 	ret
                                   8413 ;main.c:1045: case 5:
      0020F2                       8414 00106$:
                                   8415 ;main.c:1046: exec_mine_pattern(mch);
      0020F2 D5                    8416 	push	de
      0020F3 CDr82r22              8417 	call	_exec_mine_pattern
      0020F6 E8 02                 8418 	add	sp, #2
                                   8419 ;main.c:1048: }
                                   8420 ;main.c:1049: }
      0020F8 C9                    8421 	ret
                                   8422 ;main.c:1052: void exec_rider_pattern(Machine * mch) {
                                   8423 ;	---------------------------------
                                   8424 ; Function exec_rider_pattern
                                   8425 ; ---------------------------------
      0020F9                       8426 _exec_rider_pattern::
                                   8427 ;main.c:1053: if(mch->x > 130 && lockmvmnt != 2) {
      0020F9 C1                    8428 	pop	bc
      0020FA D1                    8429 	pop	de
      0020FB D5                    8430 	push	de
      0020FC C5                    8431 	push	bc
      0020FD 6B                    8432 	ld	l, e
      0020FE 62                    8433 	ld	h, d
      0020FF 23                    8434 	inc	hl
      002100 4E                    8435 	ld	c, (hl)
      002101 3E 82                 8436 	ld	a, #0x82
      002103 91                    8437 	sub	a, c
      002104 30 2D                 8438 	jr	NC, 00107$
      002106 FArC9r00              8439 	ld	a, (#_lockmvmnt)
      002109 D6 02                 8440 	sub	a, #0x02
      00210B 28 26                 8441 	jr	Z, 00107$
                                   8442 ;main.c:1054: move_enemy(mch, -1, pl->y > mch->y ? 1 : -1);
      00210D 21rC3r00              8443 	ld	hl, #_pl + 1
      002110 2B                    8444 	dec	hl
      002111 2A                    8445 	ld	a, (hl+)
      002112 4F                    8446 	ld	c, a
      002113 46                    8447 	ld	b, (hl)
      002114 03                    8448 	inc	bc
      002115 03                    8449 	inc	bc
      002116 0A                    8450 	ld	a, (bc)
      002117 4F                    8451 	ld	c, a
      002118 6B                    8452 	ld	l, e
      002119 62                    8453 	ld	h, d
      00211A 23                    8454 	inc	hl
      00211B 23                    8455 	inc	hl
      00211C 7E                    8456 	ld	a, (hl)
      00211D 91                    8457 	sub	a, c
      00211E 30 05                 8458 	jr	NC, 00112$
      002120 01 01 00              8459 	ld	bc, #0x0001
      002123 18 03                 8460 	jr	00113$
      002125                       8461 00112$:
      002125 01 FF FF              8462 	ld	bc, #0xffff
      002128                       8463 00113$:
      002128 61                    8464 	ld	h, c
      002129 2E FF                 8465 	ld	l, #0xff
      00212B E5                    8466 	push	hl
      00212C D5                    8467 	push	de
      00212D CDr3Fr0A              8468 	call	_move_enemy
      002130 E8 04                 8469 	add	sp, #4
      002132 C9                    8470 	ret
      002133                       8471 00107$:
                                   8472 ;main.c:1055: } else if(mch->cyccount != 100) {
      002133 21 08 00              8473 	ld	hl, #0x0008
      002136 19                    8474 	add	hl, de
      002137 4D                    8475 	ld	c, l
      002138 44                    8476 	ld	b, h
      002139 0A                    8477 	ld	a, (bc)
      00213A FE 64                 8478 	cp	a, #0x64
      00213C 28 15                 8479 	jr	Z, 00104$
                                   8480 ;main.c:1056: if(mch->cyccount == 50) {
      00213E D6 32                 8481 	sub	a, #0x32
      002140 20 0D                 8482 	jr	NZ, 00102$
                                   8483 ;main.c:1057: fire_bullet(mch, -2, 0);
      002142 C5                    8484 	push	bc
      002143 AF                    8485 	xor	a, a
      002144 67                    8486 	ld	h, a
      002145 2E FE                 8487 	ld	l, #0xfe
      002147 E5                    8488 	push	hl
      002148 D5                    8489 	push	de
      002149 CDr8Ar13              8490 	call	_fire_bullet
      00214C E8 04                 8491 	add	sp, #4
      00214E C1                    8492 	pop	bc
      00214F                       8493 00102$:
                                   8494 ;main.c:1059: mch->cyccount++;
      00214F 0A                    8495 	ld	a, (bc)
      002150 3C                    8496 	inc	a
      002151 02                    8497 	ld	(bc), a
      002152 C9                    8498 	ret
      002153                       8499 00104$:
                                   8500 ;main.c:1061: move_enemy(mch, -1, 0);
      002153 AF                    8501 	xor	a, a
      002154 67                    8502 	ld	h, a
      002155 2E FF                 8503 	ld	l, #0xff
      002157 E5                    8504 	push	hl
      002158 D5                    8505 	push	de
      002159 CDr3Fr0A              8506 	call	_move_enemy
      00215C E8 04                 8507 	add	sp, #4
                                   8508 ;main.c:1063: }
      00215E C9                    8509 	ret
                                   8510 ;main.c:1066: void exec_drone_pattern(Machine * mch) {
                                   8511 ;	---------------------------------
                                   8512 ; Function exec_drone_pattern
                                   8513 ; ---------------------------------
      00215F                       8514 _exec_drone_pattern::
      00215F E8 FC                 8515 	add	sp, #-4
                                   8516 ;main.c:1067: if(mch->x % 16 == 0) {
      002161 F8 06                 8517 	ldhl	sp,	#6
      002163 2A                    8518 	ld	a, (hl+)
      002164 5E                    8519 	ld	e, (hl)
      002165 F8 00                 8520 	ldhl	sp,	#0
      002167 22                    8521 	ld	(hl+), a
      002168 73                    8522 	ld	(hl), e
                                   8523 ;c
      002169 D1                    8524 	pop	de
      00216A D5                    8525 	push	de
      00216B 6B                    8526 	ld	l, e
      00216C 62                    8527 	ld	h, d
      00216D 23                    8528 	inc	hl
      00216E E5                    8529 	push	hl
      00216F 7D                    8530 	ld	a, l
      002170 F8 04                 8531 	ldhl	sp,	#4
      002172 77                    8532 	ld	(hl), a
      002173 E1                    8533 	pop	hl
      002174 7C                    8534 	ld	a, h
      002175 F8 03                 8535 	ldhl	sp,	#3
      002177 32                    8536 	ld	(hl-), a
      002178 2A                    8537 	ld	a, (hl+)
      002179 5F                    8538 	ld	e, a
      00217A 56                    8539 	ld	d, (hl)
      00217B 1A                    8540 	ld	a, (de)
      00217C E6 0F                 8541 	and	a, #0x0f
      00217E 4F                    8542 	ld	c, a
      00217F 06 00                 8543 	ld	b, #0x00
                                   8544 ;main.c:1068: mch->cyccount = mch->cyccount == 0 ? 1 : 0;
                                   8545 ;c
      002181 D1                    8546 	pop	de
      002182 D5                    8547 	push	de
      002183 21 08 00              8548 	ld	hl, #0x0008
      002186 19                    8549 	add	hl, de
      002187 5D                    8550 	ld	e, l
      002188 54                    8551 	ld	d, h
                                   8552 ;main.c:1067: if(mch->x % 16 == 0) {
      002189 78                    8553 	ld	a, b
      00218A B1                    8554 	or	a, c
      00218B 20 0E                 8555 	jr	NZ, 00102$
                                   8556 ;main.c:1068: mch->cyccount = mch->cyccount == 0 ? 1 : 0;
      00218D 1A                    8557 	ld	a, (de)
      00218E B7                    8558 	or	a, a
      00218F 20 05                 8559 	jr	NZ, 00108$
      002191 01 01 00              8560 	ld	bc, #0x0001
      002194 18 03                 8561 	jr	00109$
      002196                       8562 00108$:
      002196 01 00 00              8563 	ld	bc, #0x0000
      002199                       8564 00109$:
      002199 79                    8565 	ld	a, c
      00219A 12                    8566 	ld	(de), a
      00219B                       8567 00102$:
                                   8568 ;main.c:1070: move_enemy(mch, -1, mch->cyccount == 0 ? 1 : -1);
      00219B 1A                    8569 	ld	a, (de)
      00219C B7                    8570 	or	a, a
      00219D 20 05                 8571 	jr	NZ, 00110$
      00219F 01 01 00              8572 	ld	bc, #0x0001
      0021A2 18 03                 8573 	jr	00111$
      0021A4                       8574 00110$:
      0021A4 01 FF FF              8575 	ld	bc, #0xffff
      0021A7                       8576 00111$:
      0021A7 51                    8577 	ld	d, c
      0021A8 0E FF                 8578 	ld	c, #0xff
      0021AA 42                    8579 	ld	b, d
      0021AB E1                    8580 	pop	hl
      0021AC E5                    8581 	push	hl
      0021AD C5                    8582 	push	bc
      0021AE E5                    8583 	push	hl
      0021AF CDr3Fr0A              8584 	call	_move_enemy
      0021B2 E8 04                 8585 	add	sp, #4
                                   8586 ;main.c:1071: if(mch->x == 90 && pl->groundflg == 1) {
      0021B4 F8 02                 8587 	ldhl	sp,#2
      0021B6 2A                    8588 	ld	a, (hl+)
      0021B7 5F                    8589 	ld	e, a
      0021B8 56                    8590 	ld	d, (hl)
      0021B9 1A                    8591 	ld	a, (de)
      0021BA D6 5A                 8592 	sub	a, #0x5a
      0021BC 20 1C                 8593 	jr	NZ, 00106$
      0021BE 21rC3r00              8594 	ld	hl, #_pl + 1
      0021C1 2B                    8595 	dec	hl
      0021C2 2A                    8596 	ld	a, (hl+)
      0021C3 4F                    8597 	ld	c, a
      0021C4 46                    8598 	ld	b, (hl)
      0021C5 0A                    8599 	ld	a, (bc)
      0021C6 3D                    8600 	dec	a
      0021C7 20 11                 8601 	jr	NZ, 00106$
                                   8602 ;main.c:1072: fire_bullet(mch, 0, 1);
      0021C9 3E 01                 8603 	ld	a, #0x01
      0021CB F5                    8604 	push	af
      0021CC 33                    8605 	inc	sp
      0021CD AF                    8606 	xor	a, a
      0021CE F5                    8607 	push	af
      0021CF 33                    8608 	inc	sp
      0021D0 C1                    8609 	pop	bc
      0021D1 E1                    8610 	pop	hl
      0021D2 E5                    8611 	push	hl
      0021D3 C5                    8612 	push	bc
      0021D4 E5                    8613 	push	hl
      0021D5 CDr8Ar13              8614 	call	_fire_bullet
      0021D8 E8 04                 8615 	add	sp, #4
      0021DA                       8616 00106$:
                                   8617 ;main.c:1074: }
      0021DA E8 04                 8618 	add	sp, #4
      0021DC C9                    8619 	ret
                                   8620 ;main.c:1077: void exec_missile_pattern(Machine * mch) {
                                   8621 ;	---------------------------------
                                   8622 ; Function exec_missile_pattern
                                   8623 ; ---------------------------------
      0021DD                       8624 _exec_missile_pattern::
                                   8625 ;main.c:1078: move_enemy(mch, -2, 0);
      0021DD AF                    8626 	xor	a, a
      0021DE 57                    8627 	ld	d,a
      0021DF 1E FE                 8628 	ld	e,#0xfe
      0021E1 D5                    8629 	push	de
      0021E2 F8 04                 8630 	ldhl	sp,	#4
      0021E4 2A                    8631 	ld	a, (hl+)
      0021E5 66                    8632 	ld	h, (hl)
      0021E6 6F                    8633 	ld	l, a
      0021E7 E5                    8634 	push	hl
      0021E8 CDr3Fr0A              8635 	call	_move_enemy
      0021EB E8 04                 8636 	add	sp, #4
                                   8637 ;main.c:1079: }
      0021ED C9                    8638 	ret
                                   8639 ;main.c:1082: void exec_turret_pattern(Machine * mch) {
                                   8640 ;	---------------------------------
                                   8641 ; Function exec_turret_pattern
                                   8642 ; ---------------------------------
      0021EE                       8643 _exec_turret_pattern::
                                   8644 ;main.c:1083: move_enemy(mch, -2, 0);
      0021EE AF                    8645 	xor	a, a
      0021EF 57                    8646 	ld	d,a
      0021F0 1E FE                 8647 	ld	e,#0xfe
      0021F2 D5                    8648 	push	de
      0021F3 F8 04                 8649 	ldhl	sp,	#4
      0021F5 2A                    8650 	ld	a, (hl+)
      0021F6 66                    8651 	ld	h, (hl)
      0021F7 6F                    8652 	ld	l, a
      0021F8 E5                    8653 	push	hl
      0021F9 CDr3Fr0A              8654 	call	_move_enemy
      0021FC E8 04                 8655 	add	sp, #4
                                   8656 ;main.c:1084: if(mch->x == 87) {
      0021FE C1                    8657 	pop	bc
      0021FF D1                    8658 	pop	de
      002200 D5                    8659 	push	de
      002201 C5                    8660 	push	bc
      002202 4B                    8661 	ld	c, e
      002203 42                    8662 	ld	b, d
      002204 03                    8663 	inc	bc
      002205 0A                    8664 	ld	a, (bc)
      002206 D6 57                 8665 	sub	a, #0x57
      002208 C0                    8666 	ret	NZ
                                   8667 ;main.c:1085: fire_bigbullet(mch, 0, -1);
      002209 3E FF                 8668 	ld	a, #0xff
      00220B F5                    8669 	push	af
      00220C 33                    8670 	inc	sp
      00220D AF                    8671 	xor	a, a
      00220E F5                    8672 	push	af
      00220F 33                    8673 	inc	sp
      002210 D5                    8674 	push	de
      002211 CDr00r14              8675 	call	_fire_bigbullet
      002214 E8 04                 8676 	add	sp, #4
                                   8677 ;main.c:1087: }
      002216 C9                    8678 	ret
                                   8679 ;main.c:1090: void exec_bomber_pattern(Machine * mch) {
                                   8680 ;	---------------------------------
                                   8681 ; Function exec_bomber_pattern
                                   8682 ; ---------------------------------
      002217                       8683 _exec_bomber_pattern::
      002217 E8 FE                 8684 	add	sp, #-2
                                   8685 ;main.c:1091: move_enemy(mch, -1, 0);
      002219 AF                    8686 	xor	a, a
      00221A 57                    8687 	ld	d,a
      00221B 1E FF                 8688 	ld	e,#0xff
      00221D D5                    8689 	push	de
      00221E F8 06                 8690 	ldhl	sp,	#6
      002220 2A                    8691 	ld	a, (hl+)
      002221 66                    8692 	ld	h, (hl)
      002222 6F                    8693 	ld	l, a
      002223 E5                    8694 	push	hl
      002224 CDr3Fr0A              8695 	call	_move_enemy
      002227 E8 04                 8696 	add	sp, #4
                                   8697 ;main.c:1092: if(pl->x > mch->x && pl->x < mch->x + 8 && mch->cyccount == 0) {
      002229 21rC3r00              8698 	ld	hl, #_pl + 1
      00222C 2B                    8699 	dec	hl
      00222D 2A                    8700 	ld	a, (hl+)
      00222E 4F                    8701 	ld	c, a
      00222F 46                    8702 	ld	b, (hl)
      002230 03                    8703 	inc	bc
      002231 0A                    8704 	ld	a, (bc)
      002232 4F                    8705 	ld	c, a
      002233 F8 04                 8706 	ldhl	sp,	#4
      002235 2A                    8707 	ld	a, (hl+)
      002236 5E                    8708 	ld	e, (hl)
      002237 F8 00                 8709 	ldhl	sp,	#0
      002239 22                    8710 	ld	(hl+), a
      00223A 73                    8711 	ld	(hl), e
      00223B E1                    8712 	pop	hl
      00223C E5                    8713 	push	hl
      00223D 23                    8714 	inc	hl
      00223E 5E                    8715 	ld	e, (hl)
      00223F 7B                    8716 	ld	a, e
      002240 91                    8717 	sub	a, c
      002241 30 3C                 8718 	jr	NC, 00105$
      002243 16 00                 8719 	ld	d, #0x00
      002245 21 08 00              8720 	ld	hl, #0x0008
      002248 19                    8721 	add	hl, de
      002249 06 00                 8722 	ld	b, #0x00
      00224B 5C                    8723 	ld	e, h
      00224C 50                    8724 	ld	d, b
      00224D 79                    8725 	ld	a, c
      00224E 95                    8726 	sub	a, l
      00224F 78                    8727 	ld	a, b
      002250 9C                    8728 	sbc	a, h
      002251 CB 7B                 8729 	bit	7, e
      002253 28 07                 8730 	jr	Z, 00122$
      002255 CB 7A                 8731 	bit	7, d
      002257 20 08                 8732 	jr	NZ, 00123$
      002259 BF                    8733 	cp	a, a
      00225A 18 05                 8734 	jr	00123$
      00225C                       8735 00122$:
      00225C CB 7A                 8736 	bit	7, d
      00225E 28 01                 8737 	jr	Z, 00123$
      002260 37                    8738 	scf
      002261                       8739 00123$:
      002261 30 1C                 8740 	jr	NC, 00105$
                                   8741 ;c
      002263 D1                    8742 	pop	de
      002264 D5                    8743 	push	de
      002265 21 08 00              8744 	ld	hl, #0x0008
      002268 19                    8745 	add	hl, de
      002269 4D                    8746 	ld	c, l
      00226A 44                    8747 	ld	b, h
      00226B 0A                    8748 	ld	a, (bc)
      00226C B7                    8749 	or	a, a
      00226D 20 10                 8750 	jr	NZ, 00105$
                                   8751 ;main.c:1093: drop_bomb(mch);
      00226F C5                    8752 	push	bc
      002270 F8 02                 8753 	ldhl	sp,	#2
      002272 2A                    8754 	ld	a, (hl+)
      002273 66                    8755 	ld	h, (hl)
      002274 6F                    8756 	ld	l, a
      002275 E5                    8757 	push	hl
      002276 CDrECr14              8758 	call	_drop_bomb
      002279 E8 02                 8759 	add	sp, #2
      00227B C1                    8760 	pop	bc
                                   8761 ;main.c:1094: mch->cyccount = 1;  // Preventing from continuously dropping bombs
      00227C 3E 01                 8762 	ld	a, #0x01
      00227E 02                    8763 	ld	(bc), a
      00227F                       8764 00105$:
                                   8765 ;main.c:1096: }
      00227F E8 02                 8766 	add	sp, #2
      002281 C9                    8767 	ret
                                   8768 ;main.c:1099: void exec_mine_pattern(Machine * mch) {
                                   8769 ;	---------------------------------
                                   8770 ; Function exec_mine_pattern
                                   8771 ; ---------------------------------
      002282                       8772 _exec_mine_pattern::
                                   8773 ;main.c:1100: if(mch->y == 101 || mch->y == 102) {
      002282 C1                    8774 	pop	bc
      002283 D1                    8775 	pop	de
      002284 D5                    8776 	push	de
      002285 C5                    8777 	push	bc
      002286 6B                    8778 	ld	l, e
      002287 62                    8779 	ld	h, d
      002288 23                    8780 	inc	hl
      002289 23                    8781 	inc	hl
      00228A 4E                    8782 	ld	c, (hl)
                                   8783 ;main.c:1101: mch->cyccount = 0;
      00228B 21 08 00              8784 	ld	hl, #0x0008
      00228E 19                    8785 	add	hl, de
                                   8786 ;main.c:1100: if(mch->y == 101 || mch->y == 102) {
      00228F 79                    8787 	ld	a,c
      002290 FE 65                 8788 	cp	a,#0x65
      002292 28 04                 8789 	jr	Z, 00104$
      002294 D6 66                 8790 	sub	a, #0x66
      002296 20 04                 8791 	jr	NZ, 00105$
      002298                       8792 00104$:
                                   8793 ;main.c:1101: mch->cyccount = 0;
      002298 36 00                 8794 	ld	(hl), #0x00
      00229A 18 0B                 8795 	jr	00106$
      00229C                       8796 00105$:
                                   8797 ;main.c:1102: } else if(mch->y == 132 || mch->y == 133) {
      00229C 79                    8798 	ld	a,c
      00229D FE 84                 8799 	cp	a,#0x84
      00229F 28 04                 8800 	jr	Z, 00101$
      0022A1 D6 85                 8801 	sub	a, #0x85
      0022A3 20 02                 8802 	jr	NZ, 00106$
      0022A5                       8803 00101$:
                                   8804 ;main.c:1103: mch->cyccount = 1;
      0022A5 36 01                 8805 	ld	(hl), #0x01
      0022A7                       8806 00106$:
                                   8807 ;main.c:1105: move_enemy(mch, -2, mch->cyccount == 0 ? 1 : -1);
      0022A7 7E                    8808 	ld	a, (hl)
      0022A8 B7                    8809 	or	a, a
      0022A9 20 05                 8810 	jr	NZ, 00110$
      0022AB 01 01 00              8811 	ld	bc, #0x0001
      0022AE 18 03                 8812 	jr	00111$
      0022B0                       8813 00110$:
      0022B0 01 FF FF              8814 	ld	bc, #0xffff
      0022B3                       8815 00111$:
      0022B3 61                    8816 	ld	h, c
      0022B4 2E FE                 8817 	ld	l, #0xfe
      0022B6 E5                    8818 	push	hl
      0022B7 D5                    8819 	push	de
      0022B8 CDr3Fr0A              8820 	call	_move_enemy
      0022BB E8 04                 8821 	add	sp, #4
                                   8822 ;main.c:1106: }
      0022BD C9                    8823 	ret
                                   8824 ;main.c:1109: UBYTE cooldown_enemy(Machine * mch, UINT8 period) { // Coolwon period between actions. Used in loops
                                   8825 ;	---------------------------------
                                   8826 ; Function cooldown_enemy
                                   8827 ; ---------------------------------
      0022BE                       8828 _cooldown_enemy::
                                   8829 ;main.c:1110: if(mch->cyccount != period) {
      0022BE C1                    8830 	pop	bc
      0022BF D1                    8831 	pop	de
      0022C0 D5                    8832 	push	de
      0022C1 C5                    8833 	push	bc
      0022C2 21 08 00              8834 	ld	hl, #0x0008
      0022C5 19                    8835 	add	hl, de
      0022C6 4D                    8836 	ld	c, l
      0022C7 44                    8837 	ld	b, h
      0022C8 0A                    8838 	ld	a, (bc)
      0022C9 5F                    8839 	ld	e, a
      0022CA F8 04                 8840 	ldhl	sp,	#4
      0022CC 7E                    8841 	ld	a, (hl)
      0022CD 93                    8842 	sub	a, e
      0022CE 28 06                 8843 	jr	Z, 00102$
                                   8844 ;main.c:1111: mch->cyccount++;
      0022D0 7B                    8845 	ld	a, e
      0022D1 3C                    8846 	inc	a
      0022D2 02                    8847 	ld	(bc), a
                                   8848 ;main.c:1112: return 0;
      0022D3 1E 00                 8849 	ld	e, #0x00
      0022D5 C9                    8850 	ret
      0022D6                       8851 00102$:
                                   8852 ;main.c:1114: mch->cyccount = 0;
      0022D6 AF                    8853 	xor	a, a
      0022D7 02                    8854 	ld	(bc), a
                                   8855 ;main.c:1115: return 1; // End of cooldown
      0022D8 1E 01                 8856 	ld	e, #0x01
                                   8857 ;main.c:1116: }
      0022DA C9                    8858 	ret
                                   8859 ;main.c:1121: void hud_init() {
                                   8860 ;	---------------------------------
                                   8861 ; Function hud_init
                                   8862 ; ---------------------------------
      0022DB                       8863 _hud_init::
                                   8864 ;main.c:1123: set_win_data(0, 20, hudtiles);
      0022DB 21r00r00              8865 	ld	hl, #_hudtiles
      0022DE E5                    8866 	push	hl
      0022DF 3E 14                 8867 	ld	a, #0x14
      0022E1 F5                    8868 	push	af
      0022E2 33                    8869 	inc	sp
      0022E3 AF                    8870 	xor	a, a
      0022E4 F5                    8871 	push	af
      0022E5 33                    8872 	inc	sp
      0022E6 CDr00r00              8873 	call	_set_win_data
      0022E9 E8 04                 8874 	add	sp, #4
                                   8875 ;main.c:1124: set_win_tiles(0, 0, 18, 1, hudmap);
      0022EB 21r00r00              8876 	ld	hl, #_hudmap
      0022EE E5                    8877 	push	hl
      0022EF 11 12 01              8878 	ld	de, #0x0112
      0022F2 D5                    8879 	push	de
      0022F3 AF                    8880 	xor	a, a
      0022F4 F5                    8881 	push	af
      0022F5 33                    8882 	inc	sp
      0022F6 AF                    8883 	xor	a, a
      0022F7 F5                    8884 	push	af
      0022F8 33                    8885 	inc	sp
      0022F9 CDr00r00              8886 	call	_set_win_tiles
      0022FC E8 06                 8887 	add	sp, #6
                                   8888 ;F:/Game_Boy_Dev_Tools/gbdk/include/gb/gb.h:1015: WX_REG=x, WY_REG=y;
      0022FE 3E 0F                 8889 	ld	a, #0x0f
      002300 E0r00                 8890 	ldh	(_WX_REG+0),a
      002302 3E 86                 8891 	ld	a, #0x86
      002304 E0r00                 8892 	ldh	(_WY_REG+0),a
                                   8893 ;main.c:1126: SHOW_WIN;
      002306 F0r00                 8894 	ldh	a, (_LCDC_REG+0)
      002308 F6 20                 8895 	or	a, #0x20
      00230A E0r00                 8896 	ldh	(_LCDC_REG+0),a
                                   8897 ;main.c:1127: }
      00230C C9                    8898 	ret
                                   8899 ;main.c:1130: void hud_upd_shield(INT8 hpbef, INT8 hpaft) {
                                   8900 ;	---------------------------------
                                   8901 ; Function hud_upd_shield
                                   8902 ; ---------------------------------
      00230D                       8903 _hud_upd_shield::
                                   8904 ;main.c:1132: if(hpbef > hpaft) { // Has taken damage
      00230D F8 02                 8905 	ldhl	sp,	#2
      00230F 2A                    8906 	ld	a, (hl+)
      002310 5F                    8907 	ld	e, a
      002311 56                    8908 	ld	d, (hl)
      002312 3A                    8909 	ld	a, (hl-)
      002313 96                    8910 	sub	a, (hl)
      002314 CB 7B                 8911 	bit	7, e
      002316 28 07                 8912 	jr	Z, 00148$
      002318 CB 7A                 8913 	bit	7, d
      00231A 20 08                 8914 	jr	NZ, 00149$
      00231C BF                    8915 	cp	a, a
      00231D 18 05                 8916 	jr	00149$
      00231F                       8917 00148$:
      00231F CB 7A                 8918 	bit	7, d
      002321 28 01                 8919 	jr	Z, 00149$
      002323 37                    8920 	scf
      002324                       8921 00149$:
      002324 30 2B                 8922 	jr	NC, 00104$
                                   8923 ;main.c:1133: hptiletresh = hpaft < 0 ? 2 : hpaft + 2;  // HP bar lower tile boundary
      002326 F8 03                 8924 	ldhl	sp,	#3
      002328 CB 7E                 8925 	bit	7, (hl)
      00232A 28 05                 8926 	jr	Z, 00114$
      00232C 01 02 00              8927 	ld	bc, #0x0002
      00232F 18 07                 8928 	jr	00115$
      002331                       8929 00114$:
      002331 F8 03                 8930 	ldhl	sp,	#3
      002333 7E                    8931 	ld	a, (hl)
      002334 3C                    8932 	inc	a
      002335 3C                    8933 	inc	a
      002336 4F                    8934 	ld	c, a
      002337 17                    8935 	rla
      002338                       8936 00115$:
                                   8937 ;main.c:1134: for(UINT8 hpcnt = hpbef + 2; hpcnt > hptiletresh; hpcnt--) {
      002338 F8 02                 8938 	ldhl	sp,	#2
      00233A 46                    8939 	ld	b, (hl)
      00233B 04                    8940 	inc	b
      00233C 04                    8941 	inc	b
      00233D                       8942 00107$:
      00233D 79                    8943 	ld	a, c
      00233E 90                    8944 	sub	a, b
      00233F D0                    8945 	ret	NC
                                   8946 ;main.c:1135: set_win_tile_xy(hpcnt, 0, 0x0F);
      002340 3E 0F                 8947 	ld	a, #0x0f
      002342 F5                    8948 	push	af
      002343 33                    8949 	inc	sp
      002344 AF                    8950 	xor	a, a
      002345 F5                    8951 	push	af
      002346 33                    8952 	inc	sp
      002347 C5                    8953 	push	bc
      002348 33                    8954 	inc	sp
      002349 CDr00r00              8955 	call	_set_win_tile_xy
      00234C E8 03                 8956 	add	sp, #3
                                   8957 ;main.c:1134: for(UINT8 hpcnt = hpbef + 2; hpcnt > hptiletresh; hpcnt--) {
      00234E 05                    8958 	dec	b
      00234F 18 EC                 8959 	jr	00107$
      002351                       8960 00104$:
                                   8961 ;main.c:1138: hptiletresh = hpaft + 3;
      002351 F8 03                 8962 	ldhl	sp,	#3
      002353 4E                    8963 	ld	c, (hl)
      002354 0C                    8964 	inc	c
      002355 0C                    8965 	inc	c
      002356 0C                    8966 	inc	c
                                   8967 ;main.c:1139: for(UINT8 hpcnt = hpbef + 3; hpcnt < hptiletresh; hpcnt++) {
      002357 2B                    8968 	dec	hl
      002358 46                    8969 	ld	b, (hl)
      002359 04                    8970 	inc	b
      00235A 04                    8971 	inc	b
      00235B 04                    8972 	inc	b
      00235C                       8973 00110$:
      00235C 78                    8974 	ld	a, b
      00235D 91                    8975 	sub	a, c
      00235E D0                    8976 	ret	NC
                                   8977 ;main.c:1140: set_win_tile_xy(hpcnt, 0, 0x0E);
      00235F 3E 0E                 8978 	ld	a, #0x0e
      002361 F5                    8979 	push	af
      002362 33                    8980 	inc	sp
      002363 AF                    8981 	xor	a, a
      002364 F5                    8982 	push	af
      002365 33                    8983 	inc	sp
      002366 C5                    8984 	push	bc
      002367 33                    8985 	inc	sp
      002368 CDr00r00              8986 	call	_set_win_tile_xy
      00236B E8 03                 8987 	add	sp, #3
                                   8988 ;main.c:1139: for(UINT8 hpcnt = hpbef + 3; hpcnt < hptiletresh; hpcnt++) {
      00236D 04                    8989 	inc	b
                                   8990 ;main.c:1143: }
      00236E 18 EC                 8991 	jr	00110$
                                   8992 ;main.c:1146: inline void hud_upd_lives() {
                                   8993 ;	---------------------------------
                                   8994 ; Function hud_upd_lives
                                   8995 ; ---------------------------------
      002370                       8996 _hud_upd_lives::
                                   8997 ;main.c:1147: set_win_tile_xy(17, 0, pllives + 1);  // Tile offset 1
      002370 FArC8r00              8998 	ld	a, (#_pllives)
      002373 3C                    8999 	inc	a
      002374 F5                    9000 	push	af
      002375 33                    9001 	inc	sp
      002376 AF                    9002 	xor	a, a
      002377 57                    9003 	ld	d,a
      002378 1E 11                 9004 	ld	e,#0x11
      00237A D5                    9005 	push	de
      00237B CDr00r00              9006 	call	_set_win_tile_xy
      00237E E8 03                 9007 	add	sp, #3
                                   9008 ;main.c:1148: }
      002380 C9                    9009 	ret
                                   9010 ;main.c:1151: void hud_draw_pause() {
                                   9011 ;	---------------------------------
                                   9012 ; Function hud_draw_pause
                                   9013 ; ---------------------------------
      002381                       9014 _hud_draw_pause::
                                   9015 ;main.c:1152: set_win_tile_xy(8, 0, 0x08);
      002381 3E 08                 9016 	ld	a, #0x08
      002383 F5                    9017 	push	af
      002384 33                    9018 	inc	sp
      002385 AF                    9019 	xor	a, a
      002386 57                    9020 	ld	d,a
      002387 1E 08                 9021 	ld	e,#0x08
      002389 D5                    9022 	push	de
      00238A CDr00r00              9023 	call	_set_win_tile_xy
      00238D E8 03                 9024 	add	sp, #3
                                   9025 ;main.c:1153: set_win_tile_xy(9, 0, 0x05);
      00238F 3E 05                 9026 	ld	a, #0x05
      002391 F5                    9027 	push	af
      002392 33                    9028 	inc	sp
      002393 AF                    9029 	xor	a, a
      002394 57                    9030 	ld	d,a
      002395 1E 09                 9031 	ld	e,#0x09
      002397 D5                    9032 	push	de
      002398 CDr00r00              9033 	call	_set_win_tile_xy
      00239B E8 03                 9034 	add	sp, #3
                                   9035 ;main.c:1154: set_win_tile_xy(10, 0, 0x0A);
      00239D 3E 0A                 9036 	ld	a, #0x0a
      00239F F5                    9037 	push	af
      0023A0 33                    9038 	inc	sp
      0023A1 AF                    9039 	xor	a, a
      0023A2 57                    9040 	ld	d,a
      0023A3 1E 0A                 9041 	ld	e,#0x0a
      0023A5 D5                    9042 	push	de
      0023A6 CDr00r00              9043 	call	_set_win_tile_xy
      0023A9 E8 03                 9044 	add	sp, #3
                                   9045 ;main.c:1155: set_win_tile_xy(11, 0, 0x09);
      0023AB 3E 09                 9046 	ld	a, #0x09
      0023AD F5                    9047 	push	af
      0023AE 33                    9048 	inc	sp
      0023AF AF                    9049 	xor	a, a
      0023B0 57                    9050 	ld	d,a
      0023B1 1E 0B                 9051 	ld	e,#0x0b
      0023B3 D5                    9052 	push	de
      0023B4 CDr00r00              9053 	call	_set_win_tile_xy
      0023B7 E8 03                 9054 	add	sp, #3
                                   9055 ;main.c:1156: set_win_tile_xy(12, 0, 0x06);
      0023B9 3E 06                 9056 	ld	a, #0x06
      0023BB F5                    9057 	push	af
      0023BC 33                    9058 	inc	sp
      0023BD AF                    9059 	xor	a, a
      0023BE 57                    9060 	ld	d,a
      0023BF 1E 0C                 9061 	ld	e,#0x0c
      0023C1 D5                    9062 	push	de
      0023C2 CDr00r00              9063 	call	_set_win_tile_xy
      0023C5 E8 03                 9064 	add	sp, #3
                                   9065 ;main.c:1157: }
      0023C7 C9                    9066 	ret
                                   9067 ;main.c:1160: void hud_clear_pause() {
                                   9068 ;	---------------------------------
                                   9069 ; Function hud_clear_pause
                                   9070 ; ---------------------------------
      0023C8                       9071 _hud_clear_pause::
                                   9072 ;main.c:1161: set_win_tile_xy(8, 0, 0x00);
      0023C8 AF                    9073 	xor	a, a
      0023C9 F5                    9074 	push	af
      0023CA 33                    9075 	inc	sp
      0023CB AF                    9076 	xor	a, a
      0023CC 57                    9077 	ld	d,a
      0023CD 1E 08                 9078 	ld	e,#0x08
      0023CF D5                    9079 	push	de
      0023D0 CDr00r00              9080 	call	_set_win_tile_xy
      0023D3 E8 03                 9081 	add	sp, #3
                                   9082 ;main.c:1162: set_win_tile_xy(9, 0, 0x0C);
      0023D5 3E 0C                 9083 	ld	a, #0x0c
      0023D7 F5                    9084 	push	af
      0023D8 33                    9085 	inc	sp
      0023D9 AF                    9086 	xor	a, a
      0023DA 57                    9087 	ld	d,a
      0023DB 1E 09                 9088 	ld	e,#0x09
      0023DD D5                    9089 	push	de
      0023DE CDr00r00              9090 	call	_set_win_tile_xy
      0023E1 E8 03                 9091 	add	sp, #3
                                   9092 ;main.c:1163: set_win_tile_xy(11, 0, 0x0D);
      0023E3 3E 0D                 9093 	ld	a, #0x0d
      0023E5 F5                    9094 	push	af
      0023E6 33                    9095 	inc	sp
      0023E7 AF                    9096 	xor	a, a
      0023E8 57                    9097 	ld	d,a
      0023E9 1E 0B                 9098 	ld	e,#0x0b
      0023EB D5                    9099 	push	de
      0023EC CDr00r00              9100 	call	_set_win_tile_xy
      0023EF E8 03                 9101 	add	sp, #3
                                   9102 ;main.c:1164: set_win_tile_xy(12, 0, 0x00);
      0023F1 AF                    9103 	xor	a, a
      0023F2 F5                    9104 	push	af
      0023F3 33                    9105 	inc	sp
      0023F4 AF                    9106 	xor	a, a
      0023F5 57                    9107 	ld	d,a
      0023F6 1E 0C                 9108 	ld	e,#0x0c
      0023F8 D5                    9109 	push	de
      0023F9 CDr00r00              9110 	call	_set_win_tile_xy
      0023FC E8 03                 9111 	add	sp, #3
                                   9112 ;main.c:1165: hud_draw_gun();
      0023FE CDr08r24              9113 	call	_hud_draw_gun
                                   9114 ;main.c:1166: SHOW_SPRITES;
      002401 F0r00                 9115 	ldh	a, (_LCDC_REG+0)
      002403 F6 02                 9116 	or	a, #0x02
      002405 E0r00                 9117 	ldh	(_LCDC_REG+0),a
                                   9118 ;main.c:1167: }
      002407 C9                    9119 	ret
                                   9120 ;main.c:1169: inline void hud_draw_gun() {
                                   9121 ;	---------------------------------
                                   9122 ; Function hud_draw_gun
                                   9123 ; ---------------------------------
      002408                       9124 _hud_draw_gun::
                                   9125 ;main.c:1170: set_win_tile_xy(10, 0, 17 + plgun); // Tile offset 17
      002408 FArDBr00              9126 	ld	a, (#_plgun)
      00240B C6 11                 9127 	add	a, #0x11
      00240D F5                    9128 	push	af
      00240E 33                    9129 	inc	sp
      00240F AF                    9130 	xor	a, a
      002410 57                    9131 	ld	d,a
      002411 1E 0A                 9132 	ld	e,#0x0a
      002413 D5                    9133 	push	de
      002414 CDr00r00              9134 	call	_set_win_tile_xy
      002417 E8 03                 9135 	add	sp, #3
                                   9136 ;main.c:1171: }
      002419 C9                    9137 	ret
                                   9138 ;main.c:1243: void stage_loop() {
                                   9139 ;	---------------------------------
                                   9140 ; Function stage_loop
                                   9141 ; ---------------------------------
      00241A                       9142 _stage_loop::
                                   9143 ;main.c:1244: while(1) {
      00241A                       9144 00107$:
                                   9145 ;main.c:1246: if(stageclearflg || pllives == 0) {
      00241A FAr02r00              9146 	ld	a, (#_stageclearflg)
      00241D B7                    9147 	or	a, a
      00241E 20 06                 9148 	jr	NZ, 00103$
      002420 FArC8r00              9149 	ld	a, (#_pllives)
      002423 B7                    9150 	or	a, a
      002424 20 0E                 9151 	jr	NZ, 00104$
      002426                       9152 00103$:
                                   9153 ;main.c:1247: if(pl->explcount == 0) {    // Waiting for explosion to finish
      002426 21rC3r00              9154 	ld	hl, #_pl + 1
      002429 2B                    9155 	dec	hl
      00242A 2A                    9156 	ld	a, (hl+)
      00242B 4F                    9157 	ld	c, a
      00242C 46                    9158 	ld	b, (hl)
      00242D 21 07 00              9159 	ld	hl, #0x0007
      002430 09                    9160 	add	hl, bc
      002431 7E                    9161 	ld	a, (hl)
      002432 B7                    9162 	or	a, a
      002433 C8                    9163 	ret	Z
                                   9164 ;main.c:1248: break;  // Out of game loop
      002434                       9165 00104$:
                                   9166 ;main.c:1252: build_stage();
      002434 CDrB9r0A              9167 	call	_build_stage
                                   9168 ;main.c:1253: incr_bkg_x_coords(4);
      002437 3E 04                 9169 	ld	a, #0x04
      002439 F5                    9170 	push	af
      00243A 33                    9171 	inc	sp
      00243B CDr7Br0A              9172 	call	_incr_bkg_x_coords
      00243E 33                    9173 	inc	sp
                                   9174 ;main.c:1254: manage_hole_props();
      00243F CDr79r0C              9175 	call	_manage_hole_props
                                   9176 ;main.c:1255: manage_projectiles();
      002442 CDrA5r0C              9177 	call	_manage_projectiles
                                   9178 ;main.c:1256: manage_machines();
      002445 CDr7Cr0D              9179 	call	_manage_machines
                                   9180 ;main.c:1257: manage_sound_chnls();
      002448 CDr1Fr0E              9181 	call	_manage_sound_chnls
                                   9182 ;main.c:1258: manage_player();
      00244B CDr45r0E              9183 	call	_manage_player
                                   9184 ;main.c:1259: wait_vbl_done();
      00244E CDr00r00              9185 	call	_wait_vbl_done
                                   9186 ;main.c:1261: }
      002451 18 C7                 9187 	jr	00107$
                                   9188 ;main.c:1264: void scorpboss_loop() {
                                   9189 ;	---------------------------------
                                   9190 ; Function scorpboss_loop
                                   9191 ; ---------------------------------
      002453                       9192 _scorpboss_loop::
      002453 E8 F8                 9193 	add	sp, #-8
                                   9194 ;main.c:1265: UINT8 pattrn = 0, firedbull = 0, explidx = 0, gunidx;
      002455 AF                    9195 	xor	a, a
      002456 F8 06                 9196 	ldhl	sp,	#6
      002458 77                    9197 	ld	(hl), a
      002459 AF                    9198 	xor	a, a
      00245A 23                    9199 	inc	hl
      00245B 77                    9200 	ld	(hl), a
                                   9201 ;main.c:1266: while(1) {
      00245C                       9202 00163$:
                                   9203 ;main.c:1268: if(pllives == 0 && pl->explcount == 0) {
      00245C 21rC2r00              9204 	ld	hl, #_pl
      00245F 2A                    9205 	ld	a, (hl+)
      002460 5E                    9206 	ld	e, (hl)
      002461 F8 02                 9207 	ldhl	sp,	#2
      002463 22                    9208 	ld	(hl+), a
                                   9209 ;c
      002464 7B                    9210 	ld	a, e
      002465 32                    9211 	ld	(hl-), a
      002466 2A                    9212 	ld	a, (hl+)
      002467 5F                    9213 	ld	e, a
      002468 56                    9214 	ld	d, (hl)
      002469 21 07 00              9215 	ld	hl, #0x0007
      00246C 19                    9216 	add	hl, de
      00246D E5                    9217 	push	hl
      00246E 7D                    9218 	ld	a, l
      00246F F8 06                 9219 	ldhl	sp,	#6
      002471 77                    9220 	ld	(hl), a
      002472 E1                    9221 	pop	hl
      002473 7C                    9222 	ld	a, h
      002474 F8 05                 9223 	ldhl	sp,	#5
      002476 77                    9224 	ld	(hl), a
      002477 FArC8r00              9225 	ld	a, (#_pllives)
      00247A B7                    9226 	or	a, a
      00247B 20 0A                 9227 	jr	NZ, 00102$
      00247D F8 04                 9228 	ldhl	sp,#4
      00247F 2A                    9229 	ld	a, (hl+)
      002480 5F                    9230 	ld	e, a
      002481 56                    9231 	ld	d, (hl)
      002482 1A                    9232 	ld	a, (de)
      002483 B7                    9233 	or	a, a
      002484 CAr78r27              9234 	jp	Z, 00170$
                                   9235 ;main.c:1269: break;  // Game over
      002487                       9236 00102$:
                                   9237 ;main.c:1272: if(pl->x + pl->width > 98 && pl->y + pl->height > 95 && pl->explcount == 0 && bossclearflg == 0) {
      002487 C1                    9238 	pop	bc
      002488 E1                    9239 	pop	hl
      002489 E5                    9240 	push	hl
      00248A C5                    9241 	push	bc
      00248B 23                    9242 	inc	hl
      00248C 4E                    9243 	ld	c, (hl)
      00248D 06 00                 9244 	ld	b, #0x00
                                   9245 ;c
      00248F F8 02                 9246 	ldhl	sp,#2
      002491 2A                    9247 	ld	a, (hl+)
      002492 5F                    9248 	ld	e, a
      002493 56                    9249 	ld	d, (hl)
      002494 21 05 00              9250 	ld	hl, #0x0005
      002497 19                    9251 	add	hl, de
      002498 5D                    9252 	ld	e, l
      002499 54                    9253 	ld	d, h
      00249A 1A                    9254 	ld	a, (de)
      00249B 6F                    9255 	ld	l, a
      00249C 26 00                 9256 	ld	h, #0x00
      00249E 09                    9257 	add	hl, bc
      00249F 5C                    9258 	ld	e, h
      0024A0 16 00                 9259 	ld	d, #0x00
      0024A2 3E 62                 9260 	ld	a, #0x62
      0024A4 BD                    9261 	cp	a, l
      0024A5 3E 00                 9262 	ld	a, #0x00
      0024A7 9C                    9263 	sbc	a, h
      0024A8 CB 7B                 9264 	bit	7, e
      0024AA 28 07                 9265 	jr	Z, 00339$
      0024AC CB 7A                 9266 	bit	7, d
      0024AE 20 08                 9267 	jr	NZ, 00340$
      0024B0 BF                    9268 	cp	a, a
      0024B1 18 05                 9269 	jr	00340$
      0024B3                       9270 00339$:
      0024B3 CB 7A                 9271 	bit	7, d
      0024B5 28 01                 9272 	jr	Z, 00340$
      0024B7 37                    9273 	scf
      0024B8                       9274 00340$:
      0024B8 30 5D                 9275 	jr	NC, 00105$
      0024BA C1                    9276 	pop	bc
      0024BB E1                    9277 	pop	hl
      0024BC E5                    9278 	push	hl
      0024BD C5                    9279 	push	bc
      0024BE 23                    9280 	inc	hl
      0024BF 23                    9281 	inc	hl
      0024C0 4E                    9282 	ld	c, (hl)
      0024C1 06 00                 9283 	ld	b, #0x00
                                   9284 ;c
      0024C3 F8 02                 9285 	ldhl	sp,#2
      0024C5 2A                    9286 	ld	a, (hl+)
      0024C6 5F                    9287 	ld	e, a
      0024C7 56                    9288 	ld	d, (hl)
      0024C8 21 06 00              9289 	ld	hl, #0x0006
      0024CB 19                    9290 	add	hl, de
      0024CC 5D                    9291 	ld	e, l
      0024CD 54                    9292 	ld	d, h
      0024CE 1A                    9293 	ld	a, (de)
      0024CF 26 00                 9294 	ld	h, #0x00
      0024D1 6F                    9295 	ld	l, a
      0024D2 09                    9296 	add	hl, bc
      0024D3 5C                    9297 	ld	e, h
      0024D4 16 00                 9298 	ld	d, #0x00
      0024D6 3E 5F                 9299 	ld	a, #0x5f
      0024D8 BD                    9300 	cp	a, l
      0024D9 3E 00                 9301 	ld	a, #0x00
      0024DB 9C                    9302 	sbc	a, h
      0024DC CB 7B                 9303 	bit	7, e
      0024DE 28 07                 9304 	jr	Z, 00341$
      0024E0 CB 7A                 9305 	bit	7, d
      0024E2 20 08                 9306 	jr	NZ, 00342$
      0024E4 BF                    9307 	cp	a, a
      0024E5 18 05                 9308 	jr	00342$
      0024E7                       9309 00341$:
      0024E7 CB 7A                 9310 	bit	7, d
      0024E9 28 01                 9311 	jr	Z, 00342$
      0024EB 37                    9312 	scf
      0024EC                       9313 00342$:
      0024EC 30 29                 9314 	jr	NC, 00105$
      0024EE F8 04                 9315 	ldhl	sp,#4
      0024F0 2A                    9316 	ld	a, (hl+)
      0024F1 5F                    9317 	ld	e, a
      0024F2 56                    9318 	ld	d, (hl)
      0024F3 1A                    9319 	ld	a, (de)
      0024F4 B7                    9320 	or	a, a
      0024F5 20 20                 9321 	jr	NZ, 00105$
      0024F7 FAr03r00              9322 	ld	a, (#_bossclearflg)
      0024FA B7                    9323 	or	a, a
      0024FB 20 1A                 9324 	jr	NZ, 00105$
                                   9325 ;main.c:1273: take_damage(pl, pl->shield);    // Collision with boss bkg
                                   9326 ;c
      0024FD F8 02                 9327 	ldhl	sp,#2
      0024FF 2A                    9328 	ld	a, (hl+)
      002500 5F                    9329 	ld	e, a
      002501 56                    9330 	ld	d, (hl)
      002502 21 0B 00              9331 	ld	hl, #0x000b
      002505 19                    9332 	add	hl, de
      002506 4D                    9333 	ld	c, l
      002507 44                    9334 	ld	b, h
      002508 0A                    9335 	ld	a, (bc)
      002509 F5                    9336 	push	af
      00250A 33                    9337 	inc	sp
      00250B 21rC2r00              9338 	ld	hl, #_pl
      00250E 2A                    9339 	ld	a, (hl+)
      00250F 66                    9340 	ld	h, (hl)
      002510 6F                    9341 	ld	l, a
      002511 E5                    9342 	push	hl
      002512 CDrC1r1A              9343 	call	_take_damage
      002515 E8 03                 9344 	add	sp, #3
      002517                       9345 00105$:
                                   9346 ;main.c:1276: if(pattrn == 0) {  // Initial time for the player to adjust before boss attacks
      002517 F8 06                 9347 	ldhl	sp,	#6
      002519 7E                    9348 	ld	a, (hl)
      00251A B7                    9349 	or	a, a
      00251B 20 15                 9350 	jr	NZ, 00112$
                                   9351 ;main.c:1277: if(cooldown_enemy(machines + 1, 45)) {
      00251D 3E 2D                 9352 	ld	a, #0x2d
      00251F F5                    9353 	push	af
      002520 33                    9354 	inc	sp
      002521 21r6Dr00              9355 	ld	hl, #(_machines + 0x0011)
      002524 E5                    9356 	push	hl
      002525 CDrBEr22              9357 	call	_cooldown_enemy
      002528 E8 03                 9358 	add	sp, #3
      00252A 7B                    9359 	ld	a, e
      00252B B7                    9360 	or	a, a
      00252C 28 04                 9361 	jr	Z, 00112$
                                   9362 ;main.c:1278: pattrn = 1;
      00252E F8 06                 9363 	ldhl	sp,	#6
      002530 36 01                 9364 	ld	(hl), #0x01
      002532                       9365 00112$:
                                   9366 ;main.c:1282: gunidx = pattrn == 1 ? 2 : 3; // Set gun to be fired depending on pattern num
      002532 F8 06                 9367 	ldhl	sp,	#6
      002534 7E                    9368 	ld	a, (hl)
      002535 3D                    9369 	dec	a
      002536 3E 01                 9370 	ld	a, #0x01
      002538 28 01                 9371 	jr	Z, 00344$
      00253A AF                    9372 	xor	a, a
      00253B                       9373 00344$:
      00253B F8 03                 9374 	ldhl	sp,	#3
      00253D 77                    9375 	ld	(hl), a
      00253E B7                    9376 	or	a, a
      00253F 28 08                 9377 	jr	Z, 00172$
      002541 23                    9378 	inc	hl
      002542 36 02                 9379 	ld	(hl), #0x02
      002544 AF                    9380 	xor	a, a
      002545 23                    9381 	inc	hl
      002546 77                    9382 	ld	(hl), a
      002547 18 07                 9383 	jr	00173$
      002549                       9384 00172$:
      002549 F8 04                 9385 	ldhl	sp,	#4
      00254B 36 03                 9386 	ld	(hl), #0x03
      00254D AF                    9387 	xor	a, a
      00254E 23                    9388 	inc	hl
      00254F 77                    9389 	ld	(hl), a
      002550                       9390 00173$:
      002550 F8 04                 9391 	ldhl	sp,	#4
      002552 2A                    9392 	ld	a, (hl+)
                                   9393 ;main.c:1283: if(pattrn == 1 || pattrn == 2) {  // Fire top or bottom gun
      002553 32                    9394 	ld	(hl-), a
      002554 2B                    9395 	dec	hl
      002555 7E                    9396 	ld	a, (hl)
      002556 B7                    9397 	or	a, a
      002557 20 08                 9398 	jr	NZ, 00143$
      002559 F8 06                 9399 	ldhl	sp,	#6
      00255B 7E                    9400 	ld	a, (hl)
      00255C D6 02                 9401 	sub	a, #0x02
      00255E C2r0Er26              9402 	jp	NZ,00144$
      002561                       9403 00143$:
                                   9404 ;main.c:1284: if(is_alive(machines + gunidx) && firedbull != 3) {
      002561 F8 05                 9405 	ldhl	sp,	#5
      002563 4E                    9406 	ld	c, (hl)
      002564 06 00                 9407 	ld	b, #0x00
      002566 69                    9408 	ld	l, c
      002567 60                    9409 	ld	h, b
      002568 29                    9410 	add	hl, hl
      002569 29                    9411 	add	hl, hl
      00256A 29                    9412 	add	hl, hl
      00256B 29                    9413 	add	hl, hl
      00256C 09                    9414 	add	hl, bc
      00256D E5                    9415 	push	hl
      00256E 7D                    9416 	ld	a, l
      00256F F8 06                 9417 	ldhl	sp,	#6
      002571 77                    9418 	ld	(hl), a
      002572 E1                    9419 	pop	hl
      002573 7C                    9420 	ld	a, h
      002574 F8 05                 9421 	ldhl	sp,	#5
                                   9422 ;c
      002576 32                    9423 	ld	(hl-), a
      002577 2A                    9424 	ld	a, (hl+)
      002578 5F                    9425 	ld	e, a
      002579 56                    9426 	ld	d, (hl)
      00257A 21r5Cr00              9427 	ld	hl, #_machines
      00257D 19                    9428 	add	hl, de
      00257E 33                    9429 	inc	sp
      00257F 33                    9430 	inc	sp
      002580 E5                    9431 	push	hl
      002581 F8 00                 9432 	ldhl	sp,	#0
      002583 2A                    9433 	ld	a, (hl+)
      002584 5E                    9434 	ld	e, (hl)
      002585 23                    9435 	inc	hl
      002586 22                    9436 	ld	(hl+), a
                                   9437 ;main.c:831: return mch->shield > 0;
                                   9438 ;c
      002587 7B                    9439 	ld	a, e
      002588 32                    9440 	ld	(hl-), a
      002589 2A                    9441 	ld	a, (hl+)
      00258A 5F                    9442 	ld	e, a
      00258B 56                    9443 	ld	d, (hl)
      00258C 21 0B 00              9444 	ld	hl, #0x000b
      00258F 19                    9445 	add	hl, de
      002590 E5                    9446 	push	hl
      002591 7D                    9447 	ld	a, l
      002592 F8 06                 9448 	ldhl	sp,	#6
      002594 77                    9449 	ld	(hl), a
      002595 E1                    9450 	pop	hl
      002596 7C                    9451 	ld	a, h
      002597 F8 05                 9452 	ldhl	sp,	#5
      002599 32                    9453 	ld	(hl-), a
      00259A 2A                    9454 	ld	a, (hl+)
      00259B 5F                    9455 	ld	e, a
      00259C 56                    9456 	ld	d, (hl)
      00259D 1A                    9457 	ld	a, (de)
      00259E 4F                    9458 	ld	c, a
      00259F 59                    9459 	ld	e, c
      0025A0 16 00                 9460 	ld	d, #0x00
      0025A2 AF                    9461 	xor	a, a
      0025A3 91                    9462 	sub	a, c
      0025A4 CB 7B                 9463 	bit	7, e
      0025A6 28 07                 9464 	jr	Z, 00347$
      0025A8 CB 7A                 9465 	bit	7, d
      0025AA 20 08                 9466 	jr	NZ, 00348$
      0025AC BF                    9467 	cp	a, a
      0025AD 18 05                 9468 	jr	00348$
      0025AF                       9469 00347$:
      0025AF CB 7A                 9470 	bit	7, d
      0025B1 28 01                 9471 	jr	Z, 00348$
      0025B3 37                    9472 	scf
      0025B4                       9473 00348$:
      0025B4 30 35                 9474 	jr	NC, 00118$
                                   9475 ;main.c:1284: if(is_alive(machines + gunidx) && firedbull != 3) {
      0025B6 F8 07                 9476 	ldhl	sp,	#7
      0025B8 7E                    9477 	ld	a, (hl)
      0025B9 D6 03                 9478 	sub	a, #0x03
      0025BB 28 2E                 9479 	jr	Z, 00118$
                                   9480 ;main.c:1285: if(cooldown_enemy(machines + gunidx, 20)) {
      0025BD C1                    9481 	pop	bc
      0025BE C5                    9482 	push	bc
      0025BF 3E 14                 9483 	ld	a, #0x14
      0025C1 F5                    9484 	push	af
      0025C2 33                    9485 	inc	sp
      0025C3 C5                    9486 	push	bc
      0025C4 CDrBEr22              9487 	call	_cooldown_enemy
      0025C7 E8 03                 9488 	add	sp, #3
      0025C9 7B                    9489 	ld	a, e
      0025CA B7                    9490 	or	a, a
      0025CB CArD2r26              9491 	jp	Z, 00145$
                                   9492 ;main.c:1286: fire_bigbullet(machines + gunidx, -2, 0);
      0025CE F8 00                 9493 	ldhl	sp,	#0
      0025D0 2A                    9494 	ld	a, (hl+)
      0025D1 5E                    9495 	ld	e, (hl)
      0025D2 F8 04                 9496 	ldhl	sp,	#4
      0025D4 22                    9497 	ld	(hl+), a
      0025D5 73                    9498 	ld	(hl), e
      0025D6 AF                    9499 	xor	a, a
      0025D7 57                    9500 	ld	d,a
      0025D8 1E FE                 9501 	ld	e,#0xfe
      0025DA D5                    9502 	push	de
      0025DB 2B                    9503 	dec	hl
      0025DC 2A                    9504 	ld	a, (hl+)
      0025DD 66                    9505 	ld	h, (hl)
      0025DE 6F                    9506 	ld	l, a
      0025DF E5                    9507 	push	hl
      0025E0 CDr00r14              9508 	call	_fire_bigbullet
      0025E3 E8 04                 9509 	add	sp, #4
                                   9510 ;main.c:1287: firedbull++;
      0025E5 F8 07                 9511 	ldhl	sp,	#7
      0025E7 34                    9512 	inc	(hl)
      0025E8 C3rD2r26              9513 	jp	00145$
      0025EB                       9514 00118$:
                                   9515 ;main.c:1289: } else if(cooldown_enemy(machines + gunidx, 30)) {  // Cooldown until next attack
      0025EB F8 00                 9516 	ldhl	sp,	#0
      0025ED 2A                    9517 	ld	a, (hl+)
      0025EE 5E                    9518 	ld	e, (hl)
      0025EF F8 04                 9519 	ldhl	sp,	#4
      0025F1 22                    9520 	ld	(hl+), a
      0025F2 73                    9521 	ld	(hl), e
      0025F3 3E 1E                 9522 	ld	a, #0x1e
      0025F5 F5                    9523 	push	af
      0025F6 33                    9524 	inc	sp
      0025F7 2B                    9525 	dec	hl
      0025F8 2A                    9526 	ld	a, (hl+)
      0025F9 66                    9527 	ld	h, (hl)
      0025FA 6F                    9528 	ld	l, a
      0025FB E5                    9529 	push	hl
      0025FC CDrBEr22              9530 	call	_cooldown_enemy
      0025FF E8 03                 9531 	add	sp, #3
      002601 7B                    9532 	ld	a, e
      002602 B7                    9533 	or	a, a
      002603 CArD2r26              9534 	jp	Z, 00145$
                                   9535 ;main.c:1290: firedbull = 0;
      002606 AF                    9536 	xor	a, a
      002607 F8 07                 9537 	ldhl	sp,	#7
                                   9538 ;main.c:1291: pattrn++;
      002609 32                    9539 	ld	(hl-), a
      00260A 34                    9540 	inc	(hl)
      00260B C3rD2r26              9541 	jp	00145$
      00260E                       9542 00144$:
                                   9543 ;main.c:1293: } else if(pattrn == 3) {  // Stinger pattern
      00260E F8 06                 9544 	ldhl	sp,	#6
      002610 7E                    9545 	ld	a, (hl)
      002611 D6 03                 9546 	sub	a, #0x03
      002613 C2rD2r26              9547 	jp	NZ,00145$
                                   9548 ;main.c:1294: if(is_alive(machines + 1)) {
                                   9549 ;main.c:831: return mch->shield > 0;
      002616 21r78r00              9550 	ld	hl, #(_machines + 0x001c)
      002619 4E                    9551 	ld	c, (hl)
      00261A 59                    9552 	ld	e, c
      00261B 16 00                 9553 	ld	d, #0x00
      00261D AF                    9554 	xor	a, a
      00261E 91                    9555 	sub	a, c
      00261F CB 7B                 9556 	bit	7, e
      002621 28 07                 9557 	jr	Z, 00352$
      002623 CB 7A                 9558 	bit	7, d
      002625 20 08                 9559 	jr	NZ, 00353$
      002627 BF                    9560 	cp	a, a
      002628 18 05                 9561 	jr	00353$
      00262A                       9562 00352$:
      00262A CB 7A                 9563 	bit	7, d
      00262C 28 01                 9564 	jr	Z, 00353$
      00262E 37                    9565 	scf
      00262F                       9566 00353$:
      00262F D2rCEr26              9567 	jp	NC, 00139$
                                   9568 ;main.c:1294: if(is_alive(machines + 1)) {
                                   9569 ;main.c:1295: machines[1].groundflg = pl->groundflg;
      002632 21rC3r00              9570 	ld	hl, #_pl + 1
      002635 2B                    9571 	dec	hl
      002636 2A                    9572 	ld	a, (hl+)
      002637 4F                    9573 	ld	c, a
      002638 46                    9574 	ld	b, (hl)
      002639 0A                    9575 	ld	a, (bc)
      00263A EAr6Dr00              9576 	ld	(#(_machines + 0x0011)),a
                                   9577 ;main.c:1296: if(machines[1].cyccount == 0) {
      00263D FAr75r00              9578 	ld	a, (#(_machines + 0x0019) + 0)
      002640 F8 05                 9579 	ldhl	sp,	#5
      002642 77                    9580 	ld	(hl), a
      002643 F8 05                 9581 	ldhl	sp,	#5
      002645 7E                    9582 	ld	a, (hl)
      002646 B7                    9583 	or	a, a
      002647 20 1D                 9584 	jr	NZ, 00136$
                                   9585 ;main.c:1297: move_enemy(machines + 1, -2, 2);
      002649 11 FE 02              9586 	ld	de, #0x02fe
      00264C D5                    9587 	push	de
      00264D 21r6Dr00              9588 	ld	hl, #(_machines + 0x0011)
      002650 E5                    9589 	push	hl
      002651 CDr3Fr0A              9590 	call	_move_enemy
      002654 E8 04                 9591 	add	sp, #4
                                   9592 ;main.c:1298: if(machines[1].y == 114) { // Rewrite
      002656 FAr6Fr00              9593 	ld	a, (#(_machines + 0x0013) + 0)
      002659 D6 72                 9594 	sub	a, #0x72
      00265B 20 75                 9595 	jr	NZ, 00145$
                                   9596 ;main.c:1299: machines[1].cyccount++;
      00265D FAr75r00              9597 	ld	a, (#(_machines + 0x0019) + 0)
      002660 3C                    9598 	inc	a
      002661 EAr75r00              9599 	ld	(#(_machines + 0x0019)),a
      002664 18 6C                 9600 	jr	00145$
      002666                       9601 00136$:
                                   9602 ;main.c:1301: } else if(machines[1].cyccount == 1) {
      002666 F8 05                 9603 	ldhl	sp,	#5
      002668 7E                    9604 	ld	a, (hl)
      002669 3D                    9605 	dec	a
      00266A 20 1E                 9606 	jr	NZ, 00133$
                                   9607 ;main.c:1302: move_enemy(machines + 1, -4, 0);
      00266C AF                    9608 	xor	a, a
      00266D 57                    9609 	ld	d,a
      00266E 1E FC                 9610 	ld	e,#0xfc
      002670 D5                    9611 	push	de
      002671 21r6Dr00              9612 	ld	hl, #(_machines + 0x0011)
      002674 E5                    9613 	push	hl
      002675 CDr3Fr0A              9614 	call	_move_enemy
      002678 E8 04                 9615 	add	sp, #4
                                   9616 ;main.c:1303: if(machines[1].x < 16) {
      00267A FAr6Er00              9617 	ld	a, (#(_machines + 0x0012) + 0)
      00267D D6 10                 9618 	sub	a, #0x10
      00267F 30 51                 9619 	jr	NC, 00145$
                                   9620 ;main.c:1304: machines[1].cyccount++;
      002681 FAr75r00              9621 	ld	a, (#(_machines + 0x0019) + 0)
      002684 3C                    9622 	inc	a
      002685 EAr75r00              9623 	ld	(#(_machines + 0x0019)),a
      002688 18 48                 9624 	jr	00145$
      00268A                       9625 00133$:
                                   9626 ;main.c:1306: } else if(machines[1].cyccount == 2) {
      00268A F8 05                 9627 	ldhl	sp,	#5
      00268C 7E                    9628 	ld	a, (hl)
      00268D D6 02                 9629 	sub	a, #0x02
      00268F 20 1D                 9630 	jr	NZ, 00130$
                                   9631 ;main.c:1307: move_enemy(machines + 1, 2, -2);
      002691 11 02 FE              9632 	ld	de, #0xfe02
      002694 D5                    9633 	push	de
      002695 21r6Dr00              9634 	ld	hl, #(_machines + 0x0011)
      002698 E5                    9635 	push	hl
      002699 CDr3Fr0A              9636 	call	_move_enemy
      00269C E8 04                 9637 	add	sp, #4
                                   9638 ;main.c:1308: if(machines[1].y == 96) {
      00269E FAr6Fr00              9639 	ld	a, (#(_machines + 0x0013) + 0)
      0026A1 D6 60                 9640 	sub	a, #0x60
      0026A3 20 2D                 9641 	jr	NZ, 00145$
                                   9642 ;main.c:1309: machines[1].cyccount++;
      0026A5 FAr75r00              9643 	ld	a, (#(_machines + 0x0019) + 0)
      0026A8 3C                    9644 	inc	a
      0026A9 EAr75r00              9645 	ld	(#(_machines + 0x0019)),a
      0026AC 18 24                 9646 	jr	00145$
      0026AE                       9647 00130$:
                                   9648 ;main.c:1312: move_enemy(machines + 1, 4, 0);
      0026AE AF                    9649 	xor	a, a
      0026AF 57                    9650 	ld	d,a
      0026B0 1E 04                 9651 	ld	e,#0x04
      0026B2 D5                    9652 	push	de
      0026B3 21r6Dr00              9653 	ld	hl, #(_machines + 0x0011)
      0026B6 E5                    9654 	push	hl
      0026B7 CDr3Fr0A              9655 	call	_move_enemy
      0026BA E8 04                 9656 	add	sp, #4
                                   9657 ;main.c:1313: if(machines[1].x == 121) {
      0026BC FAr6Er00              9658 	ld	a, (#(_machines + 0x0012) + 0)
      0026BF D6 79                 9659 	sub	a, #0x79
      0026C1 20 0F                 9660 	jr	NZ, 00145$
                                   9661 ;main.c:1314: machines[1].cyccount = 0;
      0026C3 21r75r00              9662 	ld	hl, #(_machines + 0x0019)
      0026C6 36 00                 9663 	ld	(hl), #0x00
                                   9664 ;main.c:1315: pattrn = 1;  // Reset boss pattern
      0026C8 F8 06                 9665 	ldhl	sp,	#6
      0026CA 36 01                 9666 	ld	(hl), #0x01
      0026CC 18 04                 9667 	jr	00145$
      0026CE                       9668 00139$:
                                   9669 ;main.c:1319: pattrn = 1;
      0026CE F8 06                 9670 	ldhl	sp,	#6
      0026D0 36 01                 9671 	ld	(hl), #0x01
      0026D2                       9672 00145$:
                                   9673 ;main.c:1323: manage_projectiles();
      0026D2 CDrA5r0C              9674 	call	_manage_projectiles
                                   9675 ;main.c:1324: manage_machines();
      0026D5 CDr7Cr0D              9676 	call	_manage_machines
                                   9677 ;main.c:1326: if(bossclearflg == 0 && (!(is_alive(machines + 1) || is_alive(machines + 2) || is_alive(machines + 3))) ) {
      0026D8 FAr03r00              9678 	ld	a, (#_bossclearflg)
      0026DB B7                    9679 	or	a, a
      0026DC 20 56                 9680 	jr	NZ, 00148$
                                   9681 ;main.c:831: return mch->shield > 0;
      0026DE 21r78r00              9682 	ld	hl, #(_machines + 0x0011) + 11
      0026E1 4E                    9683 	ld	c, (hl)
      0026E2 59                    9684 	ld	e, c
      0026E3 16 00                 9685 	ld	d, #0x00
      0026E5 AF                    9686 	xor	a, a
      0026E6 91                    9687 	sub	a, c
      0026E7 CB 7B                 9688 	bit	7, e
      0026E9 28 07                 9689 	jr	Z, 00364$
      0026EB CB 7A                 9690 	bit	7, d
      0026ED 20 08                 9691 	jr	NZ, 00365$
      0026EF BF                    9692 	cp	a, a
      0026F0 18 05                 9693 	jr	00365$
      0026F2                       9694 00364$:
      0026F2 CB 7A                 9695 	bit	7, d
      0026F4 28 01                 9696 	jr	Z, 00365$
      0026F6 37                    9697 	scf
      0026F7                       9698 00365$:
      0026F7 38 3B                 9699 	jr	C, 00148$
                                   9700 ;main.c:1326: if(bossclearflg == 0 && (!(is_alive(machines + 1) || is_alive(machines + 2) || is_alive(machines + 3))) ) {
                                   9701 ;main.c:831: return mch->shield > 0;
      0026F9 21r89r00              9702 	ld	hl, #(_machines + 0x0022) + 11
      0026FC 4E                    9703 	ld	c, (hl)
      0026FD 59                    9704 	ld	e, c
      0026FE 16 00                 9705 	ld	d, #0x00
      002700 AF                    9706 	xor	a, a
      002701 91                    9707 	sub	a, c
      002702 CB 7B                 9708 	bit	7, e
      002704 28 07                 9709 	jr	Z, 00366$
      002706 CB 7A                 9710 	bit	7, d
      002708 20 08                 9711 	jr	NZ, 00367$
      00270A BF                    9712 	cp	a, a
      00270B 18 05                 9713 	jr	00367$
      00270D                       9714 00366$:
      00270D CB 7A                 9715 	bit	7, d
      00270F 28 01                 9716 	jr	Z, 00367$
      002711 37                    9717 	scf
      002712                       9718 00367$:
      002712 38 20                 9719 	jr	C, 00148$
                                   9720 ;main.c:1326: if(bossclearflg == 0 && (!(is_alive(machines + 1) || is_alive(machines + 2) || is_alive(machines + 3))) ) {
                                   9721 ;main.c:831: return mch->shield > 0;
      002714 21r9Ar00              9722 	ld	hl, #(_machines + 0x0033) + 11
      002717 4E                    9723 	ld	c, (hl)
      002718 59                    9724 	ld	e, c
      002719 16 00                 9725 	ld	d, #0x00
      00271B AF                    9726 	xor	a, a
      00271C 91                    9727 	sub	a, c
      00271D CB 7B                 9728 	bit	7, e
      00271F 28 07                 9729 	jr	Z, 00368$
      002721 CB 7A                 9730 	bit	7, d
      002723 20 08                 9731 	jr	NZ, 00369$
      002725 BF                    9732 	cp	a, a
      002726 18 05                 9733 	jr	00369$
      002728                       9734 00368$:
      002728 CB 7A                 9735 	bit	7, d
      00272A 28 01                 9736 	jr	Z, 00369$
      00272C 37                    9737 	scf
      00272D                       9738 00369$:
      00272D 38 05                 9739 	jr	C, 00148$
                                   9740 ;main.c:1326: if(bossclearflg == 0 && (!(is_alive(machines + 1) || is_alive(machines + 2) || is_alive(machines + 3))) ) {
                                   9741 ;main.c:1327: bossclearflg = 1;
      00272F 21r03r00              9742 	ld	hl, #_bossclearflg
      002732 36 01                 9743 	ld	(hl), #0x01
      002734                       9744 00148$:
                                   9745 ;main.c:1330: if(bossclearflg == 1 && machines[1].explcount == 0 && machines[2].explcount == 0 && machines[3].explcount == 0 ) {
      002734 FAr03r00              9746 	ld	a, (#_bossclearflg)
      002737 3D                    9747 	dec	a
      002738 20 32                 9748 	jr	NZ, 00158$
      00273A FAr74r00              9749 	ld	a, (#(_machines + 0x0018) + 0)
      00273D B7                    9750 	or	a, a
      00273E 20 2C                 9751 	jr	NZ, 00158$
      002740 FAr85r00              9752 	ld	a, (#(_machines + 0x0029) + 0)
      002743 B7                    9753 	or	a, a
      002744 20 26                 9754 	jr	NZ, 00158$
      002746 FAr96r00              9755 	ld	a, (#(_machines + 0x003a) + 0)
      002749 B7                    9756 	or	a, a
      00274A 20 20                 9757 	jr	NZ, 00158$
                                   9758 ;main.c:1331: if(lockmvmnt == 2) {    // Wait until the end of the jumping animation
      00274C FArC9r00              9759 	ld	a, (#_lockmvmnt)
      00274F D6 02                 9760 	sub	a, #0x02
      002751 20 05                 9761 	jr	NZ, 00155$
                                   9762 ;main.c:1332: anim_jump();
      002753 CDr7Dr1F              9763 	call	_anim_jump
      002756 18 14                 9764 	jr	00158$
      002758                       9765 00155$:
                                   9766 ;main.c:1333: } else if(pl->explcount == 0) {
      002758 21rC3r00              9767 	ld	hl, #_pl + 1
      00275B 2B                    9768 	dec	hl
      00275C 2A                    9769 	ld	a, (hl+)
      00275D 4F                    9770 	ld	c, a
      00275E 46                    9771 	ld	b, (hl)
      00275F 21 07 00              9772 	ld	hl, #0x0007
      002762 09                    9773 	add	hl, bc
      002763 7E                    9774 	ld	a, (hl)
      002764 B7                    9775 	or	a, a
      002765 20 05                 9776 	jr	NZ, 00158$
                                   9777 ;main.c:1334: clear_all_projectiles();
      002767 CDrD1r27              9778 	call	_clear_all_projectiles
                                   9779 ;main.c:1335: break;  // Boss cleared
      00276A 18 0C                 9780 	jr	00170$
      00276C                       9781 00158$:
                                   9782 ;main.c:1339: manage_sound_chnls();
      00276C CDr1Fr0E              9783 	call	_manage_sound_chnls
                                   9784 ;main.c:1340: manage_player();
      00276F CDr45r0E              9785 	call	_manage_player
                                   9786 ;main.c:1341: wait_vbl_done();
      002772 CDr00r00              9787 	call	_wait_vbl_done
      002775 C3r5Cr24              9788 	jp	00163$
      002778                       9789 00170$:
                                   9790 ;main.c:1343: }
      002778 E8 08                 9791 	add	sp, #8
      00277A C9                    9792 	ret
                                   9793 ;main.c:1346: void pause_game() {
                                   9794 ;	---------------------------------
                                   9795 ; Function pause_game
                                   9796 ; ---------------------------------
      00277B                       9797 _pause_game::
                                   9798 ;main.c:1347: if(machines[1].type != 6) {  // Hide sprites only during stages
      00277B FAr79r00              9799 	ld	a, (#(_machines + 0x001d) + 0)
      00277E D6 06                 9800 	sub	a, #0x06
      002780 28 06                 9801 	jr	Z, 00102$
                                   9802 ;main.c:1348: HIDE_SPRITES;
      002782 F0r00                 9803 	ldh	a, (_LCDC_REG+0)
      002784 E6 FD                 9804 	and	a, #0xfd
      002786 E0r00                 9805 	ldh	(_LCDC_REG+0),a
      002788                       9806 00102$:
                                   9807 ;main.c:1350: stop_song();
      002788 CDrF8r04              9808 	call	_stop_song
                                   9809 ;main.c:1351: hud_draw_pause();
      00278B CDr81r23              9810 	call	_hud_draw_pause
                                   9811 ;main.c:1352: se_pause();
      00278E CDr66r29              9812 	call	_se_pause
                                   9813 ;main.c:1353: custom_delay(10);
      002791 3E 0A                 9814 	ld	a, #0x0a
      002793 F5                    9815 	push	af
      002794 33                    9816 	inc	sp
      002795 CDr00r00              9817 	call	_custom_delay
      002798 33                    9818 	inc	sp
                                   9819 ;main.c:1354: waitpad(J_START);
      002799 3E 80                 9820 	ld	a, #0x80
      00279B F5                    9821 	push	af
      00279C 33                    9822 	inc	sp
      00279D CDr00r00              9823 	call	_waitpad
      0027A0 33                    9824 	inc	sp
                                   9825 ;main.c:1355: custom_delay(10);
      0027A1 3E 0A                 9826 	ld	a, #0x0a
      0027A3 F5                    9827 	push	af
      0027A4 33                    9828 	inc	sp
      0027A5 CDr00r00              9829 	call	_custom_delay
      0027A8 33                    9830 	inc	sp
                                   9831 ;main.c:1356: hud_clear_pause();
      0027A9 CDrC8r23              9832 	call	_hud_clear_pause
                                   9833 ;main.c:1357: if(stageclearflg == 0) {
      0027AC FAr02r00              9834 	ld	a, (#_stageclearflg)
      0027AF B7                    9835 	or	a, a
      0027B0 20 15                 9836 	jr	NZ, 00104$
                                   9837 ;main.c:1358: play_song(crntstage->theme);
      0027B2 21r08r00              9838 	ld	hl, #_crntstage + 1
      0027B5 2B                    9839 	dec	hl
      0027B6 2A                    9840 	ld	a, (hl+)
      0027B7 4F                    9841 	ld	c, a
      0027B8 46                    9842 	ld	b, (hl)
      0027B9 21 0D 00              9843 	ld	hl, #0x000d
      0027BC 09                    9844 	add	hl, bc
      0027BD 2A                    9845 	ld	a, (hl+)
      0027BE 4F                    9846 	ld	c, a
      0027BF 46                    9847 	ld	b, (hl)
      0027C0 C5                    9848 	push	bc
      0027C1 CDrE2r04              9849 	call	_play_song
      0027C4 E8 02                 9850 	add	sp, #2
      0027C6 C9                    9851 	ret
      0027C7                       9852 00104$:
                                   9853 ;main.c:1360: play_song(&bosstheme);
      0027C7 21r00r00              9854 	ld	hl, #_bosstheme
      0027CA E5                    9855 	push	hl
      0027CB CDrE2r04              9856 	call	_play_song
      0027CE E8 02                 9857 	add	sp, #2
                                   9858 ;main.c:1362: }
      0027D0 C9                    9859 	ret
                                   9860 ;main.c:1368: void clear_all_projectiles() {
                                   9861 ;	---------------------------------
                                   9862 ; Function clear_all_projectiles
                                   9863 ; ---------------------------------
      0027D1                       9864 _clear_all_projectiles::
                                   9865 ;main.c:1369: for(pjctptr = projectiles; pjctptr <= projectiles + pjctllimit; pjctptr++) {
      0027D1 21r58r00              9866 	ld	hl, #_pjctptr
      0027D4 3Er16                 9867 	ld	a, #<(_projectiles)
      0027D6 22                    9868 	ld	(hl+), a
      0027D7 36s00                 9869 	ld	(hl), #>(_projectiles)
      0027D9                       9870 00105$:
      0027D9 21rC9r00              9871 	ld	hl, #_pjctllimit
      0027DC 6E                    9872 	ld	l, (hl)
      0027DD 26 00                 9873 	ld	h, #0x00
      0027DF 29                    9874 	add	hl, hl
      0027E0 29                    9875 	add	hl, hl
      0027E1 29                    9876 	add	hl, hl
      0027E2 11r16r00              9877 	ld	de, #_projectiles
      0027E5 19                    9878 	add	hl, de
      0027E6 4D                    9879 	ld	c, l
      0027E7 44                    9880 	ld	b, h
      0027E8 21r58r00              9881 	ld	hl, #_pjctptr
      0027EB 79                    9882 	ld	a, c
      0027EC 96                    9883 	sub	a, (hl)
      0027ED 23                    9884 	inc	hl
      0027EE 78                    9885 	ld	a, b
      0027EF 9E                    9886 	sbc	a, (hl)
      0027F0 D8                    9887 	ret	C
                                   9888 ;main.c:1370: if(pjctptr->oam != NULL) {
      0027F1 21r59r00              9889 	ld	hl, #_pjctptr + 1
      0027F4 2B                    9890 	dec	hl
      0027F5 2A                    9891 	ld	a, (hl+)
      0027F6 4F                    9892 	ld	c, a
      0027F7 46                    9893 	ld	b, (hl)
      0027F8 21 06 00              9894 	ld	hl, #0x0006
      0027FB 09                    9895 	add	hl, bc
      0027FC 2A                    9896 	ld	a, (hl+)
      0027FD 4E                    9897 	ld	c, (hl)
      0027FE B1                    9898 	or	a, c
      0027FF 28 0C                 9899 	jr	Z, 00106$
                                   9900 ;main.c:1371: destroy_projectile(pjctptr);
      002801 21r58r00              9901 	ld	hl, #_pjctptr
      002804 2A                    9902 	ld	a, (hl+)
      002805 66                    9903 	ld	h, (hl)
      002806 6F                    9904 	ld	l, a
      002807 E5                    9905 	push	hl
      002808 CDr44r16              9906 	call	_destroy_projectile
      00280B E8 02                 9907 	add	sp, #2
      00280D                       9908 00106$:
                                   9909 ;main.c:1369: for(pjctptr = projectiles; pjctptr <= projectiles + pjctllimit; pjctptr++) {
      00280D 21r58r00              9910 	ld	hl, #_pjctptr
      002810 7E                    9911 	ld	a, (hl)
      002811 C6 08                 9912 	add	a, #0x08
      002813 22                    9913 	ld	(hl+), a
      002814 7E                    9914 	ld	a, (hl)
      002815 CE 00                 9915 	adc	a, #0x00
      002817 77                    9916 	ld	(hl), a
                                   9917 ;main.c:1374: }
      002818 18 BF                 9918 	jr	00105$
                                   9919 ;main.c:1377: void anim_stage_start() {
                                   9920 ;	---------------------------------
                                   9921 ; Function anim_stage_start
                                   9922 ; ---------------------------------
      00281A                       9923 _anim_stage_start::
                                   9924 ;main.c:1378: anim_reverse_blackout();
      00281A CDrF6r03              9925 	call	_anim_reverse_blackout
                                   9926 ;main.c:1379: do {
      00281D                       9927 00101$:
                                   9928 ;main.c:1380: move_machine(pl, 1, 0);
      00281D AF                    9929 	xor	a, a
      00281E 57                    9930 	ld	d,a
      00281F 1E 01                 9931 	ld	e,#0x01
      002821 D5                    9932 	push	de
      002822 21rC2r00              9933 	ld	hl, #_pl
      002825 2A                    9934 	ld	a, (hl+)
      002826 66                    9935 	ld	h, (hl)
      002827 6F                    9936 	ld	l, a
      002828 E5                    9937 	push	hl
      002829 CDrF3r08              9938 	call	_move_machine
      00282C E8 04                 9939 	add	sp, #4
                                   9940 ;main.c:1381: wait_vbl_done();
      00282E CDr00r00              9941 	call	_wait_vbl_done
                                   9942 ;main.c:1382: } while(pl->x != 16);
      002831 21rC3r00              9943 	ld	hl, #_pl + 1
      002834 2B                    9944 	dec	hl
      002835 2A                    9945 	ld	a, (hl+)
      002836 4F                    9946 	ld	c, a
      002837 46                    9947 	ld	b, (hl)
      002838 03                    9948 	inc	bc
      002839 0A                    9949 	ld	a, (bc)
      00283A D6 10                 9950 	sub	a, #0x10
      00283C 20 DF                 9951 	jr	NZ, 00101$
                                   9952 ;main.c:1383: }
      00283E C9                    9953 	ret
                                   9954 ;main.c:1386: void anim_stage_end() {
                                   9955 ;	---------------------------------
                                   9956 ; Function anim_stage_end
                                   9957 ; ---------------------------------
      00283F                       9958 _anim_stage_end::
                                   9959 ;main.c:1387: clear_all_projectiles();
      00283F CDrD1r27              9960 	call	_clear_all_projectiles
                                   9961 ;main.c:1388: pl->cyccount = 0;
      002842 21rC3r00              9962 	ld	hl, #_pl + 1
      002845 2B                    9963 	dec	hl
      002846 2A                    9964 	ld	a, (hl+)
      002847 4F                    9965 	ld	c, a
      002848 46                    9966 	ld	b, (hl)
      002849 21 08 00              9967 	ld	hl, #0x0008
      00284C 09                    9968 	add	hl, bc
      00284D 36 00                 9969 	ld	(hl), #0x00
                                   9970 ;main.c:1389: while(1) {
      00284F                       9971 00108$:
                                   9972 ;main.c:1390: build_road();
      00284F CDrA4r0B              9973 	call	_build_road
                                   9974 ;main.c:1391: incr_bkg_x_coords(5);
      002852 3E 05                 9975 	ld	a, #0x05
      002854 F5                    9976 	push	af
      002855 33                    9977 	inc	sp
      002856 CDr7Br0A              9978 	call	_incr_bkg_x_coords
      002859 33                    9979 	inc	sp
                                   9980 ;main.c:1392: if(lockmvmnt == 2) {    // Wait until the end of the jumping animation
      00285A FArC9r00              9981 	ld	a, (#_lockmvmnt)
      00285D D6 02                 9982 	sub	a, #0x02
      00285F 20 05                 9983 	jr	NZ, 00105$
                                   9984 ;main.c:1393: anim_jump();
      002861 CDr7Dr1F              9985 	call	_anim_jump
      002864 18 1B                 9986 	jr	00106$
      002866                       9987 00105$:
                                   9988 ;main.c:1394: } else if(pl->x < 168) {
      002866 21rC3r00              9989 	ld	hl, #_pl + 1
      002869 2B                    9990 	dec	hl
      00286A 2A                    9991 	ld	a, (hl+)
      00286B 4F                    9992 	ld	c, a
      00286C 46                    9993 	ld	b, (hl)
      00286D 03                    9994 	inc	bc
      00286E 0A                    9995 	ld	a, (bc)
      00286F D6 A8                 9996 	sub	a, #0xa8
      002871 D0                    9997 	ret	NC
                                   9998 ;main.c:1395: move_machine(pl, 1, 0);
      002872 AF                    9999 	xor	a, a
      002873 57                   10000 	ld	d,a
      002874 1E 01                10001 	ld	e,#0x01
      002876 D5                   10002 	push	de
      002877 2B                   10003 	dec	hl
      002878 2A                   10004 	ld	a, (hl+)
      002879 66                   10005 	ld	h, (hl)
      00287A 6F                   10006 	ld	l, a
      00287B E5                   10007 	push	hl
      00287C CDrF3r08             10008 	call	_move_machine
      00287F E8 04                10009 	add	sp, #4
                                  10010 ;main.c:1397: break;  // Animation has finished
      002881                      10011 00106$:
                                  10012 ;main.c:1399: wait_vbl_done();
      002881 CDr00r00             10013 	call	_wait_vbl_done
                                  10014 ;main.c:1401: }
      002884 18 C9                10015 	jr	00108$
                                  10016 ;main.c:1459: void upd_mute_chnl_cycles(UINT8 chnum) {    // Checks if a muted channel needs to be unmuted
                                  10017 ;	---------------------------------
                                  10018 ; Function upd_mute_chnl_cycles
                                  10019 ; ---------------------------------
      002886                      10020 _upd_mute_chnl_cycles::
                                  10021 ;main.c:1460: if(chmutedcyccnt[chnum] != 0) {
      002886 01rD2r00             10022 	ld	bc, #_chmutedcyccnt+0
      002889 F8 02                10023 	ldhl	sp,	#2
      00288B 6E                   10024 	ld	l, (hl)
      00288C 26 00                10025 	ld	h, #0x00
      00288E 09                   10026 	add	hl, bc
      00288F 4D                   10027 	ld	c, l
      002890 44                   10028 	ld	b, h
      002891 0A                   10029 	ld	a, (bc)
      002892 B7                   10030 	or	a, a
      002893 28 03                10031 	jr	Z, 00102$
                                  10032 ;main.c:1461: chmutedcyccnt[chnum]--;     // Countdown untul unmute
      002895 3D                   10033 	dec	a
      002896 02                   10034 	ld	(bc), a
      002897 C9                   10035 	ret
      002898                      10036 00102$:
                                  10037 ;main.c:1463: hUGE_mute_channel(chnum, HT_CH_PLAY);
      002898 C5                   10038 	push	bc
      002899 AF                   10039 	xor	a, a
      00289A F5                   10040 	push	af
      00289B 33                   10041 	inc	sp
      00289C F8 05                10042 	ldhl	sp,	#5
      00289E 7E                   10043 	ld	a, (hl)
      00289F F5                   10044 	push	af
      0028A0 33                   10045 	inc	sp
      0028A1 CDr00r00             10046 	call	_hUGE_mute_channel
      0028A4 E8 02                10047 	add	sp, #2
      0028A6 C1                   10048 	pop	bc
                                  10049 ;main.c:1464: chmutedcyccnt[chnum] = 255;
      0028A7 3E FF                10050 	ld	a, #0xff
      0028A9 02                   10051 	ld	(bc), a
                                  10052 ;main.c:1466: }
      0028AA C9                   10053 	ret
                                  10054 ;main.c:1469: void se_fall_in_hole() {
                                  10055 ;	---------------------------------
                                  10056 ; Function se_fall_in_hole
                                  10057 ; ---------------------------------
      0028AB                      10058 _se_fall_in_hole::
                                  10059 ;main.c:1470: mute_music_pl_chnl(0);
      0028AB AF                   10060 	xor	a, a
      0028AC F5                   10061 	push	af
      0028AD 33                   10062 	inc	sp
      0028AE CDr0Ar04             10063 	call	_mute_music_pl_chnl
      0028B1 33                   10064 	inc	sp
                                  10065 ;main.c:1471: NR10_REG = 0x1F;
      0028B2 3E 1F                10066 	ld	a, #0x1f
      0028B4 E0r00                10067 	ldh	(_NR10_REG+0),a
                                  10068 ;main.c:1472: NR11_REG = 0x81;
      0028B6 3E 81                10069 	ld	a, #0x81
      0028B8 E0r00                10070 	ldh	(_NR11_REG+0),a
                                  10071 ;main.c:1473: NR12_REG = 0x97;
      0028BA 3E 97                10072 	ld	a, #0x97
      0028BC E0r00                10073 	ldh	(_NR12_REG+0),a
                                  10074 ;main.c:1474: NR13_REG = 0xF7;
      0028BE 3E F7                10075 	ld	a, #0xf7
      0028C0 E0r00                10076 	ldh	(_NR13_REG+0),a
                                  10077 ;main.c:1475: NR14_REG = 0x85;
      0028C2 3E 85                10078 	ld	a, #0x85
      0028C4 E0r00                10079 	ldh	(_NR14_REG+0),a
                                  10080 ;main.c:1476: }
      0028C6 C9                   10081 	ret
                                  10082 ;main.c:1479: void se_fire_bullet() {
                                  10083 ;	---------------------------------
                                  10084 ; Function se_fire_bullet
                                  10085 ; ---------------------------------
      0028C7                      10086 _se_fire_bullet::
                                  10087 ;main.c:1480: mute_music_pl_chnl(3);
      0028C7 3E 03                10088 	ld	a, #0x03
      0028C9 F5                   10089 	push	af
      0028CA 33                   10090 	inc	sp
      0028CB CDr0Ar04             10091 	call	_mute_music_pl_chnl
      0028CE 33                   10092 	inc	sp
                                  10093 ;main.c:1481: NR41_REG = 0x00;
      0028CF 3E 00                10094 	ld	a, #0x00
      0028D1 E0r00                10095 	ldh	(_NR41_REG+0),a
                                  10096 ;main.c:1482: NR42_REG = 0xD4;
      0028D3 3E D4                10097 	ld	a, #0xd4
      0028D5 E0r00                10098 	ldh	(_NR42_REG+0),a
                                  10099 ;main.c:1483: NR43_REG = 0x52;
      0028D7 3E 52                10100 	ld	a, #0x52
      0028D9 E0r00                10101 	ldh	(_NR43_REG+0),a
                                  10102 ;main.c:1484: NR44_REG = 0xC0;
      0028DB 3E C0                10103 	ld	a, #0xc0
      0028DD E0r00                10104 	ldh	(_NR44_REG+0),a
                                  10105 ;main.c:1485: }
      0028DF C9                   10106 	ret
                                  10107 ;main.c:1488: void se_fire_laser() {
                                  10108 ;	---------------------------------
                                  10109 ; Function se_fire_laser
                                  10110 ; ---------------------------------
      0028E0                      10111 _se_fire_laser::
                                  10112 ;main.c:1489: mute_music_pl_chnl(0);
      0028E0 AF                   10113 	xor	a, a
      0028E1 F5                   10114 	push	af
      0028E2 33                   10115 	inc	sp
      0028E3 CDr0Ar04             10116 	call	_mute_music_pl_chnl
      0028E6 33                   10117 	inc	sp
                                  10118 ;main.c:1490: NR10_REG = 0x2E;
      0028E7 3E 2E                10119 	ld	a, #0x2e
      0028E9 E0r00                10120 	ldh	(_NR10_REG+0),a
                                  10121 ;main.c:1491: NR11_REG = 0xC1;
      0028EB 3E C1                10122 	ld	a, #0xc1
      0028ED E0r00                10123 	ldh	(_NR11_REG+0),a
                                  10124 ;main.c:1492: NR12_REG = 0xD2;
      0028EF 3E D2                10125 	ld	a, #0xd2
      0028F1 E0r00                10126 	ldh	(_NR12_REG+0),a
                                  10127 ;main.c:1493: NR13_REG = 0x54;
      0028F3 3E 54                10128 	ld	a, #0x54
      0028F5 E0r00                10129 	ldh	(_NR13_REG+0),a
                                  10130 ;main.c:1494: NR14_REG = 0x87;
      0028F7 3E 87                10131 	ld	a, #0x87
      0028F9 E0r00                10132 	ldh	(_NR14_REG+0),a
                                  10133 ;main.c:1495: }
      0028FB C9                   10134 	ret
                                  10135 ;main.c:1498: void se_drop_bomb() {
                                  10136 ;	---------------------------------
                                  10137 ; Function se_drop_bomb
                                  10138 ; ---------------------------------
      0028FC                      10139 _se_drop_bomb::
                                  10140 ;main.c:1499: mute_music_pl_chnl(0);
      0028FC AF                   10141 	xor	a, a
      0028FD F5                   10142 	push	af
      0028FE 33                   10143 	inc	sp
      0028FF CDr0Ar04             10144 	call	_mute_music_pl_chnl
      002902 33                   10145 	inc	sp
                                  10146 ;main.c:1500: NR10_REG = 0x7F;
      002903 3E 7F                10147 	ld	a, #0x7f
      002905 E0r00                10148 	ldh	(_NR10_REG+0),a
                                  10149 ;main.c:1501: NR11_REG = 0x81;
      002907 3E 81                10150 	ld	a, #0x81
      002909 E0r00                10151 	ldh	(_NR11_REG+0),a
                                  10152 ;main.c:1502: NR12_REG = 0xD7;
      00290B 3E D7                10153 	ld	a, #0xd7
      00290D E0r00                10154 	ldh	(_NR12_REG+0),a
                                  10155 ;main.c:1503: NR13_REG = 0x55;
      00290F 3E 55                10156 	ld	a, #0x55
      002911 E0r00                10157 	ldh	(_NR13_REG+0),a
                                  10158 ;main.c:1504: NR14_REG = 0x87;
      002913 3E 87                10159 	ld	a, #0x87
      002915 E0r00                10160 	ldh	(_NR14_REG+0),a
                                  10161 ;main.c:1505: }
      002917 C9                   10162 	ret
                                  10163 ;main.c:1508: void se_explode() {
                                  10164 ;	---------------------------------
                                  10165 ; Function se_explode
                                  10166 ; ---------------------------------
      002918                      10167 _se_explode::
                                  10168 ;main.c:1509: mute_music_pl_chnl(3);
      002918 3E 03                10169 	ld	a, #0x03
      00291A F5                   10170 	push	af
      00291B 33                   10171 	inc	sp
      00291C CDr0Ar04             10172 	call	_mute_music_pl_chnl
      00291F 33                   10173 	inc	sp
                                  10174 ;main.c:1510: NR41_REG = 0x04;
      002920 3E 04                10175 	ld	a, #0x04
      002922 E0r00                10176 	ldh	(_NR41_REG+0),a
                                  10177 ;main.c:1511: NR42_REG = 0xD5;
      002924 3E D5                10178 	ld	a, #0xd5
      002926 E0r00                10179 	ldh	(_NR42_REG+0),a
                                  10180 ;main.c:1512: NR43_REG = 0x55;
      002928 3E 55                10181 	ld	a, #0x55
      00292A E0r00                10182 	ldh	(_NR43_REG+0),a
                                  10183 ;main.c:1513: NR44_REG = 0x80;
      00292C 3E 80                10184 	ld	a, #0x80
      00292E E0r00                10185 	ldh	(_NR44_REG+0),a
                                  10186 ;main.c:1514: }
      002930 C9                   10187 	ret
                                  10188 ;main.c:1517: void se_get_hit() {
                                  10189 ;	---------------------------------
                                  10190 ; Function se_get_hit
                                  10191 ; ---------------------------------
      002931                      10192 _se_get_hit::
                                  10193 ;main.c:1518: mute_music_pl_chnl(1);
      002931 3E 01                10194 	ld	a, #0x01
      002933 F5                   10195 	push	af
      002934 33                   10196 	inc	sp
      002935 CDr0Ar04             10197 	call	_mute_music_pl_chnl
      002938 33                   10198 	inc	sp
                                  10199 ;main.c:1519: NR21_REG = 0x40;
      002939 3E 40                10200 	ld	a, #0x40
      00293B E0r00                10201 	ldh	(_NR21_REG+0),a
                                  10202 ;main.c:1520: NR22_REG = 0xD1;
      00293D 3E D1                10203 	ld	a, #0xd1
      00293F E0r00                10204 	ldh	(_NR22_REG+0),a
                                  10205 ;main.c:1521: NR23_REG = 0xCD;
      002941 3E CD                10206 	ld	a, #0xcd
      002943 E0r00                10207 	ldh	(_NR23_REG+0),a
                                  10208 ;main.c:1522: NR24_REG = 0xC7;
      002945 3E C7                10209 	ld	a, #0xc7
      002947 E0r00                10210 	ldh	(_NR24_REG+0),a
                                  10211 ;main.c:1523: }
      002949 C9                   10212 	ret
                                  10213 ;main.c:1526: void se_jump() {
                                  10214 ;	---------------------------------
                                  10215 ; Function se_jump
                                  10216 ; ---------------------------------
      00294A                      10217 _se_jump::
                                  10218 ;main.c:1527: mute_music_pl_chnl(0);
      00294A AF                   10219 	xor	a, a
      00294B F5                   10220 	push	af
      00294C 33                   10221 	inc	sp
      00294D CDr0Ar04             10222 	call	_mute_music_pl_chnl
      002950 33                   10223 	inc	sp
                                  10224 ;main.c:1528: NR10_REG = 0x75;
      002951 3E 75                10225 	ld	a, #0x75
      002953 E0r00                10226 	ldh	(_NR10_REG+0),a
                                  10227 ;main.c:1529: NR11_REG = 0x80;
      002955 3E 80                10228 	ld	a, #0x80
      002957 E0r00                10229 	ldh	(_NR11_REG+0),a
                                  10230 ;main.c:1530: NR12_REG = 0xD2;
      002959 3E D2                10231 	ld	a, #0xd2
      00295B E0r00                10232 	ldh	(_NR12_REG+0),a
                                  10233 ;main.c:1531: NR13_REG = 0x46;
      00295D 3E 46                10234 	ld	a, #0x46
      00295F E0r00                10235 	ldh	(_NR13_REG+0),a
                                  10236 ;main.c:1532: NR14_REG = 0x85;
      002961 3E 85                10237 	ld	a, #0x85
      002963 E0r00                10238 	ldh	(_NR14_REG+0),a
                                  10239 ;main.c:1533: }
      002965 C9                   10240 	ret
                                  10241 ;main.c:1536: void se_pause() {
                                  10242 ;	---------------------------------
                                  10243 ; Function se_pause
                                  10244 ; ---------------------------------
      002966                      10245 _se_pause::
                                  10246 ;main.c:1537: NR10_REG = 0x74;
      002966 3E 74                10247 	ld	a, #0x74
      002968 E0r00                10248 	ldh	(_NR10_REG+0),a
                                  10249 ;main.c:1538: NR11_REG = 0x80;
      00296A 3E 80                10250 	ld	a, #0x80
      00296C E0r00                10251 	ldh	(_NR11_REG+0),a
                                  10252 ;main.c:1539: NR12_REG = 0xD7;
      00296E 3E D7                10253 	ld	a, #0xd7
      002970 E0r00                10254 	ldh	(_NR12_REG+0),a
                                  10255 ;main.c:1540: NR13_REG = 0x0E;
      002972 3E 0E                10256 	ld	a, #0x0e
      002974 E0r00                10257 	ldh	(_NR13_REG+0),a
                                  10258 ;main.c:1541: NR14_REG = 0x86;
      002976 3E 86                10259 	ld	a, #0x86
      002978 E0r00                10260 	ldh	(_NR14_REG+0),a
                                  10261 ;main.c:1542: }
      00297A C9                   10262 	ret
                                  10263 ;main.c:1545: void se_wpn_upgrd() {
                                  10264 ;	---------------------------------
                                  10265 ; Function se_wpn_upgrd
                                  10266 ; ---------------------------------
      00297B                      10267 _se_wpn_upgrd::
                                  10268 ;main.c:1546: mute_music_pl_chnl(0);
      00297B AF                   10269 	xor	a, a
      00297C F5                   10270 	push	af
      00297D 33                   10271 	inc	sp
      00297E CDr0Ar04             10272 	call	_mute_music_pl_chnl
      002981 33                   10273 	inc	sp
                                  10274 ;main.c:1547: NR10_REG = 0x17;
      002982 3E 17                10275 	ld	a, #0x17
      002984 E0r00                10276 	ldh	(_NR10_REG+0),a
                                  10277 ;main.c:1548: NR11_REG = 0x7A;
      002986 3E 7A                10278 	ld	a, #0x7a
      002988 E0r00                10279 	ldh	(_NR11_REG+0),a
                                  10280 ;main.c:1549: NR12_REG = 0xFF;
      00298A 3E FF                10281 	ld	a, #0xff
      00298C E0r00                10282 	ldh	(_NR12_REG+0),a
                                  10283 ;main.c:1550: NR13_REG = 0x75;
      00298E 3E 75                10284 	ld	a, #0x75
      002990 E0r00                10285 	ldh	(_NR13_REG+0),a
                                  10286 ;main.c:1551: NR14_REG = 0x85;
      002992 3E 85                10287 	ld	a, #0x85
      002994 E0r00                10288 	ldh	(_NR14_REG+0),a
                                  10289 ;main.c:1552: }
      002996 C9                   10290 	ret
                                  10291 ;main.c:1601: void mute_song() {
                                  10292 ;	---------------------------------
                                  10293 ; Function mute_song
                                  10294 ; ---------------------------------
      002997                      10295 _mute_song::
                                  10296 ;main.c:1602: hUGE_mute_channel(HT_CH1, HT_CH_MUTE);
      002997 3E 01                10297 	ld	a, #0x01
      002999 F5                   10298 	push	af
      00299A 33                   10299 	inc	sp
      00299B AF                   10300 	xor	a, a
      00299C F5                   10301 	push	af
      00299D 33                   10302 	inc	sp
      00299E CDr00r00             10303 	call	_hUGE_mute_channel
      0029A1 E8 02                10304 	add	sp, #2
                                  10305 ;main.c:1603: hUGE_mute_channel(HT_CH2, HT_CH_MUTE);
      0029A3 11 01 01             10306 	ld	de, #0x0101
      0029A6 D5                   10307 	push	de
      0029A7 CDr00r00             10308 	call	_hUGE_mute_channel
      0029AA E8 02                10309 	add	sp, #2
                                  10310 ;main.c:1604: hUGE_mute_channel(HT_CH3, HT_CH_MUTE);
      0029AC 11 02 01             10311 	ld	de, #0x0102
      0029AF D5                   10312 	push	de
      0029B0 CDr00r00             10313 	call	_hUGE_mute_channel
      0029B3 E8 02                10314 	add	sp, #2
                                  10315 ;main.c:1605: hUGE_mute_channel(HT_CH4, HT_CH_MUTE);
      0029B5 11 03 01             10316 	ld	de, #0x0103
      0029B8 D5                   10317 	push	de
      0029B9 CDr00r00             10318 	call	_hUGE_mute_channel
      0029BC E8 02                10319 	add	sp, #2
                                  10320 ;main.c:1606: }
      0029BE C9                   10321 	ret
                                  10322 ;main.c:1608: void unmute_song() {
                                  10323 ;	---------------------------------
                                  10324 ; Function unmute_song
                                  10325 ; ---------------------------------
      0029BF                      10326 _unmute_song::
                                  10327 ;main.c:1609: hUGE_mute_channel(HT_CH1, HT_CH_PLAY);
      0029BF AF                   10328 	xor	a, a
      0029C0 F5                   10329 	push	af
      0029C1 33                   10330 	inc	sp
      0029C2 AF                   10331 	xor	a, a
      0029C3 F5                   10332 	push	af
      0029C4 33                   10333 	inc	sp
      0029C5 CDr00r00             10334 	call	_hUGE_mute_channel
      0029C8 E8 02                10335 	add	sp, #2
                                  10336 ;main.c:1610: hUGE_mute_channel(HT_CH2, HT_CH_PLAY);
      0029CA AF                   10337 	xor	a, a
      0029CB 57                   10338 	ld	d,a
      0029CC 1E 01                10339 	ld	e,#0x01
      0029CE D5                   10340 	push	de
      0029CF CDr00r00             10341 	call	_hUGE_mute_channel
      0029D2 E8 02                10342 	add	sp, #2
                                  10343 ;main.c:1611: hUGE_mute_channel(HT_CH3, HT_CH_PLAY);
      0029D4 AF                   10344 	xor	a, a
      0029D5 57                   10345 	ld	d,a
      0029D6 1E 02                10346 	ld	e,#0x02
      0029D8 D5                   10347 	push	de
      0029D9 CDr00r00             10348 	call	_hUGE_mute_channel
      0029DC E8 02                10349 	add	sp, #2
                                  10350 ;main.c:1612: hUGE_mute_channel(HT_CH4, HT_CH_PLAY);
      0029DE AF                   10351 	xor	a, a
      0029DF 57                   10352 	ld	d,a
      0029E0 1E 03                10353 	ld	e,#0x03
      0029E2 D5                   10354 	push	de
      0029E3 CDr00r00             10355 	call	_hUGE_mute_channel
      0029E6 E8 02                10356 	add	sp, #2
                                  10357 ;main.c:1613: }
      0029E8 C9                   10358 	ret
                                  10359 	.area _CODE_0
                                  10360 	.area _CABS (ABS)
